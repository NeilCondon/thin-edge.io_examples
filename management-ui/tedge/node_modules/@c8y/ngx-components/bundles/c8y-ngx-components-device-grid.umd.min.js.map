{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@c8y/ngx-components/device-grid/schema-form.component.ts","ng://@c8y/ngx-components/device-grid/columns/base.filtering-form-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/base.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/alarms.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/alarms.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/group.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/group.filtering-form-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/group.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/imei.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/model.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/model.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/name.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/name.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/registration-date.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/registration-date.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/serial-number.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/serial-number.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/status.cell-renderer.component.ts","ng://@c8y/ngx-components/device-grid/columns/status.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/system-id.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/device-grid.service.ts","ng://@c8y/ngx-components/device-grid/device-grid.component.ts","ng://@c8y/ngx-components/device-grid/device-grid.module.ts","ng://@c8y/ngx-components/device-grid/columns/custom.device-grid-column.ts","ng://@c8y/ngx-components/device-grid/columns/type.device-grid-column.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","SchemaFormComponent","_super","elementRef","injector","tslib_1.__extends","ElementRef","Injector","tslib_1.__decorate","Input","Directive","selector","UpgradeComponent","BaseFilteringFormRendererComponent","context","ngOnInit","column","property","schema","cloneDeep","filteringConfig","form","model","externalFilterQuery","options","formDefaults","ngModelOptions","debounce","canApply","get","schemaFormComponent","applyFilter","resetFilter","FilteringFormRendererContext","ViewChild","forwardRef","static","Component","template","config","filteringFormRendererComponent","AlarmsCellRendererComponent","deviceGridService","CellRendererContext","DeviceGridService","type","Inject","args","tslib_1.__param","AlarmsDeviceGridColumn","initialColumnConfig","_this","name","header","gettext","cellRendererComponent","filterable","properties","critical","major","minor","warning","none","title","getFilter","filter","ors","c8y_ActiveAlarmsStatus.critical","__gt","c8y_ActiveAlarmsStatus.major","c8y_ActiveAlarmsStatus.minor","c8y_ActiveAlarmsStatus.warning","__not","__has","__and","map","sev","zero","has","undefined","__or","sortable","sortingConfig","pathSortingConfigs","path","BaseDeviceGridColumn","GroupCellRendererComponent","GroupFilteringFormRendererComponent","preselected","selectedNodes","selectionChanged","nodes","GroupDeviceGridColumn","mo","c8y_DeviceQueryString","__useFilterQueryString","__bygroupid","id","ImeiDeviceGridColumn","self","imeis","items","add","notitle","placeholder","__in","ModelCellRendererComponent","ModelDeviceGridColumn","vendingModelPath","models","_a","NameCellRendererComponent","NameDeviceGridColumn","cellCSSClassName","names","RegistrationDateCellRendererComponent","RegistrationDateDeviceGridColumn","registrationDate","after","format","before","maxDateKey","minDateKey","dates","formatDate","_b","__lt","dateToFormat","Date","toISOString","SerialNumberCellRendererComponent","SerialNumberDeviceGridColumn","serialNumbers","StatusCellRendererComponent","StatusDeviceGridColumn","responseIntervalLessThanOrEqualTo0","__le","responseIntervalNotDefined","availabilityStatusAvailable","SendStatus","AVAILABLE","availabilityStatusUnavailable","_c","UNAVAILABLE","availabilityStatusMaintenance","_d","MAINTENANCE","availabilityStatusNotDefined","connectionStatusConnected","_e","PushStatus","CONNECTED","connectionStatusDisconnected","_f","DISCONNECTED","connectionStatusMaintenance","_g","deviceUnderMaintenance","deviceNotUnderMaintenance","dataType","sendOnline","sendOffline","sendUnknown","sendNotMonitored","pushOnline","pushOffline","pushNotMonitored","maintenance","SystemIdDeviceGridColumn","ids","inventoryService","translateService","GRID_CONFIG_DEFAULT_STORAGE_KEY","DEFAULT_PAGE_SIZE","queriesUtil","QueriesUtil","getDefaultColumns","getDefaultPagination","pageSize","currentPage","getInfiniteScrollPagination","getDefaultActionControls","callback","item","delete","getDefaultBulkActionControls","getProperName","device","instant","getModel","hardware","getHardware","getSerialNumber","serialPropertyName","isVendme","getParentsNames","featuredParentId","assetParentsReferences","assetParents","references","sortedByName","sortBy","remove","concat","join","getHref","groupOrDevice","prefix","c8y_IsDeviceGroup","c8y_IsDynamicGroup","getAlarmsHref","getUserConfiguredColumns","columns","getConfig","reOrderedColumns_1","noConfigColumns","col","includes","forEach","visible","sortOrder","columnToReorder","find","ex","clearConfig","__spread","console","log","getData","pagination","query","withChildren","filters","getDevicesFilters","withParents","list","getCount","paging","totalPages","getTotal","q","buildQuery","withTotalPages","getDeviceQueryString","fullQuery","getQueryObj","addAndFilter","defaultFilter","transform","extendQueryByColumn","__filter","__orderby","JSON","parse","localStorage","getItem","saveConfig","setItem","stringify","removeItem","hardwarePropertyName","queryObj","identity","obj","cs_1","pathSortingConfig","sortOrderModifier","InventoryService","TranslateService","Injectable","DeviceGridComponent","loadMoreItemsLabel","loadingItemsLabel","selectable","baseQuery","showChildDevices","onColumnsChange","EventEmitter","onDeviceQueryStringChange","itemsSelect","onChildDevices","actionControls","bulkActionControls","serverSideDataCallback","onDataSourceModifier","bind","infiniteScroll","trackByName","_index","dataSourceModifier","res","data","filteredSize","size","emit","serverSideDataResult","dataCallback","updateFiltering","columnNames","action","FilteringActionType","ResetFilter","dataGrid","clearFilters","configChange","Output","DataGridComponent","DeviceGridModule","NgModule","imports","CommonModule","FormsModule","DeviceStatusModule","DataGridModule","AssetSelectorModule","declarations","exports","entryComponents","providers","CustomDeviceGridColumn","exists","default","equals","TypeDeviceGridColumn","types"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n// TODO: MTM-31785: find replacement for schema-form ng1 library\n@Directive({\n  selector: 'c8y-schema-form'\n})\nexport class SchemaFormComponent extends UpgradeComponent {\n  @Input() schema: any;\n  @Input() model: any;\n  @Input('form') inputForm?: any;\n  @Input('options') inputOptions?: any;\n\n  constructor(elementRef: ElementRef, injector: Injector) {\n    super('c8ySchemaForm', elementRef, injector);\n  }\n}\n","import { Component, forwardRef, OnInit, ViewChild } from '@angular/core';\nimport { get, cloneDeep } from 'lodash-es';\nimport { FilteringFormRendererContext } from '@c8y/ngx-components';\nimport { SchemaFormComponent } from '../schema-form.component';\nimport { DeviceGridColumn } from '../device-grid.models';\n\n@Component({\n  templateUrl: './base.filtering-form-renderer.component.html'\n})\nexport class BaseFilteringFormRendererComponent implements OnInit {\n  @ViewChild(forwardRef(() => SchemaFormComponent), { static: false }) schemaFormComponent: any;\n\n  schema;\n  form;\n  model;\n  options;\n\n  constructor(public context: FilteringFormRendererContext) {}\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n    this.schema = cloneDeep(column.filteringConfig.schema);\n    this.form = cloneDeep(column.filteringConfig.form);\n    this.model = cloneDeep(column.externalFilterQuery || {});\n    this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };\n  }\n\n  canApply() {\n    return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.model\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n}\n","import { Type } from '@angular/core';\nimport { ColumnDataType, SortOrder, FilterPredicateFunction, ColumnConfig } from '@c8y/ngx-components';\nimport {\n  DeviceGridColumn,\n  DeviceGridColumnFilteringConfig,\n  DeviceGridColumnSortingConfig\n} from '../device-grid.models';\nimport { BaseFilteringFormRendererComponent } from './base.filtering-form-renderer.component';\n\nexport class BaseDeviceGridColumn implements DeviceGridColumn {\n  name: string;\n  path?: string;\n  header?: string;\n  dataType?: ColumnDataType;\n\n  visible?: boolean;\n  positionFixed?: boolean;\n  gridTrackSize?: string;\n\n  headerCSSClassName?: string | string[];\n  headerCellRendererComponent?: Type<any>;\n\n  cellCSSClassName?: string | string[];\n  cellRendererComponent?: Type<any>;\n\n  sortable?: boolean;\n  sortingConfig?: DeviceGridColumnSortingConfig;\n  sortOrder?: SortOrder;\n\n  filterable?: boolean;\n  filteringConfig?: DeviceGridColumnFilteringConfig;\n  filteringFormRendererComponent?: Type<any>;\n  filterPredicate?: string | FilterPredicateFunction;\n  externalFilterQuery?: string | object;\n\n  constructor(config: ColumnConfig = {}) {\n    this.filteringFormRendererComponent = BaseFilteringFormRendererComponent;\n    Object.assign(this, config);\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  templateUrl: './alarms.cell-renderer.component.html'\n})\nexport class AlarmsCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { map } from 'lodash-es';\n\nexport class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'alarms';\n    this.header = gettext('Alarms');\n    this.cellRendererComponent = AlarmsCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          critical: {\n            type: 'boolean'\n          },\n          major: {\n            type: 'boolean'\n          },\n          minor: {\n            type: 'boolean'\n          },\n          warning: {\n            type: 'boolean'\n          },\n          none: {\n            type: 'boolean'\n          }\n        }\n      },\n      form: [\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext('Show devices with active')}</span>:</label>`\n        },\n        {\n          key: 'critical',\n          title: gettext('Critical alarms')\n        },\n        {\n          key: 'major',\n          title: gettext('Major alarms')\n        },\n        {\n          key: 'minor',\n          title: gettext('Minor alarms')\n        },\n        {\n          key: 'warning',\n          title: gettext('Warnings')\n        },\n        {\n          key: 'none',\n          title: gettext('No alarms')\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n        if (model.critical) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });\n        }\n        if (model.major) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });\n        }\n        if (model.minor) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });\n        }\n        if (model.warning) {\n          ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });\n        }\n        if (model.none) {\n          ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });\n          ors.push({\n            __and: map(['critical', 'major', 'minor', 'warning'], sev => {\n              const zero = {};\n              const has = { __not: { __has: undefined } };\n              const key = `c8y_ActiveAlarmsStatus.${sev}`;\n              zero[key] = 0;\n              has.__not.__has = key;\n              return { __or: [zero, has] };\n            })\n          });\n        }\n        if (ors.length) {\n          filter.__or = ors;\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [\n        { path: 'c8y_ActiveAlarmsStatus.critical' },\n        { path: 'c8y_ActiveAlarmsStatus.major' },\n        { path: 'c8y_ActiveAlarmsStatus.minor' },\n        { path: 'c8y_ActiveAlarmsStatus.warning' }\n      ]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  templateUrl: './group.cell-renderer.component.html'\n})\nexport class GroupCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { cloneDeep } from 'lodash-es';\nimport { FilteringFormRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridColumn } from '../device-grid.models';\n\n@Component({\n  templateUrl: './group.filtering-form-renderer.component.html'\n})\nexport class GroupFilteringFormRendererComponent implements OnInit {\n  model: any;\n  preselected: string[] = [];\n\n  constructor(public context: FilteringFormRendererContext) {}\n\n  ngOnInit() {\n    const column: DeviceGridColumn = this.context.property;\n    this.model = cloneDeep(column.externalFilterQuery || {});\n    this.preselected = this.model.selectedNodes || [];\n  }\n\n  applyFilter() {\n    this.context.applyFilter({\n      externalFilterQuery: this.model\n    });\n  }\n\n  resetFilter() {\n    this.context.resetFilter();\n  }\n\n  selectionChanged(nodes) {\n    this.model.selectedNodes = nodes;\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { GroupCellRendererComponent } from './group.cell-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './group.filtering-form-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { IManagedObject } from '@c8y/client';\n\nexport class GroupDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'group';\n    this.header = gettext('Group');\n    this.cellRendererComponent = GroupCellRendererComponent;\n    this.filteringFormRendererComponent = GroupFilteringFormRendererComponent;\n    this.filterable = true;\n    this.filteringConfig = {\n      getFilter(model) {\n        const filter: any = {};\n        if (model.selectedNodes) {\n          filter.__or = model.selectedNodes.map((mo: IManagedObject) => {\n            if (mo.c8y_DeviceQueryString) {\n              return { __useFilterQueryString: mo.c8y_DeviceQueryString };\n            }\n            return { __bygroupid: mo.id };\n          });\n        }\n        return filter;\n      }\n    };\n    this.sortable = false;\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class ImeiDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.path = 'c8y_Mobile.imei';\n    this.name = 'imei';\n    this.header = gettext('IMEI');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          imeis: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'imeis',\n          title: gettext('Show devices with IMEI'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'imeis[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. 46543432321, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.imeis.length) {\n          filter[self.path] = { __in: model.imeis };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    {{ deviceGridService.getModel(context.item) }}\n  `\n})\nexport class ModelCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { ModelCellRendererComponent } from './model.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class ModelDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const hardwareModelPath = 'c8y_Hardware.model';\n    const vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';\n\n    this.name = 'model';\n    this.header = gettext('Model');\n    this.cellRendererComponent = ModelCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          models: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'models',\n          title: gettext('Show devices with model'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'models[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. ModelName, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.models.length) {\n          filter.__or = {\n            [hardwareModelPath]: { __in: model.models },\n            [vendingModelPath]: { __in: model.models }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]\n    };\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    <a\n      [href]=\"deviceGridService.getHref(context.item)\"\n      title=\"{{ deviceGridService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ deviceGridService.getProperName(context.item) }}\n    </a>\n  `\n})\nexport class NameCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { NameCellRendererComponent } from './name.cell-renderer.component';\nimport { ColumnDataRecordClassName, gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class NameDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n    this.name = 'name';\n    this.path = 'name';\n    this.header = gettext('Name');\n    this.cellCSSClassName = ColumnDataRecordClassName.Header;\n    this.cellRendererComponent = NameCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          names: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'names',\n          title: gettext('Show devices with name'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'names[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. My Device, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.names.length) {\n          filter.name = { __in: model.names };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    {{ context.value | c8yDate }}\n  `\n})\nexport class RegistrationDateCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { RegistrationDateCellRendererComponent } from './registration-date.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class RegistrationDateDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.path = 'creationTime';\n    this.name = 'registrationDate';\n    this.header = gettext('Registration date');\n    this.cellRendererComponent = RegistrationDateCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          registrationDate: {\n            type: 'object',\n            properties: {\n              after: {\n                type: 'string',\n                format: 'datetime'\n              },\n              before: {\n                type: 'string',\n                format: 'datetime'\n              }\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'registrationDate.after',\n          title: gettext('Show devices registered after'),\n          maxDateKey: 'registrationDate.before'\n        },\n        {\n          key: 'registrationDate.before',\n          title: gettext('And before`date`'),\n          minDateKey: 'registrationDate.after'\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const dates = model && model.registrationDate;\n        if (dates && (dates.after || dates.before)) {\n          filter.__and = [];\n          if (dates.after) {\n            const after = self.formatDate(dates.after);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __gt: after },\n                [`${self.path}.date`]: { __gt: after }\n              }\n            });\n          }\n          if (dates.before) {\n            const before = self.formatDate(dates.before);\n            filter.__and.push({\n              __or: {\n                [self.path]: { __lt: before },\n                [`${self.path}.date`]: { __lt: before }\n              }\n            });\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: `${this.path}.date` }, { path: this.path }]\n    };\n  }\n\n  protected formatDate(dateToFormat: string): string {\n    return new Date(dateToFormat).toISOString();\n  }\n}\n","import { Component, forwardRef, Inject } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\nimport { DeviceGridService } from '../device-grid.service';\n\n@Component({\n  template: `\n    {{ deviceGridService.getSerialNumber(context.item) }}\n  `\n})\nexport class SerialNumberCellRendererComponent {\n  constructor(\n    public context: CellRendererContext,\n    @Inject(forwardRef(() => DeviceGridService)) public deviceGridService: DeviceGridService\n  ) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class SerialNumberDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';\n    const vendingSerialNumberPath =\n      'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';\n\n    this.name = 'serialNumber';\n    this.header = gettext('Serial number');\n    this.cellRendererComponent = SerialNumberCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          serialNumbers: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'serialNumbers',\n          title: gettext('Show devices with serial number'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'serialNumbers[]',\n              notitle: true,\n              placeholder: gettext(\n                'e.g. 54321-123, you can use an asterisk (*) as wildcard character'\n              )\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.serialNumbers.length) {\n          filter.__or = {\n            [hardwareSerialNumberPath]: { __in: model.serialNumbers },\n            [vendingSerialNumberPath]: { __in: model.serialNumbers }\n          };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { CellRendererContext } from '@c8y/ngx-components';\n\n@Component({\n  template: `\n    <device-status [mo]=\"context.item\"></device-status>\n  `\n})\nexport class StatusCellRendererComponent {\n  constructor(public context: CellRendererContext) {}\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { StatusCellRendererComponent } from './status.cell-renderer.component';\nimport { ColumnDataType, PushStatus, SendStatus, gettext } from '@c8y/ngx-components';\n\nexport class StatusDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor() {\n    super();\n\n    const responseIntervalPath = 'c8y_RequiredAvailability.responseInterval';\n    const responseIntervalLessThanOrEqualTo0 = { [responseIntervalPath]: { __le: 0 } };\n    const responseIntervalNotDefined = { __not: { __has: responseIntervalPath } };\n\n    const availabilityStatusPath = 'c8y_Availability.status';\n    const availabilityStatusAvailable = { [availabilityStatusPath]: SendStatus.AVAILABLE };\n    const availabilityStatusUnavailable = { [availabilityStatusPath]: SendStatus.UNAVAILABLE };\n    const availabilityStatusMaintenance = { [availabilityStatusPath]: SendStatus.MAINTENANCE };\n    const availabilityStatusNotDefined = { __not: { __has: availabilityStatusPath } };\n\n    const connectionStatusPath = 'c8y_Connection.status';\n    const connectionStatusConnected = { [connectionStatusPath]: PushStatus.CONNECTED };\n    const connectionStatusDisconnected = { [connectionStatusPath]: PushStatus.DISCONNECTED };\n    const connectionStatusMaintenance = { [connectionStatusPath]: PushStatus.MAINTENANCE };\n\n    const deviceUnderMaintenance = {\n      __or: [\n        responseIntervalLessThanOrEqualTo0,\n        availabilityStatusMaintenance,\n        connectionStatusMaintenance\n      ]\n    };\n    const deviceNotUnderMaintenance = {\n      // using __and of __nots because backend does not support __not with __ors\n      __and: [\n        { __not: responseIntervalLessThanOrEqualTo0 },\n        { __not: availabilityStatusMaintenance },\n        { __not: connectionStatusMaintenance }\n      ]\n    };\n\n    this.name = 'status';\n    this.header = gettext('Status');\n    this.dataType = ColumnDataType.Icon;\n    this.cellRendererComponent = StatusCellRendererComponent;\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          sendOnline: {\n            type: 'boolean'\n          },\n          sendOffline: {\n            type: 'boolean'\n          },\n          sendUnknown: {\n            type: 'boolean'\n          },\n          sendNotMonitored: {\n            type: 'boolean'\n          },\n          pushOnline: {\n            type: 'boolean'\n          },\n          pushOffline: {\n            type: 'boolean'\n          },\n          pushNotMonitored: {\n            type: 'boolean'\n          },\n          maintenance: {\n            type: 'boolean'\n          }\n        }\n      },\n      form: [\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with send status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'sendOnline',\n          title: gettext('Online')\n        },\n        {\n          key: 'sendOffline',\n          title: gettext('Offline')\n        },\n        {\n          key: 'sendUnknown',\n          title: gettext('Unknown')\n        },\n        {\n          key: 'sendNotMonitored',\n          title: gettext('Not monitored')\n        },\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with push status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'pushOnline',\n          title: gettext('Online')\n        },\n        {\n          key: 'pushOffline',\n          title: gettext('Offline')\n        },\n        {\n          key: 'pushNotMonitored',\n          title: gettext('Not monitored')\n        },\n        {\n          type: 'template',\n          template: `<label><span translate>${gettext(\n            'Show devices with maintenance status'\n          )}</span>:</label>`\n        },\n        {\n          key: 'maintenance',\n          title: gettext('Device is under maintenance')\n        }\n      ],\n      getFilter(model) {\n        const filter: any = {};\n        const ors = [];\n\n        if (model) {\n          if (model.sendOnline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusAvailable]\n            });\n          }\n          if (model.sendOffline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusUnavailable]\n            });\n          }\n          if (model.sendUnknown) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, availabilityStatusNotDefined]\n            });\n          }\n          if (model.sendNotMonitored || model.pushNotMonitored) {\n            ors.push(responseIntervalNotDefined);\n          }\n          if (model.pushOnline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, connectionStatusConnected]\n            });\n          }\n          if (model.pushOffline) {\n            ors.push({\n              __and: [deviceNotUnderMaintenance, connectionStatusDisconnected]\n            });\n          }\n          if (model.maintenance) {\n            ors.push(deviceUnderMaintenance);\n          }\n\n          if (ors.length) {\n            filter.__or = ors;\n          }\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: availabilityStatusPath }]\n    };\n  }\n}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class SystemIdDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n    this.path = 'id';\n    this.name = 'systemId';\n    this.header = gettext('System ID');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          ids: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'ids',\n          title: gettext('Show devices with system ID'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'ids[]',\n              notitle: true,\n              placeholder: gettext('e.g. 10300, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.ids.length) {\n          filter[self.path] = { __in: model.ids };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';\nimport {\n  ActionControl,\n  BulkActionControl,\n  Pagination,\n  Row,\n  GridConfig,\n  Column\n} from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { assign, forEach, get, identity, map, remove, sortBy, transform } from 'lodash-es';\nimport { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';\nimport { GroupDeviceGridColumn } from './columns/group.device-grid-column';\nimport { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';\nimport { ModelDeviceGridColumn } from './columns/model.device-grid-column';\nimport { NameDeviceGridColumn } from './columns/name.device-grid-column';\nimport { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';\nimport { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';\nimport { StatusDeviceGridColumn } from './columns/status.device-grid-column';\nimport { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';\nimport { DeviceGridActionType, DeviceGridColumn } from './device-grid.models';\n\n@Injectable()\nexport class DeviceGridService {\n  protected queriesUtil: QueriesUtil;\n  protected GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';\n  protected DEFAULT_PAGE_SIZE = 20;\n\n  constructor(\n    protected inventoryService: InventoryService,\n    protected translateService: TranslateService\n  ) {\n    this.queriesUtil = new QueriesUtil();\n  }\n\n  getDefaultColumns(): DeviceGridColumn[] {\n    const defaultColumns = [\n      new StatusDeviceGridColumn(),\n      new NameDeviceGridColumn(),\n      new ModelDeviceGridColumn(),\n      new SerialNumberDeviceGridColumn(),\n      new GroupDeviceGridColumn(),\n      new RegistrationDateDeviceGridColumn(),\n      new SystemIdDeviceGridColumn(),\n      new ImeiDeviceGridColumn(),\n      new AlarmsDeviceGridColumn()\n    ];\n\n    return defaultColumns;\n  }\n\n  getDefaultPagination(): Pagination {\n    return {\n      pageSize: 10,\n      currentPage: 1\n    };\n  }\n\n  getInfiniteScrollPagination(): Pagination {\n    return {\n      pageSize: 50,\n      currentPage: 1\n    };\n  }\n\n  getDefaultActionControls(): ActionControl[] {\n    return [\n      {\n        type: DeviceGridActionType.Delete,\n        callback: (item: Row) => this.delete(item as IManagedObject)\n      }\n    ];\n  }\n\n  getDefaultBulkActionControls(): BulkActionControl[] {\n    return [];\n  }\n\n  getProperName(device: IManagedObject): string {\n    const { id, name } = device;\n    return name ? name : this.translateService.instant('Device {{id}}', { id });\n  }\n\n  getModel(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    return hardware && hardware.model;\n  }\n\n  getSerialNumber(device: IManagedObject): string {\n    const hardware = this.getHardware(device);\n    const serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';\n    return hardware && hardware[serialPropertyName];\n  }\n\n  getParentsNames(device: IManagedObject, featuredParentId?: string | number): string {\n    const assetParentsReferences = device.assetParents.references;\n    const assetParents = map(assetParentsReferences, 'managedObject');\n    const sortedByName = sortBy(assetParents, ['name']);\n    const featuredItems = remove(sortedByName, { id: featuredParentId });\n    const items = featuredItems.concat(sortedByName);\n    const names = map(items, 'name');\n    return names.join(', ');\n  }\n\n  getHref(groupOrDevice: IManagedObject, prefix = '#/'): string {\n    if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {\n      return `${prefix}group/${groupOrDevice.id}`;\n    }\n    return `${prefix}device/${groupOrDevice.id}`;\n  }\n\n  getAlarmsHref(device: IManagedObject): string {\n    return `${this.getHref(device)}/alarms`;\n  }\n\n  getUserConfiguredColumns(columns: Column[]) {\n    const config = this.getConfig();\n    if (config.columns.length > 0) {\n      const reOrderedColumns = [];\n      let noConfigColumns = [];\n      try {\n        noConfigColumns = columns.filter(col => !config.columns.includes(col));\n        config.columns.forEach(({ visible, name, sortOrder }) => {\n          const columnToReorder = columns.find(col => col.name === name);\n          if (columnToReorder) {\n            columnToReorder.visible = visible;\n            columnToReorder.sortOrder = sortOrder;\n            reOrderedColumns.push(columnToReorder);\n          }\n        });\n      } catch (ex) {\n        this.clearConfig();\n      }\n      return [...reOrderedColumns, ...noConfigColumns];\n    }\n    return columns;\n  }\n\n  delete(device: IManagedObject) {\n    console.log('should delete', device);\n  }\n\n  async getData(\n    columns: DeviceGridColumn[],\n    pagination: Pagination,\n    query: any = {},\n    withChildren: boolean = false\n  ) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query),\n      withParents: true,\n      withChildren\n    };\n    return this.inventoryService.list(filters);\n  }\n\n  async getCount(columns: DeviceGridColumn[], pagination: Pagination, query: any = {}) {\n    const filters = {\n      ...this.getDevicesFilters(columns, pagination, query),\n      pageSize: 1,\n      currentPage: 1\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  async getTotal(query: any = {}): Promise<number> {\n    const filters = {\n      q: this.queriesUtil.buildQuery(query),\n      pageSize: 1,\n      withTotalPages: true\n    };\n    return (await this.inventoryService.list(filters)).paging.totalPages;\n  }\n\n  getDeviceQueryString(columns: DeviceGridColumn[], query: any): string {\n    let fullQuery = this.getQueryObj(columns);\n    fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);\n    return this.queriesUtil.buildQuery(fullQuery);\n  }\n\n  getQueryObj(columns: DeviceGridColumn[], defaultFilter = {}): any {\n    return transform(columns, (query, column) => this.extendQueryByColumn(query, column), {\n      __filter: {},\n      __orderby: [],\n      ...defaultFilter\n    });\n  }\n\n  getConfig(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY): GridConfig {\n    const config = JSON.parse(localStorage.getItem(key));\n    if (config === null) {\n      return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };\n    }\n    return config as GridConfig;\n  }\n\n  saveConfig(config: GridConfig, key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {\n    localStorage.setItem(key, JSON.stringify(config));\n  }\n\n  clearConfig(key: string = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {\n    localStorage.removeItem(key);\n  }\n\n  private getHardware(device: IManagedObject): any {\n    const hardwarePropertyName = this.isVendme(device)\n      ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'\n      : 'c8y_Hardware';\n    return device && device[hardwarePropertyName];\n  }\n\n  private isVendme(device: IManagedObject) {\n    return device.type === 'com_nsn_startups_vendme_VendingMachine';\n  }\n\n  private getDevicesFilters(columns: DeviceGridColumn[], pagination: Pagination, query: any) {\n    return {\n      q: this.getDeviceQueryString(columns, query),\n      pageSize: pagination.pageSize,\n      currentPage: pagination.currentPage,\n      withChildren: false,\n      withTotalPages: true\n    };\n  }\n\n  private extendQueryByColumn(query: any, column: DeviceGridColumn): void {\n    if (column.filterable && column.externalFilterQuery) {\n      const getFilter = column.filteringConfig.getFilter || identity;\n      const queryObj = getFilter(column.externalFilterQuery);\n\n      if (queryObj.__or) {\n        query.__filter.__and = query.__filter.__and || [];\n        query.__filter.__and.push(queryObj);\n      } else if (queryObj.__and && get(query, '__filter.__and')) {\n        queryObj.__and.map(obj => query.__filter.__and.push(obj));\n      } else {\n        assign(query.__filter, queryObj);\n      }\n    }\n\n    if (column.sortable && column.sortOrder) {\n      const cs = {};\n      forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {\n        cs[pathSortingConfig.path] =\n          (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);\n      });\n      query.__orderby.push(cs);\n    }\n    return query;\n  }\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport {\n  ActionControl,\n  BulkActionControl,\n  DataGridComponent,\n  DataSourceModifier,\n  FilteringActionType,\n  FilteringModifier,\n  gettext,\n  LoadMoreMode,\n  Pagination,\n  ServerSideDataResult,\n  GridConfig\n} from '@c8y/ngx-components';\nimport { DeviceGridColumn, DataCallback } from './device-grid.models';\nimport { DeviceGridService } from './device-grid.service';\n\n@Component({\n  selector: 'c8y-device-grid',\n  templateUrl: './device-grid.component.html'\n})\nexport class DeviceGridComponent {\n  @Input() dataCallback: DataCallback;\n  @Input() refresh: EventEmitter<any>;\n  @Input() title: string = gettext('Devices');\n  @Input() itemsSelectLimit: number;\n  @Input() loadMoreItemsLabel = gettext('Load more devices');\n  @Input() loadingItemsLabel: string = gettext('Loading devices…');\n  @Input('columns') set _columns(value: DeviceGridColumn[]) {\n    if (value) {\n      this.columns = this.deviceGridService.getUserConfiguredColumns(value);\n    } else {\n      this.columns = this.deviceGridService.getUserConfiguredColumns(\n        this.deviceGridService.getDefaultColumns()\n      );\n    }\n  }\n  @Input('pagination') set _pagination(value: Pagination) {\n    if (value) {\n      this.pagination = value;\n    } else {\n      this.pagination = this.deviceGridService.getDefaultPagination();\n    }\n  }\n  infiniteScroll: LoadMoreMode;\n  @Input('infiniteScroll') set _infiniteScroll(infiniteScroll: LoadMoreMode) {\n    this.infiniteScroll = infiniteScroll;\n    this.pagination = this.deviceGridService.getInfiniteScrollPagination();\n  }\n  @Input('actionControls') set _actionControls(value: ActionControl[]) {\n    if (value) {\n      this.actionControls = value;\n    } else {\n      this.actionControls = this.deviceGridService.getDefaultActionControls();\n    }\n  }\n  @Input() selectable: boolean = false;\n  @Input() baseQuery: any = {};\n  @Input('bulkActionControls') set _bulkActionControls(value: BulkActionControl[]) {\n    if (value) {\n      this.bulkActionControls = value;\n    } else {\n      this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();\n    }\n  }\n  @Input() showChildDevices: any = {};\n  @Output() onColumnsChange: EventEmitter<DeviceGridColumn[]> = new EventEmitter<\n    DeviceGridColumn[]\n  >();\n  @Output() onDeviceQueryStringChange: EventEmitter<string> = new EventEmitter<string>();\n  @Output() itemsSelect = new EventEmitter<string[]>();\n  @Output() onChildDevices = new EventEmitter<boolean>();\n\n  columns: DeviceGridColumn[] = this.deviceGridService.getDefaultColumns();\n  pagination: Pagination = this.deviceGridService.getDefaultPagination();\n  actionControls: ActionControl[] = this.deviceGridService.getDefaultActionControls();\n  bulkActionControls: BulkActionControl[] = this.deviceGridService.getDefaultBulkActionControls();\n  serverSideDataCallback: any;\n  withChildren: boolean = false;\n\n  @ViewChild(DataGridComponent, { static: true })\n  dataGrid: DataGridComponent;\n\n  constructor(public deviceGridService: DeviceGridService) {\n    this.serverSideDataCallback = this.onDataSourceModifier.bind(this);\n  }\n\n  trackByName(_index, column: DeviceGridColumn): string {\n    return column.name;\n  }\n\n  async onDataSourceModifier(\n    dataSourceModifier: DataSourceModifier\n  ): Promise<ServerSideDataResult> {\n    let serverSideDataResult: ServerSideDataResult;\n    const { res, data, paging } = await this.deviceGridService.getData(\n      dataSourceModifier.columns,\n      dataSourceModifier.pagination,\n      this.baseQuery,\n      this.withChildren\n    );\n\n    const filteredSize: number = await this.deviceGridService.getCount(\n      dataSourceModifier.columns,\n      dataSourceModifier.pagination,\n      this.baseQuery\n    );\n    const size: number = await this.deviceGridService.getTotal(this.baseQuery);\n\n    this.onColumnsChange.emit(dataSourceModifier.columns);\n    this.onDeviceQueryStringChange.emit(\n      this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns, this.baseQuery)\n    );\n\n    serverSideDataResult = {\n      res,\n      data,\n      paging,\n      filteredSize,\n      size\n    };\n\n    if (this.dataCallback) {\n      serverSideDataResult = this.dataCallback(serverSideDataResult);\n    }\n\n    return serverSideDataResult;\n  }\n\n  updateFiltering(\n    columnNames: string[],\n    action: {\n      type: FilteringActionType;\n      payload?: { filteringModifier: FilteringModifier };\n    }\n  ) {\n    const { type } = action;\n    if (type === FilteringActionType.ResetFilter) {\n      this.dataGrid.clearFilters();\n    } else {\n      this.dataGrid.updateFiltering(columnNames, action);\n    }\n  }\n\n  configChange(config: GridConfig) {\n    this.deviceGridService.saveConfig(config);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DataGridModule, DeviceStatusModule, FormsModule } from '@c8y/ngx-components';\nimport { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';\nimport { DeviceGridComponent } from './device-grid.component';\nimport { DeviceGridService } from './device-grid.service';\n\nimport { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';\nimport { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';\n\nimport { StatusCellRendererComponent } from './columns/status.cell-renderer.component';\nimport { NameCellRendererComponent } from './columns/name.cell-renderer.component';\nimport { ModelCellRendererComponent } from './columns/model.cell-renderer.component';\nimport { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';\nimport { GroupCellRendererComponent } from './columns/group.cell-renderer.component';\nimport { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';\nimport { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';\nimport { SchemaFormComponent } from './schema-form.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule, AssetSelectorModule],\n  declarations: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent,\n    SchemaFormComponent\n  ],\n  exports: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent,\n    SchemaFormComponent\n  ],\n  entryComponents: [\n    DeviceGridComponent,\n    BaseFilteringFormRendererComponent,\n    GroupFilteringFormRendererComponent,\n    StatusCellRendererComponent,\n    NameCellRendererComponent,\n    ModelCellRendererComponent,\n    SerialNumberCellRendererComponent,\n    GroupCellRendererComponent,\n    RegistrationDateCellRendererComponent,\n    AlarmsCellRendererComponent\n  ],\n  providers: [DeviceGridService]\n})\nexport class DeviceGridModule {}\n","import { BaseDeviceGridColumn } from './base.device-grid-column';\nimport { gettext, ColumnConfig } from '@c8y/ngx-components';\n\nexport class CustomDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    const self = this;\n\n    this.name = 'custom';\n    this.header = gettext('Custom');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          exists: {\n            type: 'boolean',\n            default: false,\n            title: gettext('Only rows where value is defined')\n          },\n          equals: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'exists'\n        },\n        {\n          key: 'equals',\n          title: gettext('Only rows where value equals to:'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'equals[]',\n              notitle: true,\n              placeholder: gettext('e.g. value, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.exists) {\n          filter.__has = self.path;\n        }\n        if (model.equals) {\n          filter[self.path] = { __in: model.equals };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n  }\n\n  get sortingConfig() {\n    return {\n      pathSortingConfigs: [{ path: this.path }]\n    };\n  }\n}\n","import { gettext, ColumnConfig } from '@c8y/ngx-components';\nimport { BaseDeviceGridColumn } from './base.device-grid-column';\n\nexport class TypeDeviceGridColumn extends BaseDeviceGridColumn {\n  constructor(initialColumnConfig?: ColumnConfig) {\n    super(initialColumnConfig);\n\n    this.name = 'type';\n    this.path = 'type';\n    this.header = gettext('Type');\n\n    this.filterable = true;\n    this.filteringConfig = {\n      schema: {\n        type: 'object',\n        properties: {\n          types: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        }\n      },\n      form: [\n        {\n          key: 'types',\n          title: gettext('Show devices with type'),\n          add: gettext('Or'),\n          items: [\n            {\n              key: 'types[]',\n              notitle: true,\n              placeholder: gettext('e.g. MyType, you can use an asterisk (*) as wildcard character')\n            }\n          ]\n        }\n      ],\n      getFilter(model: any): any {\n        const filter: any = {};\n        if (model.types.length) {\n          filter.type = { __in: model.types };\n        }\n        return filter;\n      }\n    };\n\n    this.sortable = true;\n    this.sortingConfig = { pathSortingConfigs: [{ path: 'type' }] };\n  }\n}\n"]}