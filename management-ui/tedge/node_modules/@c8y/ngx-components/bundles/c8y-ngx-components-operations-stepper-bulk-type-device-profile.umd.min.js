!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@angular/forms"),require("@c8y/ngx-components"),require("@c8y/ngx-components/device-profile"),require("@c8y/ngx-components/operations/bulk-operation-stepper"),require("@c8y/ngx-components/operations/bulk-operations-service"),require("lodash-es"),require("@ngx-translate/core"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@c8y/ngx-components/operations/stepper-bulk-type-device-profile",["exports","@angular/core","@angular/forms","@c8y/ngx-components","@c8y/ngx-components/device-profile","@c8y/ngx-components/operations/bulk-operation-stepper","@c8y/ngx-components/operations/bulk-operations-service","lodash-es","@ngx-translate/core","rxjs","rxjs/operators"],n):n(((e=e||self).c8y=e.c8y||{},e.c8y["ngx-components"]=e.c8y["ngx-components"]||{},e.c8y["ngx-components"].operations=e.c8y["ngx-components"].operations||{},e.c8y["ngx-components"].operations["stepper-bulk-type-device-profile"]={}),e.ng.core,e.ng.forms,e.c8y["ngx-components"],e.c8y["ngx-components"]["device-profile"],e.c8y["ngx-components"].operations["bulk-operation-stepper"],e.c8y["ngx-components"].operations["bulk-operations-service"],e.lodashEs,e.core$1,e.rxjs,e.rxjs.operators)}(this,(function(e,n,t,i,o,c,l,r,s,a,p){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var d=function(e,n){return(d=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function f(e,n,t,i){var o,c=arguments.length,l=c<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(l=(c<3?o(l):c>3?o(n,t,l):o(n,t))||l);return c>3&&l&&Object.defineProperty(n,t,l),l}function y(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var i,o,c=t.call(e),l=[];try{for(;(void 0===n||n-- >0)&&!(i=c.next()).done;)l.push(i.value)}catch(e){o={error:e}}finally{try{i&&!i.done&&(t=c.return)&&t.call(c)}finally{if(o)throw o.error}}return l}var v=function(){function e(e){this.translate=e,this.DEVICE_TYPE_NOT_DEFINED=i.gettext("Device type not defined")}return Object.defineProperty(e.prototype,"softwares",{get:function(){return r.get(this.selectedDeviceProfile,["c8y_DeviceProfile","software"],[])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"configurations",{get:function(){return r.get(this.selectedDeviceProfile,["c8y_DeviceProfile","configuration"],[])},enumerable:!0,configurable:!0}),e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED))},e.ctorParameters=function(){return[{type:s.TranslateService}]},f([n.Input()],e.prototype,"selectedDeviceProfile",void 0),e=f([n.Component({selector:"c8y-confirm-device-profile-selection-step",template:'<div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n      <h4 class="text-center text-gray">{{ \'Confirm selection\' | translate }}</h4>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-h">\n    <div class="card-block">\n      <div class="row p-b-16">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(selectedDeviceProfile) }}">\n            <span class="legend form-block" translate>Device type</span>\n            <ng-container *ngIf="selectedDeviceProfile?.c8y_Filter?.type; else noType">\n              <span>{{ selectedDeviceProfile.c8y_Filter.type }}</span>\n            </ng-container>\n            <ng-template #noType>\n              ---\n            </ng-template>\n          </div>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="selectedDeviceProfile?.c8y_DeviceProfile.firmware">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Firmware</span>\n          <c8y-list-group>\n            <c8y-li>\n              <c8y-li-icon>\n                <i c8yIcon="c8y-firmware"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.name }}\n                </div>\n                <div class="col-5">\n                  <span class="text-label-small m-r-8" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ selectedDeviceProfile.c8y_DeviceProfile.firmware.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="softwares.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Software</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let software of softwares">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ software.name }}\n                </div>\n                <div class="col-5">\n                  <span class="text-label-small m-r-8" translate>\n                    Version\n                  </span>\n                  <span>\n                    {{ software.version }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n      <div class="row p-b-16" *ngIf="configurations.length">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <span class="legend form-block" translate>Configuration</span>\n          <c8y-list-group>\n            <c8y-li *ngFor="let configuration of configurations">\n              <c8y-li-icon>\n                <i c8yIcon="c8y-tools"></i>\n              </c8y-li-icon>\n              <c8y-li-body class="content-flex-500">\n                <div class="col-5">\n                  {{ configuration.name }}\n                </div>\n                <div class="col-5">\n                  <span class="label label-info" *ngIf="configuration.type">\n                    {{ configuration.type }}\n                  </span>\n                </div>\n              </c8y-li-body>\n            </c8y-li>\n          </c8y-list-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'})],e)}(),u=function(){function e(e,t){var o=this;this.deviceProfileService=e,this.translate=t,this.deviceProfile=new n.EventEmitter,this.textFilter$=new a.BehaviorSubject(""),this.deviceType$=new a.BehaviorSubject(""),this.DEVICE_TYPE_NOT_DEFINED=i.gettext("Device type not defined"),this.deviceTypes=[],this.selectedDeviceType={name:""},this.deviceProfile$=a.combineLatest(this.textFilter$,this.deviceType$).pipe(p.switchMap((function(e){var n=y(e,2),t=n[0],i=n[1];return o.getDeviceProfiles(t,i)})),p.shareReplay(1)),this.loadDeviceTypes()}return e.prototype.loadDeviceTypes=function(){var e=this;this.deviceTypeSubscription=this.deviceType$.pipe(p.debounceTime(300),p.distinctUntilChanged(),p.switchMap((function(n){var t={"c8y_Filter.type":"*"+n+"*"};return a.from(e.deviceProfileService.getDeviceProfiles(t))}))).subscribe((function(n){var t=n.data;e.deviceTypes=r.uniqWith(t.map((function(e){return{name:e.c8y_Filter.type}})).filter((function(e){return e.name})),r.isEqual)}))},e.prototype.ngOnDestroy=function(){this.deviceTypeSubscription.unsubscribe()},e.prototype.selectDeviceProfile=function(e){this.deviceProfile.emit(e)},e.prototype.getDeviceTypeTitle=function(e){return r.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_DEFINED))},e.prototype.getDeviceProfiles=function(e,n){var t=n?{"c8y_Filter.type":n}:{};return e&&(t.name="*"+e+"*"),this.deviceProfileService.getDeviceProfiles(t)},e.ctorParameters=function(){return[{type:o.DeviceProfileService},{type:s.TranslateService}]},f([n.Output()],e.prototype,"deviceProfile",void 0),e=f([n.Component({selector:"c8y-select-device-profile-step",template:'<div class="card-block p-t-0 overflow-visible flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">\n      <h4 class="text-center m-b-16">{{ \'Select device profile\' | translate }}</h4>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="input-group input-group-search">\n            <input\n              type="search"\n              class="form-control"\n              title="{{ \'Filter device profiles…\' | translate }}"\n              placeholder="{{ \'Filter device profiles…\' | translate }}"\n              [ngModel]="textFilter$ | async"\n              (ngModelChange)="textFilter$.next($event)"\n            />\n            <span class="input-group-addon">\n              <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n              <i\n                c8yIcon="times"\n                class="text-muted"\n                *ngIf="(textFilter$ | async).length"\n                (click)="textFilter$.next(\'\')"\n              ></i>\n            </span>\n          </div>\n        </div>\n        <div class="col-md-6">\n          <c8y-form-group class="m-0">\n            <c8y-typeahead\n              name="deviceType"\n              [(ngModel)]="selectedDeviceType"\n              placeholder="{{ \'Type to filter device types…\' | translate }}"\n              (onSearch)="deviceType$.next($event)"\n              [allowFreeEntries]="false"\n            >\n              <c8y-li\n                class="p-l-8 p-r-8 c8y-list__item--link"\n                (click)="selectedDeviceType = {name: \'\'}; deviceType$.next(\'\')"\n              >\n                <span>{{\'All device types\' | translate }}</span>\n              </c8y-li>\n              <c8y-li\n                *ngFor="let deviceType of deviceTypes"\n                class="p-l-8 p-r-8 c8y-list__item--link"\n                (click)="selectedDeviceType = deviceType; deviceType$.next(deviceType.name)"\n                [active]="selectedDeviceType === deviceType"\n              >\n                <c8y-highlight\n                  [text]="deviceType.name"\n                  [pattern]="deviceType$ | async"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n            ><c8y-message\n              name="notExisting"\n              [text]="\'Select one of the existing device types.\' | translate"\n            ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-h">\n    <div class="card-block p-t-0 p-b-0">\n      <c8y-list-group>\n        <c8y-li *c8yFor="let deviceProfile of deviceProfile$ | async; loadMore: \'auto\'">\n          <c8y-li-radio (onSelect)="selectDeviceProfile(deviceProfile)"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-device-profile"></i>\n          </c8y-li-icon>\n          <c8y-li-body class="content-flex-60">\n            <div class="col-5">\n              <div class="text-truncate" title="{{ deviceProfile.name }}">\n                {{ deviceProfile.name }}\n              </div>\n            </div>\n            <div class="col-3">\n              <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(deviceProfile) }}">\n                <span class="text-label-small m-r-8" translate>\n                  Device type\n                </span>\n                <span *ngIf="deviceProfile.c8y_Filter?.type; else noType">\n                  {{ deviceProfile.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <small><em class="text-muted" translate>Undefined`device type`</em></small>\n                </ng-template>\n              </div>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n'})],e)}(),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return function(e,n){function t(){this.constructor=e}d(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}(t,e),t.prototype.goToConfirmSelection=function(e){this.deviceTypes=r.get(this.selectedDeviceProfile,"c8y_Filter.type"),e.stepper.next()},t.prototype.onDeviceProfileSelected=function(e){this.selectedDeviceProfile=e},t.prototype.retrieveOperationPrototype=function(){return{name:i.gettext("Apply device profile"),description:r.get(this.selectedDeviceProfile,"name"),prototype:{description:"Apply device profile: "+this.selectedDeviceProfile.name,profileId:this.selectedDeviceProfile.id,profileName:this.selectedDeviceProfile.name,c8y_DeviceProfile:this.selectedDeviceProfile.c8y_DeviceProfile}}},t=f([n.Component({selector:"c8y-stepper-bulk-type-device-profile",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select device profile\' | translate; \n      completed: !!selectedDeviceProfile;\n      buttonsDisabled: !selectedDeviceProfile; \n      onNext: goToConfirmSelection.bind(this)"\n  >\n    <c8y-select-device-profile-step\n      (deviceProfile)="onDeviceProfileSelected($event)"\n      class="d-contents"\n    ></c8y-select-device-profile-step>\n  </ng-container>\n  <ng-container *customStep="\'Confirm selected device profile\' | translate">\n    <c8y-confirm-device-profile-selection-step\n      class="d-contents"\n      [selectedDeviceProfile]="selectedDeviceProfile"\n    ></c8y-confirm-device-profile-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],t)}(c.BaseStepperComponent),m={type:l.BulkOperationType.DEVICE_PROFILE,c8yIcon:"c8y-device-profile",name:i.gettext("Apply device profile"),path:l.baseUrl+"device-profile",component:g,fragments:["c8y_DeviceProfile"],selected:!1},h=function(){function e(){}return e=f([n.NgModule({declarations:[g,u,v],imports:[i.CoreModule,i.FormsModule,t.ReactiveFormsModule,c.BulkOperationStepperModule,o.DeviceProfileModule],providers:[{provide:l.HOOK_LIST_BULK_TYPE,useValue:m,multi:!0}],entryComponents:[g],exports:[g]})],e)}();e.ConfirmDeviceProfileSelectionStepComponent=v,e.SelectDeviceProfileStepComponent=u,e.StepperBulkTypeDeviceProfileComponent=g,e.StepperBulkTypeDeviceProfileModule=h,e.ɵ0=m,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-device-profile.umd.min.js.map