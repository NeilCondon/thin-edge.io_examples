!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@c8y/ngx-components"),require("@ngx-translate/core"),require("lodash-es"),require("rxjs"),require("@c8y/ngx-components/operations/bulk-operation-stepper"),require("@c8y/ngx-components/operations/bulk-operations-service"),require("rxjs/operators"),require("@c8y/client"),require("@c8y/ngx-components/repository"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@c8y/ngx-components/operations/stepper-bulk-type-firmware",["exports","@angular/core","@c8y/ngx-components","@ngx-translate/core","lodash-es","rxjs","@c8y/ngx-components/operations/bulk-operation-stepper","@c8y/ngx-components/operations/bulk-operations-service","rxjs/operators","@c8y/client","@c8y/ngx-components/repository","@angular/forms"],n):n(((e=e||self).c8y=e.c8y||{},e.c8y["ngx-components"]=e.c8y["ngx-components"]||{},e.c8y["ngx-components"].operations=e.c8y["ngx-components"].operations||{},e.c8y["ngx-components"].operations["stepper-bulk-type-firmware"]={}),e.ng.core,e.c8y["ngx-components"],e.core$1,e.lodashEs,e.rxjs,e.c8y["ngx-components"].operations["bulk-operation-stepper"],e.c8y["ngx-components"].operations["bulk-operations-service"],e.rxjs.operators,e.client,e.c8y["ngx-components"].repository,e.ng.forms)}(this,(function(e,n,t,r,s,a,i,o,c,l,p,y){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var u=function(e,n){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function m(e,n,t,r){var s,a=arguments.length,i=a<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,n,t,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(i=(a<3?s(i):a>3?s(n,t,i):s(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i}var d=function(e){function i(n,r){var s=e.call(this)||this;return s.bulkOperationService=n,s.translate=r,s.descriptionTemplate=t.gettext("{{ name }} (version {{ version }})"),s.textFilter$=new a.BehaviorSubject(""),s.stepData={firmware:void 0,versionOrPatch:void 0},s}return function(e,n){function t(){this.constructor=e}u(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}(i,e),i.prototype.goToVersionOrPatchStep=function(e){var n=e.stepper,t=this.stepData.firmware;this.bulkOperationService.setFirmwareId(t.id),this.deviceTypes=(t.c8y_Filter||{}).type,n.next()},i.prototype.onVersionOrPatchSelected=function(e){this.stepData.versionOrPatch=e},i.prototype.onFirmwareSelected=function(e){this.stepData.firmware=e},i.prototype.ngOnDestroy=function(){this.subscription&&this.subscription.unsubscribe()},i.prototype.retrieveOperationPrototype=function(){var e=this.stepData.firmware,n=this.stepData.versionOrPatch;if(e&&n){var r={name:e.name,version:n.c8y_Firmware.version,url:n.c8y_Firmware.url};n.c8y_Patch&&(r.isPatch=!0,r.dependency=n.c8y_Patch.dependency);var a="Update firmware to: "+e.name+" (version: "+n.c8y_Firmware.version+").";return{name:t.gettext("Firmware update"),description:this.translate.instant(this.descriptionTemplate,{name:s.get(this.stepData,"firmware.name"),version:s.get(this.stepData,"versionOrPatch.c8y_Firmware.version")}),prototype:{description:a,c8y_Firmware:r}}}},i.prototype.onSelectionChange=function(n){this.textFilter$.next(""),e.prototype.onSelectionChange.call(this,n)},i.ctorParameters=function(){return[{type:o.BulkOperationsService},{type:r.TranslateService}]},i=m([n.Component({selector:"c8y-stepper-firmware",template:'<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep="\n      \'Select firmware\' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    "\n  >\n    <c8y-select-firmware-step\n      [selected]="stepData?.firmware"\n      (firmware)="onFirmwareSelected($event)"\n      class="d-contents"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep="\n      \'Select version or patch\' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    "\n  >\n    <div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n      <div class="row">\n        <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n          <h4 class="text-center m-b-16 text-gray" translate>\n            Select version or patch\n          </h4>\n          <p class="text-center p-b-8 text-truncate">\n            <strong [title]="stepData?.firmware?.name">{{ stepData?.firmware?.name }}</strong\n            ><br />\n            <small [title]="stepData?.firmware?.description">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class="col-xs-12 flex-grow no-gutter">\n      <div class="card-inner-scroll fit-h">\n        <div class="card-block p-t-0 p-b-0">\n          <c8y-version-or-patch-step\n            [selected]="stepData?.versionOrPatch"\n            (versionOrPatch)="onVersionOrPatchSelected($event)">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n'})],i)}(i.BaseStepperComponent),f=function(){function e(e,t,r){var s=this;this.repositoryService=e,this.inventoryService=t,this.bulkOpsService=r,this.versionOrPatch=new n.EventEmitter,this.elementCount=0,this.DD_LOW_COUNT=10,this.firmware$=this.bulkOpsService.firmwareId.pipe(c.distinctUntilChanged(),c.switchMap((function(e){return s.inventoryService.detail$(e).pipe(c.catchError((function(e){return a.of(e)})))})),c.shareReplay(1)),this.baseVersions$=this.firmware$.pipe(c.distinctUntilKeyChanged("id"),c.switchMap((function(e){return s.repositoryService.listBaseVersions(e)})),c.tap((function(e){s.elementCount=e.data?e.data.length:0})),c.shareReplay(1)),this.isLegacy$=this.firmware$.pipe(c.map((function(e){return s.repositoryService.isLegacyEntry(e)})),c.shareReplay(1)),this.expanded={},this.DD_LOW_COUNT=this.bulkOpsService.DD_LOW_COUNT}return e.prototype.getBinaryName$=function(e){return this.repositoryService.getBinaryName$(e)},e.prototype.getBaseVersionAndPatches$=function(e){var n=this;return this.firmware$.pipe(c.distinctUntilKeyChanged("id"),c.switchMap((function(t){return n.repositoryService.listBaseVersionAndPatches(t,e)})),c.shareReplay(1))},e.prototype.getPatchVersionsCount$=function(e){var n=this;return this.firmware$.pipe(c.distinctUntilKeyChanged("id"),c.switchMap((function(){return n.firmware$})),c.switchMap((function(t){return n.repositoryService.getPatchVersionsCount$(t,e)})),c.shareReplay(1))},e.prototype.selectVersionOrPatch=function(e,n){e&&this.versionOrPatch.emit(n)},e.ctorParameters=function(){return[{type:p.RepositoryService},{type:l.InventoryService},{type:o.BulkOperationsService}]},m([n.Input()],e.prototype,"selected",void 0),m([n.Output()],e.prototype,"versionOrPatch",void 0),m([t.memoize()],e.prototype,"getBinaryName$",null),m([t.memoize(s.property("id"))],e.prototype,"getBaseVersionAndPatches$",null),m([t.memoize(s.property("id"))],e.prototype,"getPatchVersionsCount$",null),e=m([n.Component({selector:"c8y-version-or-patch-step",template:'<c8y-list-group\n  class="m-b-16"\n  [ngClass]="{ \'dd-low\': elementCount <= DD_LOW_COUNT }"\n  *ngIf="(baseVersions$ | async)?.data.length > 0"\n>\n  <c8y-li *c8yFor="let baseVersion of baseVersions$ | async; let i = index; loadMore: \'auto\'">\n    <c8y-li-icon>\n      <i c8yIcon="c8y-firmware"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class="content-flex-50">\n      <div class="col-10">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class="col-2">\n        <span *ngIf="isLegacy$ | async" class="label label-warning">\n          {{ \'Legacy\' | translate }}\n        </span>\n\n        <span *ngIf="!(isLegacy$ | async)">\n          <span *ngIf="(getPatchVersionsCount$(baseVersion) | async) === null">\n            <span class="label label-info">\n              <i c8yIcon="circle-o-notch" class="icon-spin"></i>\n            </span>\n          </span>\n\n          <span *ngIf="(getPatchVersionsCount$(baseVersion) | async) !== null">\n            <span [ngPlural]="getPatchVersionsCount$(baseVersion) | async">\n              <ng-template ngPluralCase="=0">\n                <span class="label label-default"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase="=1">\n                <span class="label label-info">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase="other">\n                <span class="label label-info">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]="{ count: getPatchVersionsCount$(baseVersion) | async }"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor="\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: \'auto\'\n          "\n        >\n          <c8y-li-radio\n            (onSelect)="selectVersionOrPatch($event, patchVersion)"\n            [selected]="patchVersion === selected"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-firmware"></i>\n          </c8y-li-icon>\n          <c8y-li-body class="content-flex-50">\n            <div class="col-3">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class="col-3">\n              <span *ngIf="patchVersion.c8y_Patch; else version" translate class="label label-info"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class="label label-primary">version</span></ng-template\n              >\n            </div>\n            <div class="col-6 text-truncate">\n              <span class="text-label-small m-r-4" translate>\n                File\n              </span>\n              <span title="{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n'})],e)}(),h=function(){function e(e,r,s){var i=this;this.repositoryService=e,this.bulkOpsService=r,this.translate=s,this.firmware=new n.EventEmitter,this.elementCount=0,this.DD_LOW_COUNT=10,this.textFilter$=new a.BehaviorSubject(""),this.firmwares$=this.textFilter$.pipe(c.debounceTime(400),c.distinctUntilChanged()).pipe(c.switchMap((function(e){return i.getFirmwares(e)})),c.tap((function(e){i.elementCount=e.data?e.data.length:0})),c.shareReplay(1)),this.isLegacy=this.repositoryService.isLegacyEntry.bind(this.repositoryService),this.DEVICE_TYPE_NOT_AVAILABLE=t.gettext("No device type available"),this.DESCRIPTION_NOT_AVAILABLE=t.gettext("No description available")}return e.prototype.ngOnInit=function(){this.DD_LOW_COUNT=this.bulkOpsService.DD_LOW_COUNT},e.prototype.selectFirmware=function(e,n){e&&this.firmware.emit(n)},e.prototype.getBaseVersionsCount$=function(e){var n=this;return this.firmwares$.pipe(c.switchMap((function(){return n.repositoryService.getBaseVersionsCount$(e)})),c.shareReplay(1))},e.prototype.getDescriptionTitle=function(e){return s.get(e,"description",this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE))},e.prototype.getDeviceTypeTitle=function(e){return s.get(e,"c8y_Filter.type",this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE))},e.prototype.getFirmwares=function(e){return this.repositoryService.listRepositoryEntries(p.RepositoryType.FIRMWARE,{partialName:e})},e.ctorParameters=function(){return[{type:p.RepositoryService},{type:o.BulkOperationsService},{type:r.TranslateService}]},m([n.Input()],e.prototype,"selected",void 0),m([n.Output()],e.prototype,"firmware",void 0),m([t.memoize(s.property("id"))],e.prototype,"getBaseVersionsCount$",null),e=m([n.Component({selector:"c8y-select-firmware-step",template:'<div class="card-block p-t-0 flex-no-shrink separator-bottom col-xs-12">\n  <div class="row p-b-16">\n    <div class="col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">\n      <h4 class="text-center m-b-16">{{ \'Select firmware\' | translate }}</h4>\n      <div class="input-group input-group-search">\n        <input\n          type="search"\n          class="form-control"\n          title="{{ \'Filter firmware…\' | translate }}"\n          placeholder="{{ \'Filter firmware…\' | translate }}"\n          [ngModel]="textFilter$ | async"\n          (ngModelChange)="textFilter$.next($event)"\n        />\n        <span class="input-group-addon">\n          <i c8yIcon="filter" *ngIf="(textFilter$ | async).length === 0"></i>\n          <i\n            c8yIcon="times"\n            class="text-muted"\n            *ngIf="(textFilter$ | async).length > 0"\n            (click)="textFilter$.next(\'\')"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf="(textFilter$ | async).length > 0 && elementCount===0">\n</c8y-search-result-empty>\n<div class="col-xs-12 flex-grow no-gutter">\n  <div class="card-inner-scroll fit-h">\n    <div class="card-block p-t-0 p-b-0">\n      <c8y-list-group [ngClass]="{ \'dd-low\': elementCount <= DD_LOW_COUNT }">\n        <c8y-li *c8yFor="let firmware of firmwares$ | async; let i = index; loadMore: \'auto\'">\n          <c8y-li-radio (onSelect)="selectFirmware($event, firmware)" [selected]="firmware === selected"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon="c8y-firmware"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class="content-flex-60">\n            <div class="col-3">\n              <div class="text-truncate" title="{{ firmware.name }}">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class="col-4">\n              <div class="text-truncate" title="{{ getDescriptionTitle(firmware) }}">\n                <small *ngIf="firmware.description; else noDesc">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class="text-muted" translate>No description available</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class="col-3">\n              <div class="text-truncate" title="{{ \'Device type\' | translate }}: {{ getDeviceTypeTitle(firmware) }}">\n                <span class="text-label-small m-r-8" translate>\n                  Device type\n                </span>\n                <span *ngIf="firmware.c8y_Filter?.type; else noType">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class="text-muted" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class="col-2">\n              <span *ngIf="isLegacy(firmware)" class="label label-warning">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf="!isLegacy(firmware)">\n                <span *ngIf="(getBaseVersionsCount$(firmware) | async) === null">\n                  <span class="label label-info">\n                    <i c8yIcon="circle-o-notch" class="icon-spin"></i>\n                  </span>\n                </span>\n                <span *ngIf="(getBaseVersionsCount$(firmware) | async) !== null">\n                  <span [ngPlural]="getBaseVersionsCount$(firmware) | async">\n                    <ng-template ngPluralCase="=0">\n                      <span class="label label-default">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase="=1">\n                      <span class="label label-info"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase="other">\n                      <span class="label label-info">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]="{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n'})],e)}(),g={type:o.BulkOperationType.FIRMWARE,c8yIcon:"c8y-firmware",name:t.gettext("Firmware update"),path:o.baseUrl+"firmware",component:d,fragments:["c8y_Firmware"],selected:!1},v=function(){function e(){}return e=m([n.NgModule({declarations:[d,f,h],imports:[t.CoreModule,t.FormsModule,y.ReactiveFormsModule,i.BulkOperationStepperModule,p.RepositoryModule],providers:[{provide:o.HOOK_LIST_BULK_TYPE,useValue:g,multi:!0}],entryComponents:[d],exports:[d]})],e)}();e.SelectFirmwareComponent=h,e.StepperBulkTypeFirmwareComponent=d,e.StepperBulkTypeFirmwareModule=v,e.VersionOrPatchComponent=f,e.ɵ0=g,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-firmware.umd.min.js.map