import { InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { ExtensionPoint } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { NavigatorNode } from './navigator-node';
/**
 * A hook to use for Multi Provider extension.
 */
export declare const HOOK_NAVIGATOR_NODES: InjectionToken<unknown>;
/**
 * A service which defines the navigator.
 */
export declare class NavigatorService extends StateService implements ExtensionPoint<NavigatorNode> {
    private injector;
    private router;
    /**
     * Navigator menu items observable. It emits the current list of nodes in the navigator.
     * @readonly
     */
    items$: Observable<NavigatorNode[]>;
    /**
     * Refresh the extension factories subject.
     * @readonly
     */
    readonly refreshTrigger: Subject<unknown>;
    /**
     * @ignore
     */
    readonly state$: BehaviorSubject<Set<NavigatorNode>>;
    /**
     * Indicates whether the menu entry associated with the given URL should be expanded.
     */
    firstUrl: boolean;
    constructor(injector: Injector, router: Router);
    /**
     * Checks whenever a navigator entry associated with the given URL should be expanded.
     * @param {NavigatorNode} node Navigator node.
     */
    openOnFirstUrl(node: NavigatorNode): boolean;
    /**
     * Returns the current state.
     * @readonly
     * @returns The current set of actions.
     */
    readonly state: Set<NavigatorNode>;
    /**
     * Refresh the extension factories.
     */
    refresh(): void;
    /**
     * Adds a new node to the navigator.
     * @param {NavigatorNode} node Navigator node to add.
     */
    add(node: NavigatorNode): void;
    /**
     * Removes a node from the navigator.
     * @param {NavigatorNode} node Navigator node to remove.
     */
    remove(node: NavigatorNode): void;
}
