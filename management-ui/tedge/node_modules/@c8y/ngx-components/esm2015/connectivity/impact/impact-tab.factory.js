import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { from, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ImpactGuard } from './impact.guard';
let ImpactTabFactory = class ImpactTabFactory {
    constructor(router, guard) {
        this.router = router;
        this.guard = guard;
        this.config = {
            label: gettext('IMPACT provider settings'),
            path: '/connectivitySettings/impact_provider_settings',
            icon: 'plug'
        };
    }
    get() {
        return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];
    }
    tab() {
        return this.wrapIntoObservable(this.guard.canActivate(this.router.routerState.snapshot.root, this.router.routerState.snapshot)).pipe(map(canActivate => (canActivate ? this.config : null)));
    }
    isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
    }
    wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    }
};
ImpactTabFactory.ctorParameters = () => [
    { type: Router },
    { type: ImpactGuard }
];
ImpactTabFactory = tslib_1.__decorate([
    Injectable()
], ImpactTabFactory);
export { ImpactTabFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LXRhYi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9jb25uZWN0aXZpdHkvIiwic291cmNlcyI6WyJpbXBhY3QvaW1wYWN0LXRhYi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzdDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBTzNCLFlBQW9CLE1BQWMsRUFBVSxLQUFrQjtRQUExQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQU50RCxXQUFNLEdBQVE7WUFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztZQUMxQyxJQUFJLEVBQUUsZ0RBQWdEO1lBQ3RELElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztJQUUrRCxDQUFDO0lBRWxFLEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRSxDQUFDO0lBRUQsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUNqQyxDQUNGLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVPLFNBQVMsQ0FBVSxHQUFRO1FBQ2pDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO0lBQ2pELENBQUM7SUFFTyxrQkFBa0IsQ0FBSSxLQUFxQztRQUNqRSxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUE7O1lBOUI2QixNQUFNO1lBQWlCLFdBQVc7O0FBUG5ELGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7R0FDQSxnQkFBZ0IsQ0FxQzVCO1NBckNZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBnZXR0ZXh0LCBUYWIsIFRhYkZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGZyb20sIGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEltcGFjdEd1YXJkIH0gZnJvbSAnLi9pbXBhY3QuZ3VhcmQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1wYWN0VGFiRmFjdG9yeSBpbXBsZW1lbnRzIFRhYkZhY3Rvcnkge1xuICBwcml2YXRlIGNvbmZpZzogVGFiID0ge1xuICAgIGxhYmVsOiBnZXR0ZXh0KCdJTVBBQ1QgcHJvdmlkZXIgc2V0dGluZ3MnKSxcbiAgICBwYXRoOiAnL2Nvbm5lY3Rpdml0eVNldHRpbmdzL2ltcGFjdF9wcm92aWRlcl9zZXR0aW5ncycsXG4gICAgaWNvbjogJ3BsdWcnXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgcHJpdmF0ZSBndWFyZDogSW1wYWN0R3VhcmQpIHt9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnJvdXRlci51cmwubWF0Y2goL2Nvbm5lY3Rpdml0eVNldHRpbmdzL2cpID8gdGhpcy50YWIoKSA6IFtdO1xuICB9XG5cbiAgdGFiKCk6IFRhYiB8IE9ic2VydmFibGU8VGFiPiB7XG4gICAgcmV0dXJuIHRoaXMud3JhcEludG9PYnNlcnZhYmxlKFxuICAgICAgdGhpcy5ndWFyZC5jYW5BY3RpdmF0ZShcbiAgICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3Qucm9vdCxcbiAgICAgICAgdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3RcbiAgICAgIClcbiAgICApLnBpcGUobWFwKGNhbkFjdGl2YXRlID0+IChjYW5BY3RpdmF0ZSA/IHRoaXMuY29uZmlnIDogbnVsbCkpKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNQcm9taXNlPFQgPSBhbnk+KG9iajogYW55KTogb2JqIGlzIFByb21pc2U8VD4ge1xuICAgIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBwcml2YXRlIHdyYXBJbnRvT2JzZXJ2YWJsZTxUPih2YWx1ZTogVCB8IFByb21pc2U8VD4gfCBPYnNlcnZhYmxlPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgaWYgKGlzT2JzZXJ2YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1Byb21pc2UodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mKHZhbHVlKTtcbiAgfVxufVxuIl19