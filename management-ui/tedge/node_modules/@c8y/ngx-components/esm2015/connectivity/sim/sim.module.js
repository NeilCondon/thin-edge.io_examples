import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { gettext, ProviderConfigurationModule } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { SimGuard } from './sim.guard';
export function encodeFiles(model, fields) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = Object.assign({}, model);
        const fileFields = (get(fields, '[0].fieldGroup') || []).filter((field) => {
            return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';
        });
        for (const fileField of fileFields) {
            const files = model[fileField.key];
            if (files && files.length) {
                if (fileField.templateOptions.maxAllowedFiles === 1) {
                    result[fileField.key] = (yield files[0].readAsDataURL()).replace(/data:\S+;base64,/gi, '');
                }
                else {
                    const encodedFileContent = [];
                    for (const file of files) {
                        encodedFileContent.push((yield file.readAsDataURL()).replace(/data:\w+\/\w+;base64,/gi, ''));
                    }
                    result[fileField.key] = encodedFileContent;
                }
            }
        }
        return result;
    });
}
let SimModule = class SimModule {
};
SimModule = tslib_1.__decorate([
    NgModule({
        providers: [SimGuard],
        imports: [
            ProviderConfigurationModule.config([
                {
                    navigation: {
                        label: gettext('Connectivity'),
                        path: 'connectivitySettings',
                        icon: 'plug',
                        parent: gettext('Settings'),
                        priority: 1000,
                        preventDuplicates: true
                    },
                    tab: {
                        path: 'sim_provider_settings',
                        label: 'SIM provider settings',
                        icon: 'mobile',
                        canActivate: [SimGuard]
                    },
                    layout: {
                        pageTitle: gettext('Connectivity'),
                        cardTitle: gettext('Settings'),
                        description: gettext(`In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`),
                        providerName: gettext('Provider'),
                        providerNamePlaceholder: gettext('Select or type to filter providers'),
                        providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                        deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        deleteBtnLabel: gettext('Delete'),
                        saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                        saveBtnLabel: gettext('Save'),
                        beforeSaveHook: encodeFiles,
                        configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                        deleteConfigurationModalTitle: gettext('Delete settings'),
                        deleteConfigurationModalBody: gettext(`You are about to delete SIM provider settings. Do you want to proceed?`),
                        deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                        configurationDeletedSuccessMsg: gettext('Settings deleted.')
                    },
                    endpoint: {
                        definitionsEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'definitions'
                        },
                        configurationEndpoint: {
                            baseUrl: 'service/connectivity/metadata',
                            listUrl: 'sim/provider'
                        }
                    }
                }
            ])
        ]
    })
], SimModule);
export { SimModule };
//# sourceMappingURL=data:application/json;base64,