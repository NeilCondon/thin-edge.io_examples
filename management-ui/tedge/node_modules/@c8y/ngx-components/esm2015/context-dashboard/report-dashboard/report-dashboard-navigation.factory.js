import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { NavigatorNode, NavigatorService, gettext } from '@c8y/ngx-components';
import { ReportDashboardService } from './report-dashboard.service';
let ReportDashboardNavigationFactory = class ReportDashboardNavigationFactory {
    constructor(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    get() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.loaded) {
                this.loaded = true;
                this.navigatorService.add(new NavigatorNode({
                    label: gettext('Reports'),
                    path: 'reports',
                    icon: 'c8y-reports',
                    priority: 5
                }));
                const reports = (yield this.reportDashboardService.listReports({
                    filter: { __has: 'c8y_IsNavigatorNode' },
                    pageSize: 2000
                })).data;
                reports.forEach(report => {
                    const node = new NavigatorNode({
                        label: report.name,
                        path: `reports/${report.id}`,
                        icon: report.icon,
                        priority: report.priority
                    });
                    this.navigatorService.add(node);
                });
            }
        });
    }
};
ReportDashboardNavigationFactory.ctorParameters = () => [
    { type: NavigatorService },
    { type: InventoryService },
    { type: ReportDashboardService }
];
ReportDashboardNavigationFactory = tslib_1.__decorate([
    Injectable()
], ReportDashboardNavigationFactory);
export { ReportDashboardNavigationFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkLyIsInNvdXJjZXMiOlsicmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLW5hdmlnYXRpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3BFLElBQWEsZ0NBQWdDLEdBQTdDLE1BQWEsZ0NBQWdDO0lBRzNDLFlBQ1UsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxzQkFBOEM7UUFGOUMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFMeEQsV0FBTSxHQUFZLEtBQUssQ0FBQztJQU1yQixDQUFDO0lBRUUsR0FBRzs7WUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQ3ZCLElBQUksYUFBYSxDQUFDO29CQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztvQkFDekIsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsSUFBSSxFQUFFLGFBQWE7b0JBQ25CLFFBQVEsRUFBRSxDQUFDO2lCQUNaLENBQUMsQ0FDSCxDQUFDO2dCQUVGLE1BQU0sT0FBTyxHQUFxQixDQUFDLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQztvQkFDL0UsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLHFCQUFxQixFQUFFO29CQUN4QyxRQUFRLEVBQUUsSUFBSTtpQkFDZixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ1QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUM7d0JBQzdCLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSTt3QkFDbEIsSUFBSSxFQUFFLFdBQVcsTUFBTSxDQUFDLEVBQUUsRUFBRTt3QkFDNUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO3dCQUNqQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7cUJBQzFCLENBQUMsQ0FBQztvQkFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUFqQzZCLGdCQUFnQjtZQUNoQixnQkFBZ0I7WUFDVixzQkFBc0I7O0FBTjdDLGdDQUFnQztJQUQ1QyxVQUFVLEVBQUU7R0FDQSxnQ0FBZ0MsQ0FxQzVDO1NBckNZLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlLCBRdWVyaWVzVXRpbCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvclNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcG9ydERhc2hib2FyZFNlcnZpY2UgfSBmcm9tICcuL3JlcG9ydC1kYXNoYm9hcmQuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZXBvcnREYXNoYm9hcmROYXZpZ2F0aW9uRmFjdG9yeSB7XG4gIGxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmF2aWdhdG9yU2VydmljZTogTmF2aWdhdG9yU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZXBvcnREYXNoYm9hcmRTZXJ2aWNlOiBSZXBvcnREYXNoYm9hcmRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBnZXQoKSB7XG4gICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuXG4gICAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2UuYWRkKFxuICAgICAgICBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgICAgbGFiZWw6IGdldHRleHQoJ1JlcG9ydHMnKSxcbiAgICAgICAgICBwYXRoOiAncmVwb3J0cycsXG4gICAgICAgICAgaWNvbjogJ2M4eS1yZXBvcnRzJyxcbiAgICAgICAgICBwcmlvcml0eTogNVxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVwb3J0czogSU1hbmFnZWRPYmplY3RbXSA9IChhd2FpdCB0aGlzLnJlcG9ydERhc2hib2FyZFNlcnZpY2UubGlzdFJlcG9ydHMoe1xuICAgICAgICBmaWx0ZXI6IHsgX19oYXM6ICdjOHlfSXNOYXZpZ2F0b3JOb2RlJyB9LFxuICAgICAgICBwYWdlU2l6ZTogMjAwMFxuICAgICAgfSkpLmRhdGE7XG4gICAgICByZXBvcnRzLmZvckVhY2gocmVwb3J0ID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgICBsYWJlbDogcmVwb3J0Lm5hbWUsXG4gICAgICAgICAgcGF0aDogYHJlcG9ydHMvJHtyZXBvcnQuaWR9YCxcbiAgICAgICAgICBpY29uOiByZXBvcnQuaWNvbixcbiAgICAgICAgICBwcmlvcml0eTogcmVwb3J0LnByaW9yaXR5XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hdmlnYXRvclNlcnZpY2UuYWRkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=