import * as tslib_1 from "tslib";
import { CdkHeaderCell } from '@angular/cdk/table';
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactory, ComponentFactoryResolver, ContentChildren, ElementRef, EventEmitter, Input, OnChanges, Output, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { throttle } from './../common/throttle.decorator';
import { flow, get, parseInt as _parseInt, union, without, uniqBy } from 'lodash-es';
import { combineLatest, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, first, mergeMap, take, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from '../common/load-more.component';
import { gettext } from '../i18n/gettext';
import { ColumnDirective } from './column/column.directive';
import { FilteringActionType, minColumnGridTrackSize, ratiosByColumnTypes } from './data-grid.model';
import { GridDataSource } from './grid-data-source';
let DataGridComponent = class DataGridComponent {
    constructor(sanitizer, hostRef, cd, cfr) {
        this.sanitizer = sanitizer;
        this.hostRef = hostRef;
        this.cd = cd;
        this.cfr = cfr;
        this.title = gettext('Items');
        this.loadMoreItemsLabel = gettext('Load more items');
        this.loadingItemsLabel = gettext('Loading itemsâ€¦');
        this.showSearch = false;
        this.showChildDevices = {};
        this.dataSource = new GridDataSource();
        this.filteringLabelsParams = {
            filteredItemsCount: 0,
            allItemsCount: 0
        };
        this.paginationLabelParams = {
            pageFirstItemIdx: 0,
            pageLastItemIdx: 0,
            itemsTotal: 0
        };
        this.possiblePageSizes = [10, 15, 20, 30, 50];
        this.minPossiblePageSize = Math.min(...this.possiblePageSizes);
        this.selectable = false;
        this.selectionPrimaryKey = 'id';
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.searchText = '';
        this.rowMouseOver = new EventEmitter();
        this.rowMouseLeave = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.onConfigChange = new EventEmitter();
        this.onFilter = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.onChildDevices = new EventEmitter();
        this.columnNames = [];
        this.styles = {
            tableCursor: 'auto',
            gridTemplateColumns: undefined,
            gridInfiniteScrollColumn: undefined
        };
        this.searchText$ = new EventEmitter();
        this.filteringApplied = false;
        this.totalPagesCount = Infinity;
        this.selectedItemIds = [];
        this.currentPageSelectionState = {
            allSelected: false,
            allDeselected: true
        };
        this.builtInActionType = {
            Edit: "EDIT" /* Edit */,
            Delete: "DELETE" /* Delete */,
            Export: "EXPORT" /* Export */
        };
        this.resizeHandleMouseDown$ = new EventEmitter();
        this.resizeHandleContainerMouseMove$ = new EventEmitter();
        this.resizeHandleContainerMouseUp$ = new EventEmitter();
        this.unsubscribe$ = new Subject();
    }
    set _columns(columns) {
        this.columns = columns || [];
    }
    set _rows(rows) {
        this.rows = rows || [];
    }
    set _pagination(pagination) {
        this.pagination = pagination;
        const pageSize = get(this.pagination, 'pageSize');
        if (pageSize &&
            !this.possiblePageSizes.find(possiblePageSize => possiblePageSize === pageSize)) {
            this.pagination = Object.assign({}, this.pagination, { pageSize: 10 });
        }
    }
    set _infiniteScroll(infiniteScroll) {
        this.infiniteScroll = infiniteScroll;
    }
    set _serverSideDataCallback(serverSideDataCallback) {
        this.serverSideDataCallback = serverSideDataCallback;
    }
    set _selectable(selectable) {
        this.selectable = selectable;
    }
    set _selectionPrimaryKey(selectionPrimaryKey) {
        this.selectionPrimaryKey = selectionPrimaryKey;
    }
    set _displayOptions(displayOptions) {
        this.displayOptions = Object.assign({}, this.displayOptions, displayOptions);
    }
    set _actionControls(actionControls) {
        this.actionControls = actionControls || [];
    }
    set _bulkActionControls(bulkActionControls) {
        this.bulkActionControls = bulkActionControls || [];
    }
    ngOnInit() {
        this.searchText$
            .pipe(takeUntil(this.unsubscribe$), debounceTime(300), distinctUntilChanged(), tap(searchText => {
            this.searchText = searchText;
        }))
            .subscribe(() => {
            this.reload();
        });
        if (this.selectable) {
            combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(([data]) => {
                const currentPageEmpty = data.length === 0;
                this.currentPageSelectionState = {
                    allSelected: currentPageEmpty ? false : data.every(item => this.isItemSelected(item)),
                    allDeselected: currentPageEmpty ? true : data.every(item => !this.isItemSelected(item))
                };
            });
        }
        this.dataSource.stats$.pipe(takeUntil(this.unsubscribe$)).subscribe(stats => {
            this.createLoadMoreComponent(stats);
            this.updateFilteringLabelsParams(stats);
            this.updatePaginationLabelParams(stats);
        });
        if (this.refresh) {
            this.refresh.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
                this.cancel();
                this.reload();
            });
        }
    }
    ngOnChanges(event) {
        if (!event._actionControls || event._actionControls.firstChange) {
            this.loadData();
        }
        this.updateColumns();
    }
    ngAfterViewInit() {
        this.updateGridColumnsSize();
        this.thEls = this.thRefs.toArray().map(({ nativeElement }) => nativeElement);
        this.setupResizeHandle();
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    trackByName(index, item) {
        return item.name;
    }
    resolveCellValue(row, path) {
        return flow([
            x => this.dataSource.resolveValue(x, path),
            this.dataSource.resolveFunction,
            this.dataSource.normalizeNil
        ])(row);
    }
    changeSortOrder(columnName) {
        const column = this.columns.find(({ name }) => name === columnName);
        if (column) {
            const { sortOrder } = column;
            if (!sortOrder) {
                this.updateSorting([columnName], 'asc');
            }
            else if (sortOrder === 'asc') {
                this.updateSorting([columnName], 'desc');
            }
            else {
                this.updateSorting([columnName], '');
            }
        }
    }
    updateSorting(columnNames, sortOrder) {
        this.columns = this.columns.map((column) => {
            if (columnNames.includes(column.name)) {
                return Object.assign({}, column, { sortOrder });
            }
            return column;
        });
        this.emitConfigChange();
        this.reload();
    }
    applyFilter(columnName, dropdown, filteringModifier) {
        this.updateFiltering([columnName], {
            type: FilteringActionType.ApplyFilter,
            payload: { filteringModifier }
        });
        dropdown.hide();
        this.onFilter.emit({ columnName, dropdown, filteringModifier });
    }
    resetFilter(columnName, dropdown) {
        this.updateFiltering([columnName], { type: FilteringActionType.ResetFilter });
        dropdown.hide();
    }
    clearFilters() {
        this.updateFiltering(this.columns.map(({ name }) => name), {
            type: FilteringActionType.ResetFilter
        });
    }
    updateFiltering(columnNames, action) {
        this.columns = this.columns.map(column => {
            if (columnNames.includes(column.name)) {
                return Object.assign({}, column, (action.type === FilteringActionType.ApplyFilter
                    ? action.payload.filteringModifier
                    : { filterPredicate: undefined, externalFilterQuery: undefined }));
            }
            return column;
        });
        this.updateFilteringApplied();
        this.reload();
    }
    updateFilteringApplied() {
        this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
    }
    isColumnFilteringApplied(column) {
        const { filterable, filterPredicate, externalFilterQuery } = column;
        return !!(filterable && (filterPredicate || externalFilterQuery));
    }
    updatePagination({ itemsPerPage, page }) {
        this.pagination = Object.assign({}, this.pagination, { pageSize: itemsPerPage, currentPage: page });
        this.loadData();
        this.emitConfigChange();
    }
    reload() {
        this.pagination = Object.assign({}, this.pagination, { currentPage: 1 });
        this.recreateLoadMoreComponent = true;
        this.loadData(true);
        this.scrollToTop();
    }
    loadNextPage() {
        this.pagination = Object.assign({}, this.pagination, { currentPage: this.pagination.nextPage });
        this.loadData();
        return this.dataSource.resultList$
            .pipe(take(1)) // in order for `toPromise` to work, the observable needs to complete
            .toPromise()
            .then(result => {
            return Object.assign({}, result, { paging: Object.assign({}, result.paging, { next: this.loadNextPage.bind(this) }) });
        });
    }
    getCellRendererSpec({ value, row, columnName }) {
        return this._getCellRendererSpec({ type: 'CELL', value, row, columnName });
    }
    getHeaderCellRendererSpec({ value, columnName }) {
        return this._getCellRendererSpec({ type: 'HEADER', value, row: undefined, columnName });
    }
    getFilteringFormRendererSpec({ column, dropdown }) {
        return {
            renderer: get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                column.filteringFormRendererComponent,
            context: {
                property: column,
                applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                resetFilter: this.resetFilter.bind(this, column.name, dropdown)
            }
        };
    }
    setAllItemsSelected(selected) {
        this.dataSource.selection$
            .pipe(first())
            .subscribe(({ filteredDataIds }) => this.setItemsSelected(filteredDataIds, selected));
    }
    setAllItemsInCurrentPageSelected(selected) {
        this.dataSource.data$.pipe(first()).subscribe(data => this.setItemsSelected(data, selected));
    }
    setItemsSelected(items, selected) {
        const itemIds = items.map((item) => typeof item === 'object' ? item[this.selectionPrimaryKey] : item);
        this.selectedItemIds = selected
            ? union(this.selectedItemIds, itemIds)
            : without(this.selectedItemIds, ...itemIds);
        this.itemsSelect.emit(this.selectedItemIds);
    }
    cancel() {
        this.selectedItemIds = [];
        this.itemsSelect.emit(this.selectedItemIds);
    }
    isItemSelected(item) {
        return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
    }
    onColumnDrop({ previousIndex, currentIndex }) {
        const differentIndex = previousIndex !== currentIndex;
        if (differentIndex) {
            const column = this.columns.splice(previousIndex, 1);
            this.columns.splice(currentIndex, 0, column[0]);
        }
        this.updateColumnNames();
        this.updateGridColumnsSize();
    }
    updateGridColumnsSize() {
        this.styles = Object.assign({}, this.styles, { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                .filter(column => column.visible)
                .map(({ gridTrackSize }) => gridTrackSize)
                .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle(`1 / span ${this.columns.filter(column => column.visible).length}`) });
        this.emitConfigChange();
    }
    loadChildDevices() {
        this.showChildDevices.value = !this.showChildDevices.value;
        this.onChildDevices.emit(this.showChildDevices.value);
    }
    emitConfigChange() {
        const columns = this.columns.map(({ visible, sortOrder, name }) => ({
            visible,
            sortOrder,
            name
        }));
        this.onConfigChange.emit({ columns, pagination: this.pagination });
    }
    updateColumns() {
        const specialColumn = {
            gridTrackSize: 'minmax(42px, 82px)',
            sortable: false,
            positionFixed: true
        };
        const columns = [
            this.selectable ? Object.assign({}, specialColumn, { name: "checkbox" /* Checkbox */ }) : undefined,
            ...this.columns,
            this.actionControls.length > 0
                ? Object.assign({}, specialColumn, { name: "actions" /* Actions */ }) : undefined
        ]
            .filter(Boolean)
            .map(this.withColumnDefaults);
        this.columns = uniqBy(columns, 'name');
        this.updateColumnNames();
        this.updateGridColumnsSize();
        this.updateFilteringApplied();
    }
    withColumnDefaults(column) {
        const dataType = column.dataType || "text-short" /* TextShort */;
        const { headerCSSClassName, cellCSSClassName } = column;
        return Object.assign({ visible: true, positionFixed: false, sortable: true, sortOrder: '', filterable: false }, column, { dataType, gridTrackSize: column.gridTrackSize ||
                `minmax(${minColumnGridTrackSize}px, ${ratiosByColumnTypes[dataType]}fr)`, headerCSSClassName: (typeof headerCSSClassName === 'string'
                ? headerCSSClassName.split(' ')
                : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                [] });
    }
    updateColumnNames() {
        this.columnNames = this.columns.map(({ name }) => name);
    }
    setupResizeHandle() {
        const resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(takeUntil(this.unsubscribe$), tap(() => this.clearMouseHighlights()), mergeMap(({ event, targetColumnName }) => {
            this.columns = this.columns.map(column => {
                if (column.name === targetColumnName) {
                    return Object.assign({}, column, { headerCSSClassName: union(column.headerCSSClassName, ['header--being-resized']) });
                }
                return column;
            });
            this.headerBeingResized = {
                columnName: targetColumnName,
                el: event.target.parentNode
            };
            this.styles = Object.assign({}, this.styles, { tableCursor: 'col-resize' });
            return this.resizeHandleContainerMouseMove$.pipe(tap(() => this.clearMouseHighlights()), takeUntil(this.resizeHandleContainerMouseUp$));
        }));
        resizeHandleDrag$.subscribe(event => {
            requestAnimationFrame(() => {
                this.columns = this.columns.map((column, i) => {
                    if (column.name === this.headerBeingResized.columnName) {
                        const wrapper = this.hostRef.nativeElement;
                        // Read wrapper's offset left relative to the document.
                        const horizontalOffset = wrapper.getBoundingClientRect().left;
                        // Adjust with the wrapper horizontal scroll position.
                        const horizontalScrollOffset = wrapper.scrollLeft - horizontalOffset;
                        // Calculate the desired width.
                        const width = horizontalScrollOffset + event.clientX - (this.headerBeingResized.el.offsetLeft || 0);
                        return Object.assign({}, column, { 
                            // Update the column object with the new size value, enforce our minimum size.
                            gridTrackSize: `${Math.max(minColumnGridTrackSize, width)}px` });
                    }
                    // For the other headers which don't have a set width, fix it to their computed width.
                    if (column.gridTrackSize.startsWith('minmax')) {
                        return Object.assign({}, column, { 
                            // isn't fixed yet (it would be a px value)
                            gridTrackSize: `${_parseInt(this.thEls[i].clientWidth)}px` });
                    }
                    return column;
                });
                /*
                 * Update the column sizes.
                 * Note: grid-template-columns sets the width for all columns in one value.
                 */
                this.updateGridColumnsSize();
            });
        });
        this.resizeHandleContainerMouseUp$.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
            if (this.headerBeingResized) {
                this.columns = this.columns.map(column => {
                    if (column.name === this.headerBeingResized.columnName) {
                        return Object.assign({}, column, { headerCSSClassName: without(column.headerCSSClassName, 'header--being-resized') });
                    }
                    return column;
                });
                this.headerBeingResized = undefined;
                this.styles = Object.assign({}, this.styles, { tableCursor: 'auto' });
            }
        });
    }
    clearMouseHighlights() {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    }
    _getCellRendererSpec({ type, value, row, columnName }) {
        const column = this.columns.find(({ name }) => name === columnName);
        const columnRenderer = this.getColumnRenderer(column);
        const rendererTemplate = get(columnRenderer, `${type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef'}.template`);
        const { cellRendererComponent, headerCellRendererComponent } = column;
        const rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
        return {
            renderer: rendererTemplate || rendererComponent,
            context: {
                value,
                item: row,
                property: column
            }
        };
    }
    getColumnRenderer(column) {
        return this.columnRenderers.toArray().find(({ name }) => name === column.name);
    }
    loadData(reload = false) {
        const { rows, columns, pagination, searchText, serverSideDataCallback, selectable, selectionPrimaryKey, infiniteScroll } = this;
        this.dataSource.loadData({
            rows,
            columns,
            pagination,
            searchText,
            serverSideDataCallback,
            selectable,
            selectionPrimaryKey,
            infiniteScroll,
            reload
        });
    }
    updateFilteringLabelsParams(stats) {
        this.filteringLabelsParams = {
            filteredItemsCount: stats.filteredSize,
            allItemsCount: stats.size
        };
    }
    updatePaginationLabelParams(stats) {
        this.pagination.nextPage = stats.nextPage;
        const pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
        this.paginationLabelParams = {
            pageFirstItemIdx,
            pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
            itemsTotal: stats.filteredSize
        };
    }
    createLoadMoreComponent(stats) {
        if (this.infiniteScroll &&
            stats &&
            stats.nextPage &&
            (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
            this.recreateLoadMoreComponent = false;
            this.infiniteScrollContainer.clear();
            const componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
            const componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
            const instance = componentRef.instance;
            instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
            instance.hidden = this.infiniteScroll === 'hidden';
            instance.paging = {
                nextPage: stats.nextPage,
                next: this.loadNextPage.bind(this)
            };
            instance.loadNextLabel = this.loadMoreItemsLabel;
            instance.loadingLabel = this.loadingItemsLabel;
            this.loadMoreComponent = instance;
        }
        else if (this.loadMoreComponent && !stats.nextPage) {
            this.loadMoreComponent.paging = {
                nextPage: null
            };
        }
    }
    scrollToTop() {
        if (this.infiniteScroll) {
            this.scrollContainer.nativeElement.scrollTop = 0;
        }
    }
};
DataGridComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver }
];
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "loadMoreItemsLabel", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "loadingItemsLabel", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "showSearch", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "refresh", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "showChildDevices", void 0);
tslib_1.__decorate([
    Input('columns')
], DataGridComponent.prototype, "_columns", null);
tslib_1.__decorate([
    Input('rows')
], DataGridComponent.prototype, "_rows", null);
tslib_1.__decorate([
    Input('pagination')
], DataGridComponent.prototype, "_pagination", null);
tslib_1.__decorate([
    Input('infiniteScroll')
], DataGridComponent.prototype, "_infiniteScroll", null);
tslib_1.__decorate([
    Input('serverSideDataCallback')
], DataGridComponent.prototype, "_serverSideDataCallback", null);
tslib_1.__decorate([
    Input('selectable')
], DataGridComponent.prototype, "_selectable", null);
tslib_1.__decorate([
    Input('selectionPrimaryKey')
], DataGridComponent.prototype, "_selectionPrimaryKey", null);
tslib_1.__decorate([
    Input('displayOptions')
], DataGridComponent.prototype, "_displayOptions", null);
tslib_1.__decorate([
    Input('actionControls')
], DataGridComponent.prototype, "_actionControls", null);
tslib_1.__decorate([
    Input('bulkActionControls')
], DataGridComponent.prototype, "_bulkActionControls", null);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "searchText", void 0);
tslib_1.__decorate([
    Input()
], DataGridComponent.prototype, "itemsSelectLimit", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "rowMouseOver", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "rowMouseLeave", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "rowClick", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "onConfigChange", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "onFilter", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "itemsSelect", void 0);
tslib_1.__decorate([
    Output()
], DataGridComponent.prototype, "onChildDevices", void 0);
tslib_1.__decorate([
    ContentChildren(ColumnDirective)
], DataGridComponent.prototype, "columnRenderers", void 0);
tslib_1.__decorate([
    ViewChild('scroll', { static: true })
], DataGridComponent.prototype, "scrollContainer", void 0);
tslib_1.__decorate([
    ViewChild('infiniteScrollContainer', { static: false, read: ViewContainerRef })
], DataGridComponent.prototype, "infiniteScrollContainer", void 0);
tslib_1.__decorate([
    ViewChildren(CdkHeaderCell, { read: ElementRef })
], DataGridComponent.prototype, "thRefs", void 0);
tslib_1.__decorate([
    throttle(500, { trailing: true, leading: false })
], DataGridComponent.prototype, "loadData", null);
DataGridComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-data-grid',
        template: "<div class=\"table-data-grid-scroll\" #scroll>\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator large-padding\">\n    <h4 class=\"m-r-16\">{{ title | translate }}</h4>\n\n    <ng-container *ngIf=\"displayOptions.filter\">\n      <span *ngIf=\"!filteringApplied\">\n        <span class=\"label label-warning m-r-4\" translate>No filters</span>\n        <small\n          *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n          class=\"m-r-4\"\n          ngNonBindable\n          translate\n          [translateParams]=\"filteringLabelsParams\"\n          >{{ filteredItemsCount }} of {{ allItemsCount }} items</small\n        >\n      </span>\n      <span *ngIf=\"filteringApplied\">\n        <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n          <span class=\"badge badge-info m-r-4\">\n            {{ (dataSource.stats$ | async).filteredSize }}\n          </span>\n          <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n            >of {{ allItemsCount }} items</small\n          >\n        </ng-container>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"m-l-8 btn btn-xs btn-default m-r-4\"\n          (click)=\"clearFilters()\"\n        >\n          {{ 'Clear filters' | translate }}\n        </button>\n      </span>\n      <span class=\"hidden-xs hidden-sm\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n        >\n          <i c8yIcon=\"question-circle-o\"></i>\n        </button> </span\n    ></ng-container>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <label class=\"c8y-switch\" *ngIf=\"showChildDevices.show\">\n          <input type=\"checkbox\" [(ngModel)]=\"showChildDevices.value\" (click)=\"loadChildDevices()\"/>\n          <span></span>\n          {{ 'Show child devices' | translate }}\n        </label>\n\n        <div\n          class=\"dropdown\"\n          dropdown\n          [insideClick]=\"true\"\n          container=\"body\"\n          placement=\"bottom left\"\n        >\n          <button\n            title=\"{{ 'Configure columns' | translate }}\"\n            class=\"btnbar-btn c8y-dropdown\"\n            dropdownToggle\n          >\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i>\n            <span>{{ 'Configure columns' | translate }}</span>\n          </button>\n\n          <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after p-0 \">\n                      <label\n                        title=\"{{ (column.header | translate) || column.name }}\"\n                        class=\"c8y-checkbox p-l-16 p-r-32 p-t-8 p-b-8 flex-item-v-stretch\"\n                      >\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize()\"\n                        />\n                        <span></span>\n                        <span>{{ (column.header | translate) || column.name }}</span>\n                      </label>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          title=\"{{ 'Reload' | translate }}\"\n          class=\"btnbar-btn btn-link\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"searchText = ''; reload()\"\n        >\n          <i c8yIcon=\"refresh\" class=\"m-r-4\"></i>\n          <span>{{ 'Reload' | translate }}</span>\n        </button>\n\n        <div *ngIf=\"!serverSideDataCallback || showSearch\" class=\"input-group input-group-search m-l-sm-32\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span\n          *ngIf=\"!itemsSelectLimit; else limit\"\n          ngNonBindable\n          translate\n          [translateParams]=\"{ count: selectedItemIds.length }\"\n        >\n          {{ count }} selected items.\n        </span>\n        <ng-template #limit>\n          <span\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: selectedItemIds.length, limit: itemsSelectLimit }\"\n          >\n            {{ count }} selected items out of {{ limit }} allowed\n          </span>\n        </ng-template>\n\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"selectedItemIds.length >= pagination.pageSize && !itemsSelectLimit\">\n          <a (click)=\"setAllItemsSelected(true)\" class=\"interact\" >\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <button\n              title=\"{{ 'Export' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Export\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"sign-out\"></i>\n              <span>{{ 'Export' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ 'Delete' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Delete\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"trash\"></i>\n              <span>{{ 'Delete' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ bulkActionControl.text | translate }}\"\n              *ngSwitchDefault\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n              <span>{{ bulkActionControl.text | translate }}</span>\n            </button>\n          </ng-container>\n\n          <button title=\"{{ 'Cancel' | translate }}\" class=\"btnbar-btn\" (click)=\"cancel()\">\n            <i c8yIcon=\"times\"></i>\n            <span>{{ 'Cancel' | translate }}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid large-padding\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\" [cdkColumnDef]=\"column.name\">\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div *ngIf=\"!itemsSelectLimit\">\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n                [disabled]=\"selectedItemIds.length >= itemsSelectLimit && !isItemSelected(row)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    title=\"{{ 'Edit' | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"pencil\"></i>\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    class=\"btn btn-dot showOnHover\"\n                    title=\"{{ 'Delete' | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                  </button>\n                  <button\n                    *ngSwitchDefault\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    title=\"{{ actionControl.text | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                  </button>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n\n            <div *ngIf=\"actionControls.length > 2\" class=\"dropdown\" dropdown>\n              <button\n                title=\"{{ 'Actions' | translate }}\"\n                class=\"dropdown-toggle c8y-dropdown\"\n                dropdownToggle\n              >\n                <i c8yIcon=\"ellipsis-v\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                  <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                    <button\n                      title=\"{{ 'Edit' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Edit\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"pencil\"></i>\n                      {{ 'Edit' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ 'Delete' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Delete\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"trash\"></i>\n                      {{ 'Delete' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ 'Export' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Export\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"download\"></i>\n                      {{ 'Export' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ actionControl.text | translate }}\"\n                      *ngSwitchDefault\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                      {{ actionControl.text | translate }}\n                    </button>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  (\n                    [{\n                      columnName: column.name,\n                      value: ((column.header | translate) || column.name)\n                    }]\n                      | map:getHeaderCellRendererSpec:this\n                  ) as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              placement=\"bottom left\"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    (\n                      [{\n                        columnName: column.name,\n                        value: ((column.header | translate) || column.name)\n                      }]\n                        | map:getHeaderCellRendererSpec:this\n                    ) as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      (\n                        [{\n                          column: column,\n                          dropdown: dropdown\n                        }]\n                          | map:getFilteringFormRendererSpec:this\n                      ) as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer [spec]=\"filteringFormRendererSpec\">\n                    </c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            >\n            </span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                (\n                  [{\n                    value: resolveCellValue(row, column.path),\n                    row: row,\n                    columnName: column.name\n                  }]\n                    | map:getCellRendererSpec:this\n                ) as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container *ngIf=\"infiniteScroll\">\n      <tr cdk-footer-row *cdkFooterRowDef=\"['infiniteScrollFooter']\"></tr>\n    </ng-container>\n  </table>\n\n  <div *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\" class=\"text-center\">\n    <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n  </div>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <ng-content select=\".c8y-empty-state\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator large-padding\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\"\n          >{{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}</span\n        >\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\">{{ 'Items per page' | translate }}</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        [class.hidden]=\"totalPagesCount <= 1\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount = $event\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n"
    })
], DataGridComponent);
export { DataGridComponent };
//# sourceMappingURL=data:application/json;base64,