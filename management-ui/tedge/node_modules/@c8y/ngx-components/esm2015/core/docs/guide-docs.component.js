import * as tslib_1 from "tslib";
import { Component, OnInit, ContentChildren, QueryList, ContentChild, AfterContentInit, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { C8yTranslateDirective } from '../i18n/c8y-translate.directive';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
let GuideDocsComponent = class GuideDocsComponent {
    constructor(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    ngOnInit() {
        this.baseUrl = this.docs.getBaseUrl();
    }
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    ngAfterContentInit() {
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
    }
    /**
     * Find and modify anchor elements
     */
    replaceAnchorAttributes() {
        const anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(a => {
            const guideHref = `${this.baseUrl}/${a.getAttribute('c8y-guide-href')}`;
            this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    }
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    findGuideAnchors(el) {
        const isAnchor = () => el.nodeName === 'A';
        const hasGuideHrefAttr = () => !!el.attributes.getNamedItem('c8y-guide-href');
        const hasChildren = () => el.childNodes && el.childNodes.length > 0;
        let result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach((node) => {
                const searchResult = this.findGuideAnchors(node);
                if (searchResult) {
                    result = [...result, ...searchResult];
                }
            });
        }
        return result;
    }
    ngAfterViewInit() {
        this.links.forEach(guide => {
            guide.baseHref = this.baseUrl;
        });
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
};
GuideDocsComponent.ctorParameters = () => [
    { type: DocsService },
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    ContentChildren(GuideHrefDirective, { descendants: true })
], GuideDocsComponent.prototype, "links", void 0);
tslib_1.__decorate([
    ContentChild(C8yTranslateDirective, { static: false })
], GuideDocsComponent.prototype, "translateDirective", void 0);
GuideDocsComponent = tslib_1.__decorate([
    Component({
        selector: '[c8y-guide-docs]',
        template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
    })
], GuideDocsComponent);
export { GuideDocsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUtZG9jcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kb2NzL2d1aWRlLWRvY3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixlQUFlLEVBQ2YsU0FBUyxFQUNULFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLFNBQVMsRUFBRSxTQUFTLEVBQ3JCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU0zQyxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQVk3QixZQUFvQixJQUFpQixFQUFVLEVBQWMsRUFBVSxRQUFtQjtRQUF0RSxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGbEYsZUFBVSxHQUEyQixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUyQixDQUFDO0lBRTlGLFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtCQUFrQjtRQUNoQixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZTtpQkFDcEMsSUFBSSxDQUFDLFNB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LEVBQUUsa0JBQWtCO1FBQzVCLDhGQUEwQztLQUMzQyxDQUFDO0dBQ1csa0JBQWtCLENBaUY5QjtTQWpGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9uSW5pdCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIENvbnRlbnRDaGlsZCxcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgRWxlbWVudFJlZixcbiAgUmVuZGVyZXIyLCBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHdWlkZUhyZWZEaXJlY3RpdmUgfSBmcm9tICcuL2d1aWRlLWhyZWYuZGlyZWN0aXZlJztcbmltcG9ydCB7IERvY3NTZXJ2aWNlIH0gZnJvbSAnLi9kb2NzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQzh5VHJhbnNsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vaTE4bi9jOHktdHJhbnNsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tjOHktZ3VpZGUtZG9jc10nLFxuICB0ZW1wbGF0ZVVybDogJy4vZ3VpZGUtZG9jcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgR3VpZGVEb2NzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBiYXNlVXJsOiBzdHJpbmc7XG4gIEBDb250ZW50Q2hpbGRyZW4oR3VpZGVIcmVmRGlyZWN0aXZlLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pIGxpbmtzOiBRdWVyeUxpc3Q8R3VpZGVIcmVmRGlyZWN0aXZlPjtcblxuICAvKipcbiAgICogUHJvdmlkZXMgYWNjZXNzIHRvIHRyYW5zbGF0ZSBkaXJlY3RpdmUsIHNvIGl0IGlzIHBvc3NpYmxlIHRvIGFkanVzdCBhbmNob3IgaHRtbCB0YWdzLCBhZnRlclxuICAgKiBjb250ZW50IGlzIHRyYW5zbGF0ZWQuXG4gICAqL1xuICBAQ29udGVudENoaWxkKEM4eVRyYW5zbGF0ZURpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIHRyYW5zbGF0ZURpcmVjdGl2ZTtcblxuICBwcml2YXRlIGRlc3Ryb3llZCQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdCgxKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvY3M6IERvY3NTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5iYXNlVXJsID0gdGhpcy5kb2NzLmdldEJhc2VVcmwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciBjb250ZW50IGlzIGluaXRpYWxpemVkIHdlIHN1YnNjcmliZSBmb3IgdHJhbnNsYXRpb24gZXZlbnRzLCB0aGVuIHdlIGFyZSBhYmxlIHRvIG1vZGlmeVxuICAgKiBhbmNob3IganVzdCBhcyBDOHlHdWlkZUhyZWZEaXJlY3RpdmUgZG9lcy5cbiAgICovXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy50cmFuc2xhdGVEaXJlY3RpdmUpIHtcbiAgICAgIHRoaXMudHJhbnNsYXRlRGlyZWN0aXZlLmh0bWxVcGRhdGVFdmVudFxuICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSlcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFuZCBtb2RpZnkgYW5jaG9yIGVsZW1lbnRzXG4gICAqL1xuICByZXBsYWNlQW5jaG9yQXR0cmlidXRlcygpIHtcbiAgICBjb25zdCBhbmNob3JzID0gdGhpcy5maW5kR3VpZGVBbmNob3JzKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgYW5jaG9ycy5mb3JFYWNoKGEgPT4ge1xuICAgICAgY29uc3QgZ3VpZGVIcmVmID0gYCR7dGhpcy5iYXNlVXJsfS8ke2EuZ2V0QXR0cmlidXRlKCdjOHktZ3VpZGUtaHJlZicpfWA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAnaHJlZicsIGd1aWRlSHJlZik7XG4gICAgICBpZiAoIWEuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShhLCAndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZSBmdW5jdGlvbiwgcmV0dXJucyBhcnJheSBvZiBBbmNob3IgZWxlbWVudHMgaW5zaWRlIEhUTUxFbGVtZW50LlxuICAgKi9cbiAgZmluZEd1aWRlQW5jaG9ycyhlbDogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudFtdIHtcbiAgICBjb25zdCBpc0FuY2hvciA9ICgpID0+IGVsLm5vZGVOYW1lID09PSAnQSc7XG4gICAgY29uc3QgaGFzR3VpZGVIcmVmQXR0ciA9ICgpID0+ICEhZWwuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2M4eS1ndWlkZS1ocmVmJyk7XG4gICAgY29uc3QgaGFzQ2hpbGRyZW4gPSAoKSA9PiBlbC5jaGlsZE5vZGVzICYmIGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMDtcblxuICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgIGlmIChpc0FuY2hvcigpICYmIGhhc0d1aWRlSHJlZkF0dHIoKSkge1xuICAgICAgcmVzdWx0LnB1c2goZWwpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2hpbGRyZW4oKSkge1xuICAgICAgZWwuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSB0aGlzLmZpbmRHdWlkZUFuY2hvcnMobm9kZSk7XG4gICAgICAgIGlmIChzZWFyY2hSZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSBbLi4ucmVzdWx0LCAuLi5zZWFyY2hSZXN1bHRdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmxpbmtzLmZvckVhY2goZ3VpZGUgPT4ge1xuICAgICAgZ3VpZGUuYmFzZUhyZWYgPSB0aGlzLmJhc2VVcmw7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCh0cnVlKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19