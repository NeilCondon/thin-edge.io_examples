import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { DropAreaModule } from '../drop-area/drop-area.module';
import { FormsModule } from '../forms/index';
import { C8yTranslateModule } from './../i18n/c8y-translate.module';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { FieldFile } from './file/file.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
export const FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldFile,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(type => type['CONFIG']).reduce((formlyConfig, typeConfig) => (Object.assign({}, formlyConfig, { types: [...formlyConfig.types, ...(typeConfig.types || [])], wrappers: [...formlyConfig.wrappers, ...(typeConfig.wrappers || [])] })), { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
let DynamicFormsUIThemeModule = class DynamicFormsUIThemeModule {
};
DynamicFormsUIThemeModule = tslib_1.__decorate([
    NgModule({
        declarations: [...FIELD_TYPES],
        entryComponents: [...FIELD_TYPES],
        imports: [
            CommonModule,
            PopoverModule,
            ReactiveFormsModule,
            C8yTranslateModule,
            DropAreaModule,
            FormsModule,
            FormlyModule,
            FormlySelectModule
        ],
        providers: [
            {
                provide: FORMLY_CONFIG,
                useFactory: fieldTypeFactory,
                multi: true
            }
        ]
    })
], DynamicFormsUIThemeModule);
export { DynamicFormsUIThemeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMtdWktdGhlbWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQTJCLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFMUQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUEyQjtJQUNqRCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixtQkFBbUI7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsNkNBQTZDO0lBQzdDLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FDbkQsQ0FBQyxZQUEwQixFQUFFLFVBQXdCLEVBQUUsRUFBRSxDQUN2RCxDQUFDLGtCQUNJLFlBQVksSUFDZixLQUFLLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsRUFDM0QsUUFBUSxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQ3BELENBQUEsRUFDcEIsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FDNUIsQ0FBQztBQUNKLENBQUM7QUFFRDs7OztHQUlHO0FBc0JILElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0NBQUcsQ0FBQTtBQUE1Qix5QkFBeUI7SUFyQnJDLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQzlCLGVBQWUsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLE9BQU8sRUFBRTtZQUNQLFlBQVk7WUFDWixhQUFhO1lBQ2IsbUJBQW1CO1lBQ25CLGtCQUFrQjtZQUNsQixjQUFjO1lBQ2QsV0FBVztZQUNYLFlBQVk7WUFDWixrQkFBa0I7U0FDbkI7UUFDRCxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsVUFBVSxFQUFFLGdCQUFnQjtnQkFDNUIsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztHQUNXLHlCQUF5QixDQUFHO1NBQTVCLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENvbmZpZ09wdGlvbiwgRmllbGRUeXBlLCBGb3JtbHlNb2R1bGUsIEZPUk1MWV9DT05GSUcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcbmltcG9ydCB7IEZvcm1seVNlbGVjdE1vZHVsZSB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0JztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgRHJvcEFyZWFNb2R1bGUgfSBmcm9tICcuLi9kcm9wLWFyZWEvZHJvcC1hcmVhLm1vZHVsZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2Zvcm1zL2luZGV4JztcbmltcG9ydCB7IEM4eVRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJy4vLi4vaTE4bi9jOHktdHJhbnNsYXRlLm1vZHVsZSc7XG5pbXBvcnQgeyBBcnJheVR5cGVDb21wb25lbnQgfSBmcm9tICcuL2FycmF5L2FycmF5LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkQ2hlY2tib3ggfSBmcm9tICcuL2NoZWNrYm94L2NoZWNrYm94LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkRmlsZSB9IGZyb20gJy4vZmlsZS9maWxlLnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IFdyYXBwZXJGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQvZm9ybS1maWVsZC53cmFwcGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZElucHV0IH0gZnJvbSAnLi9pbnB1dC9pbnB1dC50eXBlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPYmplY3RUeXBlQ29tcG9uZW50IH0gZnJvbSAnLi9vYmplY3Qvb2JqZWN0LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkUmFkaW8gfSBmcm9tICcuL3JhZGlvL3JhZGlvLnR5cGUuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IEZJRUxEX1RZUEVTOiBBcnJheTxUeXBlPEZpZWxkVHlwZT4+ID0gW1xuICBGaWVsZENoZWNrYm94LFxuICBBcnJheVR5cGVDb21wb25lbnQsXG4gIFdyYXBwZXJGb3JtRmllbGQsXG4gIEZpZWxkRmlsZSxcbiAgRmllbGRJbnB1dCxcbiAgRmllbGRSYWRpbyxcbiAgT2JqZWN0VHlwZUNvbXBvbmVudFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkVHlwZUZhY3RvcnkoKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zdHJpbmctbGl0ZXJhbFxuICByZXR1cm4gRklFTERfVFlQRVMubWFwKHR5cGUgPT4gdHlwZVsnQ09ORklHJ10pLnJlZHVjZShcbiAgICAoZm9ybWx5Q29uZmlnOiBDb25maWdPcHRpb24sIHR5cGVDb25maWc6IENvbmZpZ09wdGlvbikgPT5cbiAgICAgICh7XG4gICAgICAgIC4uLmZvcm1seUNvbmZpZyxcbiAgICAgICAgdHlwZXM6IFsuLi5mb3JtbHlDb25maWcudHlwZXMsIC4uLih0eXBlQ29uZmlnLnR5cGVzIHx8IFtdKV0sXG4gICAgICAgIHdyYXBwZXJzOiBbLi4uZm9ybWx5Q29uZmlnLndyYXBwZXJzLCAuLi4odHlwZUNvbmZpZy53cmFwcGVycyB8fCBbXSldXG4gICAgICB9IGFzIENvbmZpZ09wdGlvbiksXG4gICAgeyB0eXBlczogW10sIHdyYXBwZXJzOiBbXSB9XG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVjbGFyZXMgZmllbGQgdHlwZSBjb21wb25lbnRzIGZvciBkeW5hbWljIGZvcm1zIHRoYXQgbWF0Y2ggQzhZIHN0eWxlZ3VpZGUuXG4gKlxuICogQGR5bmFtaWNcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbLi4uRklFTERfVFlQRVNdLFxuICBlbnRyeUNvbXBvbmVudHM6IFsuLi5GSUVMRF9UWVBFU10sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUG9wb3Zlck1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIEM4eVRyYW5zbGF0ZU1vZHVsZSxcbiAgICBEcm9wQXJlYU1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBGb3JtbHlNb2R1bGUsXG4gICAgRm9ybWx5U2VsZWN0TW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEZPUk1MWV9DT05GSUcsXG4gICAgICB1c2VGYWN0b3J5OiBmaWVsZFR5cGVGYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1zVUlUaGVtZU1vZHVsZSB7fVxuIl19