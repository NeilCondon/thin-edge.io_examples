var EmailsValidatorDirective_1;
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { FormControl, NG_VALIDATORS, Validators } from '@angular/forms';
/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
let EmailsValidatorDirective = EmailsValidatorDirective_1 = class EmailsValidatorDirective {
    /**
     * A directive that adds the `emails` validator to controls marked with the
     * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
     *
     * **Example**
     *
     * ```html
     * <input type="text" name="emails" ngModel emails>
     * <input type="text" name="emails" ngModel emails="true">
     * <input type="text" name="emails" ngModel [emails]="true">
     * ```
     */
    constructor() {
        this._enabled = false;
        this.separator = ',';
    }
    /**
     * Tracks changes to the emails attribute bound to this directive.
     */
    set emails(value) {
        this._enabled = value === '' || value === true || value === 'true';
        if (this._onChange) {
            this._onChange();
        }
    }
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    validate(control) {
        if (!this._enabled) {
            return null;
        }
        const value = control.value || '';
        const emails = value.split(this.separator).map(email => email.trim());
        const invalid = emails.some(email => Validators.email(new FormControl(email)));
        return invalid ? { emails: true } : null;
    }
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
};
tslib_1.__decorate([
    Input()
], EmailsValidatorDirective.prototype, "emails", null);
EmailsValidatorDirective = EmailsValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
        providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective_1, multi: true }]
    })
], EmailsValidatorDirective);
export { EmailsValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9mb3Jtcy9lbWFpbHMtdmFsaWRhdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFDTCxXQUFXLEVBRVgsYUFBYSxFQUdiLFVBQVUsRUFDWCxNQUFNLGdCQUFnQixDQUFDO0FBRXhCOzs7Ozs7Ozs7OztHQVdHO0FBS0gsSUFBYSx3QkFBd0IsZ0NBQXJDLE1BQWEsd0JBQXdCO0lBaEJyQzs7Ozs7Ozs7Ozs7T0FXRztJQUNIO1FBS1UsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixjQUFTLEdBQVcsR0FBRyxDQUFDO0lBa0NsQyxDQUFDO0lBaENDOztPQUVHO0lBRUgsSUFBSSxNQUFNLENBQUMsS0FBdUI7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQztRQUNuRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEUsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNILHlCQUF5QixDQUFDLEVBQWM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztDQUNGLENBQUE7QUE1QkM7SUFEQyxLQUFLLEVBQUU7c0RBTVA7QUFkVSx3QkFBd0I7SUFKcEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG1FQUFtRTtRQUM3RSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLDBCQUF3QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUM1RixDQUFDO0dBQ1csd0JBQXdCLENBcUNwQztTQXJDWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBGb3JtQ29udHJvbCxcbiAgQWJzdHJhY3RDb250cm9sLFxuICBOR19WQUxJREFUT1JTLFxuICBWYWxpZGF0aW9uRXJyb3JzLFxuICBWYWxpZGF0b3IsXG4gIFZhbGlkYXRvcnNcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgYWRkcyB0aGUgYGVtYWlsc2AgdmFsaWRhdG9yIHRvIGNvbnRyb2xzIG1hcmtlZCB3aXRoIHRoZVxuICogYGVtYWlsc2AgYXR0cmlidXRlLiBUaGUgZGlyZWN0aXZlIGlzIHByb3ZpZGVkIHdpdGggdGhlIGBOR19WQUxJREFUT1JTYCBtdWx0aS1wcm92aWRlciBsaXN0LlxuICpcbiAqICoqRXhhbXBsZSoqXG4gKlxuICogYGBgaHRtbFxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgZW1haWxzPlxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgZW1haWxzPVwidHJ1ZVwiPlxuICogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImVtYWlsc1wiIG5nTW9kZWwgW2VtYWlsc109XCJ0cnVlXCI+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VtYWlsc11bZm9ybUNvbnRyb2xOYW1lXSxbZW1haWxzXVtmb3JtQ29udHJvbF0sW2VtYWlsc11bbmdNb2RlbF0nLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBFbWFpbHNWYWxpZGF0b3JEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH1dXG59KVxuZXhwb3J0IGNsYXNzIEVtYWlsc1ZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIHByaXZhdGUgX2VuYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfb25DaGFuZ2U/OiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIHNlcGFyYXRvcjogc3RyaW5nID0gJywnO1xuXG4gIC8qKlxuICAgKiBUcmFja3MgY2hhbmdlcyB0byB0aGUgZW1haWxzIGF0dHJpYnV0ZSBib3VuZCB0byB0aGlzIGRpcmVjdGl2ZS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBlbWFpbHModmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9lbmFibGVkID0gdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgaWYgKHRoaXMuX29uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCB2YWxpZGF0ZXMgd2hldGhlciBlbWFpbCBhZGRyZXNzZXMgYXJlIHZhbGlkLlxuICAgKiBSZXR1cm5zIHRoZSB2YWxpZGF0aW9uIHJlc3VsdCBpZiBlbmFibGVkLCBvdGhlcndpc2UgbnVsbC5cbiAgICovXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gY29udHJvbC52YWx1ZSB8fCAnJztcbiAgICBjb25zdCBlbWFpbHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnNlcGFyYXRvcikubWFwKGVtYWlsID0+IGVtYWlsLnRyaW0oKSk7XG4gICAgY29uc3QgaW52YWxpZCA9IGVtYWlscy5zb21lKGVtYWlsID0+IFZhbGlkYXRvcnMuZW1haWwobmV3IEZvcm1Db250cm9sKGVtYWlsKSkpO1xuICAgIHJldHVybiBpbnZhbGlkID8geyBlbWFpbHM6IHRydWUgfSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB2YWxpZGF0b3IgaW5wdXRzIGNoYW5nZS5cbiAgICovXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xuICB9XG59XG4iXX0=