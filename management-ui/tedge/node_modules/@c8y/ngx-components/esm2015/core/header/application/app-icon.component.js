import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { find, keys, get, assign, isEmpty } from 'lodash-es';
import { OptionsService } from '../../common/options.service';
let AppIconComponent = class AppIconComponent {
    constructor(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    ngOnInit() {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        const iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.mapFontAwesomeToDelightIcons(this.model.appIcon),
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(c => !!c);
        this.model.appNameAbbr = this.name.substr(0, 2);
    }
    findStaticIcon() {
        const contextPath = this.contextPath || this.name;
        const appContextPathNormalized = find(keys(this.c8yAppIconsList), cp => {
            return contextPath.indexOf(cp) > -1;
        });
        const appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? `c8y-icon-${appIcon}` : undefined;
    }
    iconFromAppDefinition() {
        const app = this.app || this.options;
        const iconClassProperty = ['icon', 'class'];
        const iconClass = get(app, iconClassProperty) || get(app, ['manifest', ...iconClassProperty]);
        return iconClass;
    }
    iconUrlFromAppDefinition() {
        const app = this.app || this.options;
        const iconUrlProperty = ['icon', 'url'];
        const iconUrl = get(app, iconUrlProperty) || get(app, ['manifest', ...iconUrlProperty]);
        return iconUrl;
    }
    mapFontAwesomeToDelightIcons(iconClasses) {
        if (!iconClasses) {
            return;
        }
        const regex = /fa-/gi;
        return iconClasses.replace(regex, 'dlt-c8y-icon-');
    }
};
AppIconComponent.ctorParameters = () => [
    { type: OptionsService }
];
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "contextPath", void 0);
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input()
], AppIconComponent.prototype, "app", void 0);
AppIconComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-app-icon',
        template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
        host: { class: 'c8y-app-icon' }
    })
], AppIconComponent);
export { AppIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvaGVhZGVyL2FwcGxpY2F0aW9uL2FwcC1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTzlELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBK0IzQixZQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTdCbEMsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUczQixVQUFLLEdBQUc7WUFDTixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBRU0sb0JBQWUsR0FBRztZQUN4QixnQkFBZ0IsRUFBRSxtQkFBbUI7WUFDckMsbUJBQW1CLEVBQUUsbUJBQW1CO1lBQ3hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtZQUNyQyxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7UUFFTSxVQUFLLEdBQVksS0FBSyxDQUFDO1FBRXZCLHFCQUFnQixHQUFHO1lBQ3pCLG1CQUFtQixFQUFFLFdBQVc7WUFDaEMsaUJBQWlCLEVBQUUsU0FBUztZQUM1QixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQztJQUU0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QUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGLENBQUE7O1lBakQ4QixjQUFjOztBQTlCbEM7SUFBUixLQUFLLEVBQUU7cURBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFOzhDQUFtQjtBQUNsQjtJQUFSLEtBQUssRUFBRTs2Q0FBVTtBQUhQLGdCQUFnQjtJQUw1QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4Qiw4TEFBd0M7UUFDeEMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRTtLQUNoQyxDQUFDO0dBQ1csZ0JBQWdCLENBZ0Y1QjtTQWhGWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZpbmQsIGtleXMsIGdldCwgYXNzaWduLCBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IE9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29tbW9uL29wdGlvbnMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hcHAtaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hcHAtaWNvbi5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHsgY2xhc3M6ICdjOHktYXBwLWljb24nIH1cbn0pXG5leHBvcnQgY2xhc3MgQXBwSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbnRleHRQYXRoOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBhcHA6IGFueTtcblxuICBtb2RlbCA9IHtcbiAgICBhcHBJY29uOiAnJyxcbiAgICBzaG93SWNvbjogdHJ1ZSxcbiAgICBpY29uQ2xhc3M6IFsnYzh5LWljb24nXSxcbiAgICBhcHBOYW1lQWJicjogJycsXG4gICAgaWNvblN0eWxlOiB7fVxuICB9O1xuXG4gIHByaXZhdGUgYzh5QXBwSWNvbnNMaXN0ID0ge1xuICAgIGFuYWx5dGljc2J1aWxkZXI6ICdhbmFseXRpY3MtYnVpbGRlcicsXG4gICAgJ2FuYWx5dGljcy1idWlsZGVyJzogJ2FuYWx5dGljcy1idWlsZGVyJyxcbiAgICBjb2NrcGl0OiAnY29ja3BpdCcsXG4gICAgZGV2aWNlbWFuYWdlbWVudDogJ2RldmljZS1tYW5hZ2VtZW50JyxcbiAgICBhZG1pbmlzdHJhdGlvbjogJ2FkbWluaXN0cmF0aW9uJyxcbiAgICBhcGFtYWVwbDogJ2FwYW1hLWVwbCdcbiAgfTtcblxuICBwcml2YXRlIHdoaXRlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBkZWZhdWx0SWNvblN0eWxlID0ge1xuICAgICdiYWNrZ3JvdW5kLXJlcGVhdCc6ICduby1yZXBlYXQnLFxuICAgICdiYWNrZ3JvdW5kLXNpemUnOiAnY29udGFpbicsXG4gICAgaGVpZ2h0OiAnMzZweCcsXG4gICAgd2lkdGg6ICczNnB4J1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogT3B0aW9uc1NlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tb2RlbC5hcHBJY29uID0gdGhpcy5pY29uRnJvbUFwcERlZmluaXRpb24oKSB8fCB0aGlzLmZpbmRTdGF0aWNJY29uKCk7XG4gICAgY29uc3QgaWNvblVybCA9IHRoaXMuaWNvblVybEZyb21BcHBEZWZpbml0aW9uKCk7XG4gICAgaWYgKGljb25VcmwpIHtcbiAgICAgIHRoaXMubW9kZWwuaWNvblN0eWxlID0gYXNzaWduKHRoaXMuZGVmYXVsdEljb25TdHlsZSwge1xuICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IGljb25VcmxcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLm1vZGVsLnNob3dJY29uID0gISF0aGlzLm1vZGVsLmFwcEljb24gfHwgIWlzRW1wdHkodGhpcy5tb2RlbC5pY29uU3R5bGUpO1xuICAgIHRoaXMubW9kZWwuaWNvbkNsYXNzID0gW1xuICAgICAgJ2M4eS1pY29uJyxcbiAgICAgIHRoaXMubWFwRm9udEF3ZXNvbWVUb0RlbGlnaHRJY29ucyh0aGlzLm1vZGVsLmFwcEljb24pLFxuICAgICAgdGhpcy53aGl0ZSA/ICdjOHktaWNvbi13aGl0ZScgOiAnYzh5LWljb24tZHVvY29sb3InXG4gICAgXS5maWx0ZXIoYyA9PiAhIWMpO1xuICAgIHRoaXMubW9kZWwuYXBwTmFtZUFiYnIgPSB0aGlzLm5hbWUuc3Vic3RyKDAsIDIpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kU3RhdGljSWNvbigpIHtcbiAgICBjb25zdCBjb250ZXh0UGF0aCA9IHRoaXMuY29udGV4dFBhdGggfHwgdGhpcy5uYW1lO1xuICAgIGNvbnN0IGFwcENvbnRleHRQYXRoTm9ybWFsaXplZCA9IGZpbmQoa2V5cyh0aGlzLmM4eUFwcEljb25zTGlzdCksIGNwID0+IHtcbiAgICAgIHJldHVybiBjb250ZXh0UGF0aC5pbmRleE9mKGNwKSA+IC0xO1xuICAgIH0pO1xuICAgIGNvbnN0IGFwcEljb24gPSB0aGlzLmM4eUFwcEljb25zTGlzdFthcHBDb250ZXh0UGF0aE5vcm1hbGl6ZWRdO1xuICAgIHJldHVybiBhcHBJY29uID8gYGM4eS1pY29uLSR7YXBwSWNvbn1gIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBpY29uRnJvbUFwcERlZmluaXRpb24oKSB7XG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHAgfHwgdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGljb25DbGFzc1Byb3BlcnR5ID0gWydpY29uJywgJ2NsYXNzJ107XG4gICAgY29uc3QgaWNvbkNsYXNzID0gZ2V0KGFwcCwgaWNvbkNsYXNzUHJvcGVydHkpIHx8IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uQ2xhc3NQcm9wZXJ0eV0pO1xuICAgIHJldHVybiBpY29uQ2xhc3M7XG4gIH1cblxuICBwcml2YXRlIGljb25VcmxGcm9tQXBwRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcCB8fCB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaWNvblVybFByb3BlcnR5ID0gWydpY29uJywgJ3VybCddO1xuICAgIGNvbnN0IGljb25VcmwgPSBnZXQoYXBwLCBpY29uVXJsUHJvcGVydHkpIHx8IGdldChhcHAsIFsnbWFuaWZlc3QnLCAuLi5pY29uVXJsUHJvcGVydHldKTtcbiAgICByZXR1cm4gaWNvblVybDtcbiAgfVxuXG4gIHByaXZhdGUgbWFwRm9udEF3ZXNvbWVUb0RlbGlnaHRJY29ucyhpY29uQ2xhc3Nlczogc3RyaW5nKSB7XG4gICAgaWYgKCFpY29uQ2xhc3Nlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZWdleCA9IC9mYS0vZ2k7XG4gICAgcmV0dXJuIGljb25DbGFzc2VzLnJlcGxhY2UocmVnZXgsICdkbHQtYzh5LWljb24tJyk7XG4gIH1cbn1cbiJdfQ==