var I18nModule_1;
import * as tslib_1 from "tslib";
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { LOCALE_ID, NgModule } from '@angular/core';
import { MissingTranslationHandler, TranslateService as NgxTranslateService, TranslateCompiler, TranslateFakeCompiler, TranslateLoader, TranslateParser, TranslateStore, USE_DEFAULT_LANG, USE_STORE, USE_EXTEND, DEFAULT_LANGUAGE } from '@ngx-translate/core';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { LANGUAGES } from './languages';
import { LOCALE_PATH } from './locale.path';
import { MissingTranslationCustomHandler } from './missing-translation-custom.handler';
import { MESSAGES } from './pattern-messages.data';
import { HOOK_PATTERN_MESSAGES } from './patterns-message.hook';
import { TranslateCustomLoader } from './translate.loader';
import { TranslateParserCustom } from './translate.parser';
import { C8yTranslateModule } from './c8y-translate.module';
import { CachedLocaleDictionaryService } from './cached-locale-dictionary.service';
// Load these as a side effect
try {
    // tslint:disable:no-var-requires
    require('@c8y/ngx-components/locales/de.po');
    require('@c8y/ngx-components/locales/en.po');
    require('@c8y/ngx-components/locales/es.po');
    require('@c8y/ngx-components/locales/fr.po');
    require('@c8y/ngx-components/locales/ja_JP.po');
    // tslint:enable:no-var-requires
}
catch (e) {
    // empty block
}
const angularLocalesLanguageMap = { en: 'en-GB', 'en-EN': 'en-GB' };
// AoT requires an exported function for factories
export function translateLoaderFactory(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages) {
    return new TranslateCustomLoader(httpClient, optionsService, cachedLocaleDictionaryService, localePath, languages);
}
export function localePathFactory(options) {
    return options.localePath;
}
export function languagesFactory(options) {
    return options.languages;
}
export function localeId(appStateService) {
    return {
        get lang() {
            return getAngularLocalesLanguageString(appStateService.state.lang || 'en');
        },
        toLowerCase() {
            return this.lang.toLowerCase();
        },
        toString() {
            return this.lang;
        }
    };
}
export function getAngularLocalesLanguageString(language) {
    return angularLocalesLanguageMap[language] || language;
}
/**
 * The angular module definition for i18n (translation).
 * @exports I18nModule
 */
let I18nModule = I18nModule_1 = class I18nModule {
    static providers() {
        return [
            { provide: LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
            { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true },
            { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
            { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
            // Extracted from projects/ngx-translate/core/src/public_api.ts
            {
                provide: TranslateLoader,
                useFactory: translateLoaderFactory,
                deps: [HttpClient, OptionsService, CachedLocaleDictionaryService, LOCALE_PATH, LANGUAGES]
            },
            { provide: TranslateCompiler, useClass: TranslateFakeCompiler },
            { provide: TranslateParser, useClass: TranslateParserCustom },
            { provide: MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
            TranslateStore,
            NgxTranslateService,
            { provide: USE_STORE, useValue: undefined },
            { provide: USE_DEFAULT_LANG, useValue: undefined },
            { provide: USE_EXTEND, useValue: false },
            { provide: DEFAULT_LANGUAGE, useValue: undefined }
        ];
    }
    static forRoot() {
        return {
            ngModule: I18nModule_1,
            providers: I18nModule_1.providers()
        };
    }
};
I18nModule = I18nModule_1 = tslib_1.__decorate([
    NgModule({
        exports: [C8yTranslateModule],
        imports: [HttpClientModule]
    })
], I18nModule);
export { I18nModule };
//# sourceMappingURL=data:application/json;base64,