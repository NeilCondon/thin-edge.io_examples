var TranslateService_1;
import * as tslib_1 from "tslib";
import { registerLocaleData } from '@angular/common';
import { Injectable } from '@angular/core';
import { TranslateService as NgxTranslateService } from '@ngx-translate/core';
import { isString, keys } from 'lodash-es';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { getAngularLocalesLanguageString } from './i18n.module';
import { loadLocale } from './load-locale';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/ui-state.service";
import * as i3 from "../common/options.service";
/**
 * A service to manage the language of the application.
 */
let TranslateService = TranslateService_1 = class TranslateService {
    constructor(ngxTranslate, ui, options) {
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(k => this.langsDetail[k]);
        this.DEFAULT_SEPARATOR = '_';
        const queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    static defaultLang() {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    }
    /**
     * Switches to given language.
     * @param lang The language as two-letter code.
     */
    switchToLanguage(lang) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const moduleLang = lang.replace('_', '-');
            try {
                yield this.loadLocales(moduleLang);
            }
            catch (e) {
                const lessSpecificModuleLang = moduleLang.split('-').shift();
                if (lessSpecificModuleLang !== moduleLang) {
                    yield this.loadLocales(lessSpecificModuleLang);
                }
                else {
                    throw e;
                }
            }
            this.setLanguage(lang);
        });
    }
    loadLocales(moduleLang) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const module = yield loadLocale(getAngularLocalesLanguageString(moduleLang));
            registerLocaleData(module.default);
        });
    }
    setLanguage(lang) {
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(() => {
            this.ui.state$.next(Object.assign({}, this.ui.state, { lang }));
        });
    }
    /**
     * Finds the first supported language
     */
    firstSupportedLanguage() {
        const languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean)
            .map(lang => lang.toLowerCase());
        const preferredLanguage = languages.find(lang => this.getSupported(lang));
        return this.getSupported(preferredLanguage);
    }
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    convertToLanguageCodePO(lang) {
        const sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        const [langMain, langSpecific] = lang.split(sep);
        const langLast = langSpecific ? `${this.DEFAULT_SEPARATOR}${langSpecific}` : '';
        return `${langMain}${langLast}`;
    }
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    getNativeLanguage(lang) {
        const langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    }
    saveInLocalStorage(lang) {
        window.localStorage.setItem(TranslateService_1.SAVE_LANGUAGE_KEY, lang);
    }
    getSupported(lang) {
        const exact = this.langs.find(l => l.toLowerCase() === lang);
        if (exact) {
            return exact;
        }
        return this.langs.find(l => this.getLessSpecific(l.toLowerCase()) === this.getLessSpecific(lang) || l.startsWith(lang));
    }
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    queryStringLang() {
        return this.getQueryParameter('lang');
    }
    getLessSpecific(lang) {
        return isString(lang)
            ? lang.replace('-', this.DEFAULT_SEPARATOR).split(this.DEFAULT_SEPARATOR)[0]
            : '';
    }
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    localStorageLang() {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    }
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    browserLangs() {
        const { navigator } = window;
        const browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce((languages, property) => {
            const propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    }
    getQueryParameter(queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        const query = window.location.search.substring(1);
        let result;
        query.split('&').find(pair => {
            const [key, value] = pair.split('=');
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    }
};
TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
TranslateService.ctorParameters = () => [
    { type: NgxTranslateService },
    { type: AppStateService },
    { type: OptionsService }
];
TranslateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i3.OptionsService)); }, token: TranslateService, providedIn: "root" });
TranslateService = TranslateService_1 = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], TranslateService);
export { TranslateService };
//# sourceMappingURL=data:application/json;base64,