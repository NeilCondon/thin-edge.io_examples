import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { Status, statusAlert, statusIcons } from '../common/status.model';
let ConfirmModalComponent = class ConfirmModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.status = Status.INFO;
        this._labels = {
            ok: 'OK',
            cancel: 'Cancel'
        };
        this.result = new Promise((resolve, reject) => {
            this.dismiss = () => {
                reject();
                this.modal.hide();
            };
            this.close = () => {
                resolve(true);
                this.modal.hide();
            };
        });
    }
    set labels(labels) {
        const { ok = 'OK', cancel = 'Cancel' } = labels || {};
        this._labels = { ok, cancel };
    }
    get labels() {
        return this._labels;
    }
    get classIcon() {
        return `dlt-c8y-icon-${statusIcons[this.status]}`;
    }
    get classAlert() {
        return statusAlert[this.status];
    }
    ngOnDestroy() {
        this.dismiss();
    }
};
ConfirmModalComponent.ctorParameters = () => [
    { type: BsModalRef }
];
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "body", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "status", void 0);
tslib_1.__decorate([
    Input()
], ConfirmModalComponent.prototype, "labels", null);
ConfirmModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-confirm-modal',
        template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"m-b-16\" *ngIf=\"title\">\n    <i class=\"dlt-c8y-icon\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-break-word\">{{ body | translate }}</p>\n  <ng-content></ng-content>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button title=\"{{ labels.ok | translate }}\" class=\"btn btn-primary\" (click)=\"close()\">\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
    })
], ConfirmModalComponent);
export { ConfirmModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9tb2RhbC9tb2RhbC1jb25maXJtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBYyxNQUFNLHdCQUF3QixDQUFDO0FBY3RGLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBaUJoQyxZQUFvQixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBWDVCLFdBQU0sR0FBZSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBWXhDLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixFQUFFLEVBQUUsSUFBSTtZQUNSLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO2dCQUNsQixNQUFNLEVBQUUsQ0FBQztnQkFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3BCLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO2dCQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUF6QlEsSUFBSSxNQUFNLENBQUMsTUFBbUI7UUFDckMsTUFBTSxFQUFFLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFvQkQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxnQkFBZ0IsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztDQUNGLENBQUE7O1lBNUI0QixVQUFVOztBQWI1QjtJQUFSLEtBQUssRUFBRTtvREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFO21EQUFjO0FBQ2I7SUFBUixLQUFLLEVBQUU7cURBQWtDO0FBQ2pDO0lBQVIsS0FBSyxFQUFFO21EQUdQO0FBVlUscUJBQXFCO0lBSmpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7UUFDN0Isa3ZCQUE2QztLQUM5QyxDQUFDO0dBQ1cscUJBQXFCLENBNkNqQztTQTdDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IFN0YXR1cywgc3RhdHVzQWxlcnQsIHN0YXR1c0ljb25zLCBTdGF0dXNUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBNb2RhbExhYmVscyB9IGZyb20gJy4uL3NlbGVjdC1tb2RhbC9zZWxlY3QtbW9kYWwubW9kZWwnO1xuXG4vKipcbiAqIExhYmVscyB0byBiZSB1c2VkIGluIHRoZSBzZWxlY3Rpb24gbW9kYWwuXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGdvaW5nIHRvIGJlIHJlbW92ZWQgYWZ0ZXIgMTAwNy43LjAuIFVzZSBNb2RhbExhYmVscyBpbnN0ZWFkLlxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWVtcHR5LWludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBJTGFiZWxzIGV4dGVuZHMgTW9kYWxMYWJlbHMge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWNvbmZpcm0tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwtY29uZmlybS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcmVzdWx0OiBQcm9taXNlPGJvb2xlYW4+O1xuICBkaXNtaXNzOiAoKSA9PiB2b2lkO1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgYm9keTogc3RyaW5nO1xuICBASW5wdXQoKSBzdGF0dXM6IFN0YXR1c1R5cGUgPSBTdGF0dXMuSU5GTztcbiAgQElucHV0KCkgc2V0IGxhYmVscyhsYWJlbHM6IE1vZGFsTGFiZWxzKSB7XG4gICAgY29uc3QgeyBvayA9ICdPSycsIGNhbmNlbCA9ICdDYW5jZWwnIH0gPSBsYWJlbHMgfHwge307XG4gICAgdGhpcy5fbGFiZWxzID0geyBvaywgY2FuY2VsIH07XG4gIH1cblxuICBnZXQgbGFiZWxzKCk6IE1vZGFsTGFiZWxzIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWxzO1xuICB9XG5cbiAgcHJpdmF0ZSBfbGFiZWxzOiBNb2RhbExhYmVscztcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbDogQnNNb2RhbFJlZikge1xuICAgIHRoaXMuX2xhYmVscyA9IHtcbiAgICAgIG9rOiAnT0snLFxuICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgIH07XG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmRpc21pc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgICAgIH07XG4gICAgICB0aGlzLmNsb3NlID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXQgY2xhc3NJY29uKCkge1xuICAgIHJldHVybiBgZGx0LWM4eS1pY29uLSR7c3RhdHVzSWNvbnNbdGhpcy5zdGF0dXNdfWA7XG4gIH1cblxuICBnZXQgY2xhc3NBbGVydCgpIHtcbiAgICByZXR1cm4gc3RhdHVzQWxlcnRbdGhpcy5zdGF0dXNdO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kaXNtaXNzKCk7XG4gIH1cbn1cbiJdfQ==