import { NavigatorNode } from './navigator-node';
/**
 * Root navigator node. Top node in the hierarchy.
 * The root node is used as an anchor point for the rest of the nodes.
 */
export class NavigatorNodeRoot extends NavigatorNode {
    /**
     * Adds top nodes to the navigator tree structure. These nodes are the direct children of the root node.
     * In the case of the cockpit application, such a node is, for example, the "Home" menu entry.
     *
     * @example
     * ```ts
     * const nodeData: NavigatorNodeData = { label: 'Home' } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, a new node will be created and assigned to root.
     * root.addRoot(nodeData);
     *
     * const parentNode: NavigatorNode =  new NavigatorNode({ label: 'Configuration'...});
     * const nodeData: NavigatorNodeData = { label: 'Exports', parent: parentNode } ;
     * const root: NavigatorNodeRoot = new NavigatorNodeRoot();
     *
     * // Based on the node data, parent node will be directly assigned to the root node, and newly created child node
     * // will be added to the parent node.
     * root.add(nodeData);
     *
     * ```
     *
     * @param {Partial<NavigatorNodeData>} nodeData Data on the basis of which a new node is created.
     */
    addRoot(nodeData) {
        let duplicate;
        if (nodeData.preventDuplicates) {
            duplicate = this.find(({ path, parents, label }) => {
                return (path === nodeData.path &&
                    label === nodeData.label &&
                    parents.some(p => p.label === nodeData.parent));
            });
            if (duplicate && !duplicate.hidden) {
                duplicate.routerLinkExact = false;
                return duplicate;
            }
        }
        const { parent } = nodeData;
        const node = this.createNode(nodeData);
        let localParent;
        if (parent) {
            if (typeof parent === 'object') {
                localParent = this.find(parent.label);
                if (localParent) {
                    localParent.update(parent);
                }
            }
            else if (typeof parent === 'string' || typeof parent === 'function') {
                localParent = this.find(parent);
            }
            if (!localParent) {
                localParent = this.createNode(parent);
                if (!this.find(n => localParent === n)) {
                    this.add(localParent);
                }
            }
        }
        (localParent || this).add(node);
        return node;
    }
    /**
     * Creates a new navigator node.
     * @param nodeData The data that serves as the basis for creating a new node.
     */
    createNode(nodeData) {
        if (nodeData instanceof NavigatorNode) {
            return nodeData;
        }
        if (typeof nodeData === 'string') {
            return new NavigatorNode({ label: nodeData });
        }
        if (typeof nodeData === 'object') {
            return new NavigatorNode(Object.assign({}, nodeData, { parent: undefined }));
        }
        throw new Error('Wrong type of node data');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdG9yLW5vZGUtcm9vdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL25hdmlnYXRvci9uYXZpZ2F0b3Itbm9kZS1yb290LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQUNsRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F1Qkc7SUFDSCxPQUFPLENBQUMsUUFBb0M7UUFDMUMsSUFBSSxTQUFTLENBQUM7UUFFZCxJQUFJLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtZQUM5QixTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFO2dCQUNqRCxPQUFPLENBQ0wsSUFBSSxLQUFLLFFBQVEsQ0FBQyxJQUFJO29CQUN0QixLQUFLLEtBQUssUUFBUSxDQUFDLEtBQUs7b0JBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FDL0MsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO2dCQUNsQyxTQUFTLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztnQkFDbEMsT0FBTyxTQUFTLENBQUM7YUFDbEI7U0FDRjtRQUVELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUM7UUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsQ0FBQztRQUVoQixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM5QixXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksV0FBVyxFQUFFO29CQUNmLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzVCO2FBQ0Y7aUJBQU0sSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxFQUFFO2dCQUNyRSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNqQztZQUVELElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2hCLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDdkI7YUFDRjtTQUNGO1FBRUQsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVUsQ0FBQyxRQUE2RDtRQUN0RSxJQUFJLFFBQVEsWUFBWSxhQUFhLEVBQUU7WUFDckMsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLElBQUksYUFBYSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLElBQUksYUFBYSxtQkFBTSxRQUFRLElBQUUsTUFBTSxFQUFFLFNBQVMsSUFBRyxDQUFDO1NBQzlEO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5hdmlnYXRvck5vZGUgfSBmcm9tICcuL25hdmlnYXRvci1ub2RlJztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGVEYXRhIH0gZnJvbSAnLi9uYXZpZ2F0b3Itbm9kZS1kYXRhJztcblxuLyoqXG4gKiBSb290IG5hdmlnYXRvciBub2RlLiBUb3Agbm9kZSBpbiB0aGUgaGllcmFyY2h5LlxuICogVGhlIHJvb3Qgbm9kZSBpcyB1c2VkIGFzIGFuIGFuY2hvciBwb2ludCBmb3IgdGhlIHJlc3Qgb2YgdGhlIG5vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgTmF2aWdhdG9yTm9kZVJvb3QgZXh0ZW5kcyBOYXZpZ2F0b3JOb2RlIHtcbiAgLyoqXG4gICAqIEFkZHMgdG9wIG5vZGVzIHRvIHRoZSBuYXZpZ2F0b3IgdHJlZSBzdHJ1Y3R1cmUuIFRoZXNlIG5vZGVzIGFyZSB0aGUgZGlyZWN0IGNoaWxkcmVuIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEluIHRoZSBjYXNlIG9mIHRoZSBjb2NrcGl0IGFwcGxpY2F0aW9uLCBzdWNoIGEgbm9kZSBpcywgZm9yIGV4YW1wbGUsIHRoZSBcIkhvbWVcIiBtZW51IGVudHJ5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBub2RlRGF0YTogTmF2aWdhdG9yTm9kZURhdGEgPSB7IGxhYmVsOiAnSG9tZScgfSA7XG4gICAqIGNvbnN0IHJvb3Q6IE5hdmlnYXRvck5vZGVSb290ID0gbmV3IE5hdmlnYXRvck5vZGVSb290KCk7XG4gICAqXG4gICAqIC8vIEJhc2VkIG9uIHRoZSBub2RlIGRhdGEsIGEgbmV3IG5vZGUgd2lsbCBiZSBjcmVhdGVkIGFuZCBhc3NpZ25lZCB0byByb290LlxuICAgKiByb290LmFkZFJvb3Qobm9kZURhdGEpO1xuICAgKlxuICAgKiBjb25zdCBwYXJlbnROb2RlOiBOYXZpZ2F0b3JOb2RlID0gIG5ldyBOYXZpZ2F0b3JOb2RlKHsgbGFiZWw6ICdDb25maWd1cmF0aW9uJy4uLn0pO1xuICAgKiBjb25zdCBub2RlRGF0YTogTmF2aWdhdG9yTm9kZURhdGEgPSB7IGxhYmVsOiAnRXhwb3J0cycsIHBhcmVudDogcGFyZW50Tm9kZSB9IDtcbiAgICogY29uc3Qgcm9vdDogTmF2aWdhdG9yTm9kZVJvb3QgPSBuZXcgTmF2aWdhdG9yTm9kZVJvb3QoKTtcbiAgICpcbiAgICogLy8gQmFzZWQgb24gdGhlIG5vZGUgZGF0YSwgcGFyZW50IG5vZGUgd2lsbCBiZSBkaXJlY3RseSBhc3NpZ25lZCB0byB0aGUgcm9vdCBub2RlLCBhbmQgbmV3bHkgY3JlYXRlZCBjaGlsZCBub2RlXG4gICAqIC8vIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHBhcmVudCBub2RlLlxuICAgKiByb290LmFkZChub2RlRGF0YSk7XG4gICAqXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge1BhcnRpYWw8TmF2aWdhdG9yTm9kZURhdGE+fSBub2RlRGF0YSBEYXRhIG9uIHRoZSBiYXNpcyBvZiB3aGljaCBhIG5ldyBub2RlIGlzIGNyZWF0ZWQuXG4gICAqL1xuICBhZGRSb290KG5vZGVEYXRhOiBQYXJ0aWFsPE5hdmlnYXRvck5vZGVEYXRhPikge1xuICAgIGxldCBkdXBsaWNhdGU7XG5cbiAgICBpZiAobm9kZURhdGEucHJldmVudER1cGxpY2F0ZXMpIHtcbiAgICAgIGR1cGxpY2F0ZSA9IHRoaXMuZmluZCgoeyBwYXRoLCBwYXJlbnRzLCBsYWJlbCB9KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcGF0aCA9PT0gbm9kZURhdGEucGF0aCAmJlxuICAgICAgICAgIGxhYmVsID09PSBub2RlRGF0YS5sYWJlbCAmJlxuICAgICAgICAgIHBhcmVudHMuc29tZShwID0+IHAubGFiZWwgPT09IG5vZGVEYXRhLnBhcmVudClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGR1cGxpY2F0ZSAmJiAhZHVwbGljYXRlLmhpZGRlbikge1xuICAgICAgICBkdXBsaWNhdGUucm91dGVyTGlua0V4YWN0ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBkdXBsaWNhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgeyBwYXJlbnQgfSA9IG5vZGVEYXRhO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUobm9kZURhdGEpO1xuICAgIGxldCBsb2NhbFBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhbFBhcmVudCA9IHRoaXMuZmluZChwYXJlbnQubGFiZWwpO1xuICAgICAgICBpZiAobG9jYWxQYXJlbnQpIHtcbiAgICAgICAgICBsb2NhbFBhcmVudC51cGRhdGUocGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcGFyZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvY2FsUGFyZW50ID0gdGhpcy5maW5kKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbG9jYWxQYXJlbnQpIHtcbiAgICAgICAgbG9jYWxQYXJlbnQgPSB0aGlzLmNyZWF0ZU5vZGUocGFyZW50KTtcbiAgICAgICAgaWYgKCF0aGlzLmZpbmQobiA9PiBsb2NhbFBhcmVudCA9PT0gbikpIHtcbiAgICAgICAgICB0aGlzLmFkZChsb2NhbFBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAobG9jYWxQYXJlbnQgfHwgdGhpcykuYWRkKG5vZGUpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgbmF2aWdhdG9yIG5vZGUuXG4gICAqIEBwYXJhbSBub2RlRGF0YSBUaGUgZGF0YSB0aGF0IHNlcnZlcyBhcyB0aGUgYmFzaXMgZm9yIGNyZWF0aW5nIGEgbmV3IG5vZGUuXG4gICAqL1xuICBjcmVhdGVOb2RlKG5vZGVEYXRhOiBzdHJpbmcgfCBvYmplY3QgfCBOYXZpZ2F0b3JOb2RlRGF0YSB8IE5hdmlnYXRvck5vZGUpIHtcbiAgICBpZiAobm9kZURhdGEgaW5zdGFuY2VvZiBOYXZpZ2F0b3JOb2RlKSB7XG4gICAgICByZXR1cm4gbm9kZURhdGE7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygbm9kZURhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IE5hdmlnYXRvck5vZGUoeyBsYWJlbDogbm9kZURhdGEgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygbm9kZURhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbmV3IE5hdmlnYXRvck5vZGUoeyAuLi5ub2RlRGF0YSwgcGFyZW50OiB1bmRlZmluZWQgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignV3JvbmcgdHlwZSBvZiBub2RlIGRhdGEnKTtcbiAgfVxufVxuIl19