var NavigatorNodeComponent_1;
import * as tslib_1 from "tslib";
// tslint:disable-next-line:max-line-length
import { Component, ComponentFactoryResolver, Input, QueryList, ViewChild, ViewChildren, ViewContainerRef, Output, EventEmitter, OnDestroy } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { NavigatorIconComponent } from './navigator-icon.component';
import { NavigatorService } from './navigator.service';
import { PopoverConfirmComponent } from '../modal/popover-confirm.component';
/**
 * Navigator node renderer.
 */
let NavigatorNodeComponent = NavigatorNodeComponent_1 = class NavigatorNodeComponent {
    constructor(componentFactoryResolver, navigator) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.navigator = navigator;
        /**
         * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
         *
         * The type of event depends on where you click on the navigator node:
         * * clicking the icon will broadcast the event "icon",
         * * clicking the expander will broadcast the event "expander",
         * * clicking the label will broadcast the event "link".
         */
        this.nodeClick = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        this.childrenNodes.forEach(n => (n.parentNode = this));
        this.viewInitTimeout = setTimeout(() => {
            this.updateIcon();
            this.openOnFirstUrl();
            this.expandParentIfActive();
            this.node.confirm = this.confirm;
        });
    }
    /**
     * Expands the navigator node when the URL matches the path provided in the node.
     */
    openOnFirstUrl() {
        if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
            this.expandCollapse(true);
        }
    }
    /**
     * Returns the expander title.
     */
    get expandTitle() {
        return !this.node.open ? 'Expand' : 'Collapse';
    }
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from = 'link', $event) {
        let open;
        switch (from) {
            case "expander" /* EXPANDER */:
                if ($event) {
                    $event.stopPropagation();
                    $event.preventDefault();
                }
                open = !this.node.open;
                break;
            case "icon" /* ICON */:
            case "link" /* LINK */:
                open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
                break;
        }
        this.handleExpandCollapse(open, from, $event);
        this.nodeClick.emit(from);
    }
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {boolean} recursive Open or close the children.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open, recursive, forNode = {}) {
        this.node.open = open;
        if (recursive) {
            this.childrenNodes.forEach(n => n.expandCollapse(open, recursive));
        }
        forNode.open = open;
        this.node.click(forNode);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        if (this.node) {
            this.node.destroy();
        }
    }
    handleExpandCollapse(open, from, $event) {
        if (open === this.node.open ||
            (this.node.path && !open && from !== "expander" /* EXPANDER */)) {
            return;
        }
        this.expandCollapse(open, false, { [from]: true, $event });
    }
    expandParentIfActive() {
        if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
            this.parentNode.expandCollapse(true);
        }
    }
    updateIcon() {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    }
    updateIconComponent() {
        let componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        const iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        const componentRef = this.iconSlot.createComponent(iconComponentFactory);
        componentRef.instance.node = this.node;
    }
    updateIconTemplate() {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate);
    }
};
NavigatorNodeComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: NavigatorService }
];
tslib_1.__decorate([
    ViewChild('icon', { read: ViewContainerRef, static: false })
], NavigatorNodeComponent.prototype, "iconSlot", void 0);
tslib_1.__decorate([
    Input()
], NavigatorNodeComponent.prototype, "node", void 0);
tslib_1.__decorate([
    Input()
], NavigatorNodeComponent.prototype, "isRoot", void 0);
tslib_1.__decorate([
    ViewChild(RouterLinkActive, { static: false })
], NavigatorNodeComponent.prototype, "routerLinkActive", void 0);
tslib_1.__decorate([
    ViewChildren(NavigatorNodeComponent_1)
], NavigatorNodeComponent.prototype, "childrenNodes", void 0);
tslib_1.__decorate([
    Output()
], NavigatorNodeComponent.prototype, "nodeClick", void 0);
tslib_1.__decorate([
    ViewChild(PopoverConfirmComponent, { static: false })
], NavigatorNodeComponent.prototype, "confirm", void 0);
NavigatorNodeComponent = NavigatorNodeComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'c8y-navigator-node-display',
        template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [attr.id]=\"isRoot ? node.id : undefined\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node-display\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node-display>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"icon-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div (click)=\"click('icon', $event)\">\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
    })
], NavigatorNodeComponent);
export { NavigatorNodeComponent };
//# sourceMappingURL=data:application/json;base64,