import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { flatten } from 'lodash-es';
import { forkJoin, from, isObservable, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { NavigatorNode } from '../navigator';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
let ProviderConfigurationNodeFactory = class ProviderConfigurationNodeFactory {
    constructor(config, injector) {
        this.injector = injector;
        this.config = flatten(config);
    }
    get() {
        if (!this.config || !this.config.length) {
            return;
        }
        if (!this.nodes) {
            const canActivate = this.config
                .map(c => c.navigation.canActivate && c.navigation.canActivate.length
                ? this.getGuards(c)
                : undefined)
                .map(this.checkCanActivate.bind(this));
            return forkJoin(canActivate).pipe(map((canActivateResult) => this.config
                .map((c, index) => canActivateResult[index] ? new NavigatorNode(c.navigation) : undefined)
                .filter(el => !!el)), tap(nodes => (this.nodes = nodes)));
        }
        return this.nodes;
    }
    checkCanActivate(ca) {
        if (!!ca && ca.length) {
            const canActivateResult = ca
                .map((canActivate) => canActivate.canActivate(undefined, undefined))
                .map(this.wrapIntoObservable.bind(this));
            return forkJoin(canActivateResult).pipe(map((caResult) => caResult.reduce((acc, curr) => acc && curr)));
        }
        return of(true);
    }
    isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
    }
    wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    }
    getGuards(c) {
        return c.tab && c.tab.canActivate && c.tab.canActivate.length
            ? [
                ...c.navigation.canActivate.map(ca => this.injector.get(ca)),
                ...c.tab.canActivate.map(ca => this.injector.get(ca))
            ]
            : c.navigation.canActivate.map(ca => this.injector.get(ca));
    }
    getNodeTabPath(nodePath, tabPath) {
        return `${nodePath.replace(/^\/|\/$/g, '')}/${tabPath.replace(/^\/|\/$/g, '')}`;
    }
};
ProviderConfigurationNodeFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
    { type: Injector }
];
ProviderConfigurationNodeFactory = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Optional()),
    tslib_1.__param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
], ProviderConfigurationNodeFactory);
export { ProviderConfigurationNodeFactory };
//# sourceMappingURL=data:application/json;base64,