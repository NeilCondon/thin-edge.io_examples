import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { ConditionalTabsOutletComponent } from '@c8y/ngx-components/';
import { flatten, get, uniqBy } from 'lodash-es';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationComponent } from './provider-configuration.component';
let ProviderConfigurationRouteFactory = class ProviderConfigurationRouteFactory {
    constructor(config) {
        this.config = flatten(config);
    }
    get() {
        const navigationRoutes = uniqBy(this.config.filter(c => c.tab), 'navigation.path').map(c => {
            return {
                path: c.navigation.path,
                component: ConditionalTabsOutletComponent
            };
        });
        const navigationWithTabsRoutes = this.config.map(c => ({
            path: c.tab
                ? `${c.navigation.path.replace(/^\/|\/$/g, '')}/${c.tab.path.replace(/^\/|\/$/g, '')}`
                : c.navigation.path,
            component: ProviderConfigurationComponent,
            canActivate: [
                ...(c.navigation.canActivate || []),
                ...(get(c, 'tab.canActivate') || [])
            ].filter(g => !!g),
            data: {
                layout: c.layout,
                endpoint: c.endpoint
            }
        }));
        return [...navigationRoutes, ...navigationWithTabsRoutes];
    }
};
ProviderConfigurationRouteFactory.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] }
];
ProviderConfigurationRouteFactory = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
], ProviderConfigurationRouteFactory);
export { ProviderConfigurationRouteFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi1yb3V0ZS5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvcHJvdmlkZXItY29uZmlndXJhdGlvbi9wcm92aWRlci1jb25maWd1cmF0aW9uLXJvdXRlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHakQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0UsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFHcEYsSUFBYSxpQ0FBaUMsR0FBOUMsTUFBYSxpQ0FBaUM7SUFHNUMsWUFBOEQsTUFBaUM7UUFDN0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELEdBQUc7UUFDRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6RixPQUFPO2dCQUNMLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUk7Z0JBQ3ZCLFNBQVMsRUFBRSw4QkFBOEI7YUFDMUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckQsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHO2dCQUNULENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDdEYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSTtZQUNyQixTQUFTLEVBQUUsOEJBQThCO1lBQ3pDLFdBQVcsRUFBRTtnQkFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO2dCQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNyQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBSSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTtnQkFDaEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO2FBQ3JCO1NBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLHdCQUF3QixDQUFDLENBQUM7SUFDNUQsQ0FBQztDQUNGLENBQUE7O3dDQTdCYyxRQUFRLFlBQUksTUFBTSxTQUFDLDRCQUE0Qjs7QUFIakQsaUNBQWlDO0lBRDdDLFVBQVUsRUFBRTtJQUlFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUE7R0FIbEQsaUNBQWlDLENBZ0M3QztTQWhDWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25kaXRpb25hbFRhYnNPdXRsZXRDb21wb25lbnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzLyc7XG5pbXBvcnQgeyBmbGF0dGVuLCBnZXQsIHVuaXFCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBSb3V0ZUZhY3RvcnkgfSBmcm9tICcuLi9yb3V0ZXInO1xuaW1wb3J0IHsgRHluYW1pY1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi9tb2RlbC9keW5hbWljLXByb3ZpZGVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLWhvb2snO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkgaW1wbGVtZW50cyBSb3V0ZUZhY3Rvcnkge1xuICBwcml2YXRlIGNvbmZpZzogRHluYW1pY1Byb3ZpZGVyQ29uZmlnW107XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHKSBjb25maWc6IER5bmFtaWNQcm92aWRlckNvbmZpZ1tdW10pIHtcbiAgICB0aGlzLmNvbmZpZyA9IGZsYXR0ZW4oY29uZmlnKTtcbiAgfVxuXG4gIGdldCgpIHtcbiAgICBjb25zdCBuYXZpZ2F0aW9uUm91dGVzID0gdW5pcUJ5KHRoaXMuY29uZmlnLmZpbHRlcihjID0+IGMudGFiKSwgJ25hdmlnYXRpb24ucGF0aCcpLm1hcChjID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6IGMubmF2aWdhdGlvbi5wYXRoLFxuICAgICAgICBjb21wb25lbnQ6IENvbmRpdGlvbmFsVGFic091dGxldENvbXBvbmVudFxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG5hdmlnYXRpb25XaXRoVGFic1JvdXRlcyA9IHRoaXMuY29uZmlnLm1hcChjID0+ICh7XG4gICAgICBwYXRoOiBjLnRhYlxuICAgICAgICA/IGAke2MubmF2aWdhdGlvbi5wYXRoLnJlcGxhY2UoL15cXC98XFwvJC9nLCAnJyl9LyR7Yy50YWIucGF0aC5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpfWBcbiAgICAgICAgOiBjLm5hdmlnYXRpb24ucGF0aCxcbiAgICAgIGNvbXBvbmVudDogUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50LFxuICAgICAgY2FuQWN0aXZhdGU6IFtcbiAgICAgICAgLi4uKGMubmF2aWdhdGlvbi5jYW5BY3RpdmF0ZSB8fCBbXSksXG4gICAgICAgIC4uLihnZXQoYywgJ3RhYi5jYW5BY3RpdmF0ZScpIHx8IFtdKVxuICAgICAgXS5maWx0ZXIoZyA9PiAhIWcpLFxuICAgICAgZGF0YToge1xuICAgICAgICBsYXlvdXQ6IGMubGF5b3V0LFxuICAgICAgICBlbmRwb2ludDogYy5lbmRwb2ludFxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHJldHVybiBbLi4ubmF2aWdhdGlvblJvdXRlcywgLi4ubmF2aWdhdGlvbldpdGhUYWJzUm91dGVzXTtcbiAgfVxufVxuIl19