import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ɵdefineHiddenProp } from '@ngx-formly/core';
import { find, get, mapValues, pick } from 'lodash-es';
import { BehaviorSubject, combineLatest, from, merge, of, Subject } from 'rxjs';
import { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { AlertService } from '../alert/alert.service';
import { Permissions, Status } from '../common/index';
import { C8yJSONSchema } from '../dynamic-forms/json-schema/c8y-json-schema.service';
import { ModalService } from '../modal/modal.service';
import { ProviderConfigurationService } from './service/provider-configuration.service';
import { ProviderDefinitionsService } from './service/provider-definitions.service';
let ProviderConfigurationComponent = class ProviderConfigurationComponent {
    constructor(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
        this.permissions = permissions;
        this.activatedRoute = activatedRoute;
        this.modalService = modalService;
        this.alertService = alertService;
        this.providerDefinitionsService = providerDefinitionsService;
        this.providerConfigurationService = providerConfigurationService;
        this.jsonschema = jsonschema;
        this.layout$ = this.activatedRoute.data.pipe(map((config) => config.layout), tap((layout) => (this.layout = layout)), tap((layout) => {
            this.options.formState.disabled = !this.permissions.hasAllRoles(layout.saveRoles);
            this.beforeSaveHook = layout.beforeSaveHook;
        }));
        this.allRoles$ = this.layout$.pipe(map((layout) => [
            ...(layout.deleteRoles || []),
            ...(layout.saveRoles || [])
        ]));
        this.changeProvider$ = new BehaviorSubject(null);
        this.providerInput$ = new BehaviorSubject('');
        this.form = new FormGroup({});
        this.fields = [];
        this.options = {
            formState: {
                disabled: false
            }
        };
        this.reload$ = new BehaviorSubject(null);
        this.updatedConfiguration$ = new Subject();
    }
    ngOnInit() {
        const allProviders$ = from(this.providerDefinitionsService.list()).pipe(map(result => result.data), shareReplay(1));
        this.providers$ = combineLatest(allProviders$, this.providerInput$).pipe(map(([providers, input]) => input
            ? providers.filter(el => el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0)
            : providers), shareReplay(1));
        this.configuration$ = merge(this.updatedConfiguration$, this.reload$.pipe(switchMap(() => from(this.providerConfigurationService.detail()).pipe(catchError(() => of({})))), map(result => result.data))).pipe(map(this.removeEncryptedValues), shareReplay(1));
        this.selectedProvider$ = combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(tap(([_, configuration, newProvider]) => (this.model = newProvider
            ? pick(this.model, 'sms.senderName', 'sms.senderAddress')
            : configuration)), map(([providers, configuration, newProvider]) => newProvider ||
            find(providers, (provider) => this.matchProvider(provider, configuration))), tap((provider) => {
            if (provider) {
                const config = this.jsonschema.toFieldConfig(get(provider, 'schema'));
                if (config.fieldGroup) {
                    config.fieldGroup.forEach((fieldConfig) => {
                        ɵdefineHiddenProp(fieldConfig, '_keyPath', {
                            key: fieldConfig.key,
                            path: [fieldConfig.key]
                        });
                        fieldConfig.expressionProperties = {
                            'templateOptions.disabled': 'formState.disabled'
                        };
                    });
                }
                this.fields = [config];
                this.form = new FormGroup({});
            }
        }), shareReplay(1));
    }
    saveProviderConfiguration() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const modelToSave = !!this.beforeSaveHook
                ? yield this.beforeSaveHook(this.model, this.fields)
                : this.model;
            try {
                const res = yield this.providerConfigurationService.update(modelToSave);
                this.changeProvider$.next(null);
                this.updatedConfiguration$.next(res.data);
                this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                this.form.markAsPristine();
            }
            catch (err) {
                this.alertService.addServerFailure(err);
            }
        });
    }
    deleteProviderConfiguration() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, Status.DANGER, {
                    ok: this.layout.deleteConfigurationModalOkBtnLabel,
                    cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                });
                yield this.providerConfigurationService.delete();
                this.reload$.next();
                this.alertService.success(this.layout.configurationDeletedSuccessMsg);
            }
            catch (err) {
                if (err) {
                    this.alertService.addServerFailure(err);
                }
            }
        });
    }
    removeEncryptedValues(configuration) {
        return mapValues(configuration, value => (value === '<<Encrypted>>' ? undefined : value));
    }
    matchProvider(provider, configuration) {
        return (get(configuration, 'provider') === provider.id ||
            get(configuration, 'providerName') === provider.id);
    }
};
ProviderConfigurationComponent.ctorParameters = () => [
    { type: Permissions },
    { type: ActivatedRoute },
    { type: ModalService },
    { type: AlertService },
    { type: ProviderDefinitionsService },
    { type: ProviderConfigurationService },
    { type: C8yJSONSchema }
];
ProviderConfigurationComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-sms-gateway',
        template: "<c8y-title>\n  {{ (layout$ | async).pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async).cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async).description\" class=\"m-b-8\">\n            {{ (layout$ | async).description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async).providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async).saveRoles)\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async).providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async).providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\" *c8yIfAllowed=\"allRoles$ | async; allowAny\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async).deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"\n            !(configuration$ | async)?.provider && !(configuration$ | async)?.providerName\n          \"\n          title=\"{{ (layout$ | async).deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async).saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async).saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
        providers: [ProviderConfigurationService, ProviderDefinitionsService]
    })
], ProviderConfigurationComponent);
export { ProviderConfigurationComponent };
//# sourceMappingURL=data:application/json;base64,