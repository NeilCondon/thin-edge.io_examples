var ProviderConfigurationModule_1;
import * as tslib_1 from "tslib";
import { forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '../common/common.module';
import { CoreModule } from '../core.module';
import { DynamicFormsModule } from '../dynamic-forms/dynamic-forms.module';
import { HOOK_NAVIGATOR_NODES } from '../navigator';
import { HOOK_ONCE_ROUTE } from '../router';
import { HOOK_TABS } from '../tabs';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
import { ProviderConfigurationNodeFactory } from './provider-configuration-node.factory';
import { ProviderConfigurationRouteFactory } from './provider-configuration-route.factory';
import { ProviderConfigurationTabFactory } from './provider-configuration-tab.factory';
import { ProviderConfigurationComponent } from './provider-configuration.component';
let ProviderConfigurationModule = ProviderConfigurationModule_1 = class ProviderConfigurationModule {
    static config(config) {
        return {
            ngModule: ProviderConfigurationModule_1,
            providers: [{ provide: HOOK_DYNAMIC_PROVIDER_CONFIG, useValue: config, multi: true }]
        };
    }
};
ProviderConfigurationModule = ProviderConfigurationModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [ProviderConfigurationComponent],
        exports: [ProviderConfigurationComponent],
        imports: [CoreModule, CommonModule, DynamicFormsModule],
        entryComponents: [ProviderConfigurationComponent],
        providers: [
            {
                provide: HOOK_ONCE_ROUTE,
                useClass: forwardRef(() => ProviderConfigurationRouteFactory),
                multi: true
            },
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: forwardRef(() => ProviderConfigurationNodeFactory),
                multi: true
            },
            {
                provide: HOOK_TABS,
                useClass: forwardRef(() => ProviderConfigurationTabFactory),
                multi: true
            }
        ]
    })
], ProviderConfigurationModule);
export { ProviderConfigurationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9wcm92aWRlci1jb25maWd1cmF0aW9uL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUMzRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQXlCcEYsSUFBYSwyQkFBMkIsbUNBQXhDLE1BQWEsMkJBQTJCO0lBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBK0I7UUFDM0MsT0FBTztZQUNMLFFBQVEsRUFBRSw2QkFBMkI7WUFDckMsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDdEYsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBUFksMkJBQTJCO0lBdkJ2QyxRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztRQUM5QyxPQUFPLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztRQUN6QyxPQUFPLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixDQUFDO1FBQ3ZELGVBQWUsRUFBRSxDQUFDLDhCQUE4QixDQUFDO1FBQ2pELFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO2dCQUM3RCxLQUFLLEVBQUUsSUFBSTthQUNaO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztnQkFDNUQsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxTQUFTO2dCQUNsQixRQUFRLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLCtCQUErQixDQUFDO2dCQUMzRCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7S0FDRixDQUFDO0dBQ1csMkJBQTJCLENBT3ZDO1NBUFksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9yd2FyZFJlZiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IENvcmVNb2R1bGUgfSBmcm9tICcuLi9jb3JlLm1vZHVsZSc7XG5pbXBvcnQgeyBEeW5hbWljRm9ybXNNb2R1bGUgfSBmcm9tICcuLi9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMubW9kdWxlJztcbmltcG9ydCB7IEhPT0tfTkFWSUdBVE9SX05PREVTIH0gZnJvbSAnLi4vbmF2aWdhdG9yJztcbmltcG9ydCB7IEhPT0tfT05DRV9ST1VURSB9IGZyb20gJy4uL3JvdXRlcic7XG5pbXBvcnQgeyBIT09LX1RBQlMgfSBmcm9tICcuLi90YWJzJztcbmltcG9ydCB7IER5bmFtaWNQcm92aWRlckNvbmZpZyB9IGZyb20gJy4vbW9kZWwvZHluYW1pYy1wcm92aWRlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSE9PS19EWU5BTUlDX1BST1ZJREVSX0NPTkZJRyB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi1ob29rJztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLW5vZGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25Sb3V0ZUZhY3RvcnkgfSBmcm9tICcuL3Byb3ZpZGVyLWNvbmZpZ3VyYXRpb24tcm91dGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm92aWRlckNvbmZpZ3VyYXRpb25UYWJGYWN0b3J5IH0gZnJvbSAnLi9wcm92aWRlci1jb25maWd1cmF0aW9uLXRhYi5mYWN0b3J5JztcbmltcG9ydCB7IFByb3ZpZGVyQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcHJvdmlkZXItY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtQcm92aWRlckNvbmZpZ3VyYXRpb25Db21wb25lbnRdLFxuICBleHBvcnRzOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIENvbW1vbk1vZHVsZSwgRHluYW1pY0Zvcm1zTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbUHJvdmlkZXJDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19PTkNFX1JPVVRFLFxuICAgICAgdXNlQ2xhc3M6IGZvcndhcmRSZWYoKCkgPT4gUHJvdmlkZXJDb25maWd1cmF0aW9uUm91dGVGYWN0b3J5KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgICAgIHVzZUNsYXNzOiBmb3J3YXJkUmVmKCgpID0+IFByb3ZpZGVyQ29uZmlndXJhdGlvbk5vZGVGYWN0b3J5KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX1RBQlMsXG4gICAgICB1c2VDbGFzczogZm9yd2FyZFJlZigoKSA9PiBQcm92aWRlckNvbmZpZ3VyYXRpb25UYWJGYWN0b3J5KSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyQ29uZmlndXJhdGlvbk1vZHVsZSB7XG4gIHN0YXRpYyBjb25maWcoY29uZmlnOiBEeW5hbWljUHJvdmlkZXJDb25maWdbXSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogUHJvdmlkZXJDb25maWd1cmF0aW9uTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBIT09LX0RZTkFNSUNfUFJPVklERVJfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnLCBtdWx0aTogdHJ1ZSB9XVxuICAgIH07XG4gIH1cbn1cbiJdfQ==