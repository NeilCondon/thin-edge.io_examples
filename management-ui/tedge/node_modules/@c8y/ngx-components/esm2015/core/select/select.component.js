import * as tslib_1 from "tslib";
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { gettext } from '../i18n/gettext';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild, ContentChildren } from '@angular/core';
import { ListItemComponent } from '../list-group/list-item.component';
let SelectComponent = class SelectComponent {
    constructor() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.disableApplyOnNoSelection = false;
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    preventClick(evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    }
    isOpenChange(isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    }
    outterSelected(item) {
        const { selected } = this;
        let isSelected = () => false;
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = (i) => selected.indexOf(i) > -1;
        }
        return isSelected(item);
    }
    isSelected(item) {
        return this.itemsSelected.has(item);
    }
    isAllItemsSelected() {
        return this.itemsSelected.size === this.items.length;
    }
    isAllFilteredSelected() {
        return this.itemsSelected.size === this.filteredItems.length;
    }
    isNoItemSelected() {
        return !this.itemsSelected.size;
    }
    applyChanges() {
        const selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    }
    selectAll(checked) {
        this.filteredItems.forEach(item => this.onChangeItem(checked, item));
    }
    ngOnInit() {
        if (this.updateItems) {
            this.updateItems.subscribe(() => {
                this.updateSelected();
                this.updateLabel();
                this.showAllLabel = this.isAllItemsSelected();
            });
        }
    }
    onChangeItem(checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(({ name }) => search.test(name));
        }
        else {
            this.filteredItems = this.items;
        }
    }
    getSelectAllToggleStatus() {
        const label = this.getLabel();
        const checked = this.isAllSelected();
        const indeterminate = !checked && this.itemsSelected.size > 0;
        return { label, checked, indeterminate };
    }
    ngOnChanges(changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    }
    ngOnDestroy() {
        if (this.updateItems && !this.updateItems.closed) {
            this.updateItems.unsubscribe();
        }
    }
    updateLabel() {
        const outterSelected = this.items.filter(i => this.outterSelected(i));
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(({ name }) => name).join(', ');
        }
    }
    updateSelected() {
        const { itemsSelected, items } = this;
        itemsSelected.clear();
        items.forEach(item => {
            if (this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    }
    isAllSelected() {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    }
    getLabel() {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    }
};
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "selectedLabel", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "applyLabel", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "updateItems", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "disableApplyOnNoSelection", void 0);
tslib_1.__decorate([
    Output()
], SelectComponent.prototype, "onChange", void 0);
tslib_1.__decorate([
    ViewChild(BsDropdownDirective, { static: false })
], SelectComponent.prototype, "dropdown", void 0);
tslib_1.__decorate([
    ContentChildren(ListItemComponent)
], SelectComponent.prototype, "liChildren", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event'])
], SelectComponent.prototype, "preventClick", null);
SelectComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-select',
        template: "<div\n  class=\"c8y-child-assets-selector dropdown fit-w\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <ng-content select=\"c8y-li\"></ng-content>\n    <ng-container *ngIf=\"liChildren.length === 0\">\n      <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n        <div class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Filter' | translate }}\u2026\"\n            (keyup)=\"updateFiltered($event.target.value)\"\n            [(ngModel)]=\"searchFilter\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!textFilter\"></i>\n            <i c8yIcon=\"times\" class=\"text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n          </span>\n        </div>\n      </li>\n\n      <li class=\"multiselect-item\">\n        <label\n          [title]=\"getSelectAllToggleStatus().label\"\n          class=\"c8y-checkbox input-sm\"\n          ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"getSelectAllToggleStatus().checked\"\n            (change)=\"selectAll($event.target.checked)\"\n            [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n            class=\"m-t-0\"\n          />\n          <span></span>\n          <span class=\"label-text\">\n            {{ getSelectAllToggleStatus().label }}\n          </span>\n        </label>\n      </li>\n\n      <li class=\"multiselect-item-container\">\n        <ul class=\"list-unstyled\">\n          <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n            <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isSelected(item)\"\n                (change)=\"onChangeItem($event.target.checked, item)\"\n                class=\"m-t-0\"\n              />\n              <span></span>\n              <span class=\"label-text\">\n                {{ item.name | translate }}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </li>\n      <li class=\"divider\"></li>\n      <li class=\"bg-white\">\n        <button\n          title=\"{{ applyLabel | translate }}\"\n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"disableApplyOnNoSelection && isNoItemSelected()\"\n          (click)=\"applyChanges()\"\n        >\n          {{ applyLabel | translate }}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
    })
], SelectComponent);
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBRU4sU0FBUyxFQUNULGVBQWUsRUFFaEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFldEUsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUo1QjtRQUtXLGdCQUFXLEdBQVcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdDLGVBQVUsR0FBVyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFJdEMsOEJBQXlCLEdBQVksS0FBSyxDQUFDO1FBQzFDLGFBQVEsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc5RCxlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2Ysa0JBQWEsR0FBVyxFQUFFLENBQUM7UUFDM0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDWCxxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFDdEMsdUJBQWtCLEdBQVE7WUFDeEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDbkIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7U0FDckMsQ0FBQztRQUNGLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ2Isa0JBQWEsR0FBYyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLGVB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QyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUNyQzthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFTyxRQUFRO1FBQ2QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDO0lBQy9GLENBQUM7Q0FDRixDQUFBO0FBcEtVO0lBQVIsS0FBSyxFQUFFO29EQUE4QztBQUM3QztJQUFSLEtBQUssRUFBRTtzREFBK0M7QUFDOUM7SUFBUixLQUFLLEVBQUU7bURBQXVDO0FBQ3RDO0lBQVIsS0FBSyxFQUFFOzhDQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7aURBQXFDO0FBQ3BDO0lBQVIsS0FBSyxFQUFFO29EQUFvQztBQUNuQztJQUFSLEtBQUssRUFBRTtrRUFBNEM7QUFDMUM7SUFBVCxNQUFNLEVBQUU7aURBQXFEO0FBQ1g7SUFBbEQsU0FBUyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO2lEQUErQjtBQUM3QztJQUFuQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7bURBQVk7QUFnQi9DO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO21EQU1qQztBQS9CVSxlQUFlO0lBSjNCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxZQUFZO1FBQ3RCLDh2R0FBc0M7S0FDdkMsQ0FBQztHQUNXLGVBQWUsQ0FxSzNCO1NBcktZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCc0Ryb3Bkb3duRGlyZWN0aXZlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9kcm9wZG93bic7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkLFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIE9uSW5pdFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpc3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vbGlzdC1ncm91cC9saXN0LWl0ZW0uY29tcG9uZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBJdGVtIHtcbiAgbmFtZTogc3RyaW5nO1xuICBfc2VsZWN0ZWQ/OiBib29sZWFuO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIHNlbGVjdGVkRnVuY3Rpb24gPSAoaXRlbTogSXRlbSkgPT4gYm9vbGVhbjtcbmV4cG9ydCB0eXBlIHNlbGVjdGVkTGFiZWxGdW5jdGlvbiA9IChpdGVtczogSXRlbVtdKSA9PiBzdHJpbmc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zZWxlY3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSBnZXR0ZXh0KCdTZWxlY3QgaXRlbScpO1xuICBASW5wdXQoKSBzZWxlY3RlZExhYmVsOiBzdHJpbmcgfCBzZWxlY3RlZExhYmVsRnVuY3Rpb247XG4gIEBJbnB1dCgpIGFwcGx5TGFiZWw6IHN0cmluZyA9IGdldHRleHQoJ0FwcGx5Jyk7XG4gIEBJbnB1dCgpIGl0ZW1zOiBJdGVtW107XG4gIEBJbnB1dCgpIHNlbGVjdGVkOiBJdGVtW10gfCBzZWxlY3RlZEZ1bmN0aW9uO1xuICBASW5wdXQoKSB1cGRhdGVJdGVtczogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICBASW5wdXQoKSBkaXNhYmxlQXBwbHlPbk5vU2VsZWN0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPEl0ZW1bXT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBWaWV3Q2hpbGQoQnNEcm9wZG93bkRpcmVjdGl2ZSwgeyBzdGF0aWM6IGZhbHNlIH0pIGRyb3Bkb3duOiBCc0Ryb3Bkb3duRGlyZWN0aXZlO1xuICBAQ29udGVudENoaWxkcmVuKExpc3RJdGVtQ29tcG9uZW50KSBsaUNoaWxkcmVuO1xuICB0ZXh0RmlsdGVyID0gJyc7XG4gIGxhYmVsVGV4dCA9ICcnO1xuICBpc09wZW4gPSBmYWxzZTtcbiAgZmlsdGVyZWRJdGVtczogSXRlbVtdID0gW107XG4gIHNlYXJjaEZpbHRlciA9IG51bGw7XG4gIHJlYWRvbmx5IHNpemVUb1Nob3dGaWx0ZXI6IG51bWJlciA9IDU7XG4gIGxhYmVsc0ZvclNlbGVjdEFsbDogYW55ID0ge1xuICAgIGFsbDogZ2V0dGV4dCgnQWxsJyksXG4gICAgYWxsRmlsdGVyZWQ6IGdldHRleHQoJ0FsbCBmaWx0ZXJlZCcpXG4gIH07XG4gIHNob3dBbGxMYWJlbCA9IGZhbHNlO1xuICBwcml2YXRlIGl0ZW1zU2VsZWN0ZWQ6IFNldDxJdGVtPiA9IG5ldyBTZXQoKTtcbiAgcHJpdmF0ZSBzdG9wQ2xpY2tzID0gZmFsc2U7XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBwcmV2ZW50Q2xpY2soZXZ0KSB7XG4gICAgaWYgKHRoaXMuc3RvcENsaWNrcykge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLnN0b3BDbGlja3MgPSB0aGlzLmlzT3BlbjtcbiAgfVxuXG4gIGlzT3BlbkNoYW5nZShpc09wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzT3BlbiA9IGlzT3BlbjtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICB0aGlzLnNlYXJjaEZpbHRlciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RvcENsaWNrcyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG91dHRlclNlbGVjdGVkKGl0ZW06IEl0ZW0pIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzO1xuICAgIGxldCBpc1NlbGVjdGVkOiBhbnkgPSAoKSA9PiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHNlbGVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpc1NlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdGVkKSkge1xuICAgICAgaXNTZWxlY3RlZCA9IChpOiBJdGVtKSA9PiBzZWxlY3RlZC5pbmRleE9mKGkpID4gLTE7XG4gICAgfVxuICAgIHJldHVybiBpc1NlbGVjdGVkKGl0ZW0pO1xuICB9XG5cbiAgaXNTZWxlY3RlZChpdGVtOiBJdGVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNTZWxlY3RlZC5oYXMoaXRlbSk7XG4gIH1cblxuICBpc0FsbEl0ZW1zU2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNTZWxlY3RlZC5zaXplID09PSB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIGlzQWxsRmlsdGVyZWRTZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtc1NlbGVjdGVkLnNpemUgPT09IHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGg7XG4gIH1cblxuICBpc05vSXRlbVNlbGVjdGVkKCkge1xuICAgIHJldHVybiAhdGhpcy5pdGVtc1NlbGVjdGVkLnNpemU7XG4gIH1cblxuICBhcHBseUNoYW5nZXMoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSBBcnJheS5mcm9tKHRoaXMuaXRlbXNTZWxlY3RlZC52YWx1ZXMoKSk7XG4gICAgdGhpcy5vbkNoYW5nZS5lbWl0KHNlbGVjdGVkKTtcbiAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgfVxuXG4gIHNlbGVjdEFsbChjaGVja2VkOiBib29sZWFuKSB7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB0aGlzLm9uQ2hhbmdlSXRlbShjaGVja2VkLCBpdGVtKSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy51cGRhdGVJdGVtcykge1xuICAgICAgdGhpcy51cGRhdGVJdGVtcy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkKCk7XG4gICAgICAgIHRoaXMudXBkYXRlTGFiZWwoKTtcbiAgICAgICAgdGhpcy5zaG93QWxsTGFiZWwgPSB0aGlzLmlzQWxsSXRlbXNTZWxlY3RlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25DaGFuZ2VJdGVtKGNoZWNrZWQ6IGJvb2xlYW4sIGl0ZW06IEl0ZW0pIHtcbiAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgdGhpcy5pdGVtc1NlbGVjdGVkLmFkZChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pdGVtc1NlbGVjdGVkLmRlbGV0ZShpdGVtKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVGaWx0ZXJlZCh0ZXJtOiBzdHJpbmcpIHtcbiAgICBpZiAodGVybSkge1xuICAgICAgY29uc3Qgc2VhcmNoID0gbmV3IFJlZ0V4cCh0ZXJtLCAnaScpO1xuICAgICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gdGhpcy5pdGVtcy5maWx0ZXIoKHsgbmFtZSB9KSA9PiBzZWFyY2gudGVzdChuYW1lKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgfVxuICB9XG5cbiAgZ2V0U2VsZWN0QWxsVG9nZ2xlU3RhdHVzKCkge1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRMYWJlbCgpO1xuICAgIGNvbnN0IGNoZWNrZWQgPSB0aGlzLmlzQWxsU2VsZWN0ZWQoKTtcbiAgICBjb25zdCBpbmRldGVybWluYXRlID0gIWNoZWNrZWQgJiYgdGhpcy5pdGVtc1NlbGVjdGVkLnNpemUgPiAwO1xuXG4gICAgcmV0dXJuIHsgbGFiZWwsIGNoZWNrZWQsIGluZGV0ZXJtaW5hdGUgfTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMuaXRlbXMgfHwgY2hhbmdlcy5zZWxlY3RlZCB8fCBjaGFuZ2VzLmFwcGx5TGFiZWwpIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWQoKTtcbiAgICAgIHRoaXMudXBkYXRlTGFiZWwoKTtcbiAgICAgIHRoaXMuc2hvd0FsbExhYmVsID0gdGhpcy5pc0FsbEl0ZW1zU2VsZWN0ZWQoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy51cGRhdGVJdGVtcyAmJiAhdGhpcy51cGRhdGVJdGVtcy5jbG9zZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlSXRlbXMudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUxhYmVsKCkge1xuICAgIGNvbnN0IG91dHRlclNlbGVjdGVkID0gdGhpcy5pdGVtcy5maWx0ZXIoaSA9PiB0aGlzLm91dHRlclNlbGVjdGVkKGkpKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0ZWRMYWJlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMubGFiZWxUZXh0ID0gdGhpcy5zZWxlY3RlZExhYmVsO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuc2VsZWN0ZWRMYWJlbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5sYWJlbFRleHQgPSB0aGlzLnNlbGVjdGVkTGFiZWwob3V0dGVyU2VsZWN0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhYmVsVGV4dCA9IG91dHRlclNlbGVjdGVkLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpLmpvaW4oJywgJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTZWxlY3RlZCgpIHtcbiAgICBjb25zdCB7IGl0ZW1zU2VsZWN0ZWQsIGl0ZW1zIH0gPSB0aGlzO1xuICAgIGl0ZW1zU2VsZWN0ZWQuY2xlYXIoKTtcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKHRoaXMub3V0dGVyU2VsZWN0ZWQoaXRlbSkpIHtcbiAgICAgICAgaXRlbXNTZWxlY3RlZC5hZGQoaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5maWx0ZXJlZEl0ZW1zID0gaXRlbXM7XG4gIH1cblxuICBwcml2YXRlIGlzQWxsU2VsZWN0ZWQoKSB7XG4gICAgaWYgKHRoaXMuZ2V0TGFiZWwoKSA9PT0gdGhpcy5sYWJlbHNGb3JTZWxlY3RBbGwuYWxsRmlsdGVyZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzQWxsRmlsdGVyZWRTZWxlY3RlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0FsbEl0ZW1zU2VsZWN0ZWQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldExhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaEZpbHRlciA/IHRoaXMubGFiZWxzRm9yU2VsZWN0QWxsLmFsbEZpbHRlcmVkIDogdGhpcy5sYWJlbHNGb3JTZWxlY3RBbGwuYWxsO1xuICB9XG59XG4iXX0=