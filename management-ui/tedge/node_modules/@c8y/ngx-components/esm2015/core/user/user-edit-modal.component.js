import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { BasicAuth, FetchClient, ICredentials, IUser, UserService } from '@c8y/client';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { AlertService } from '../alert/alert.service';
import { AppStateService } from '../common/ui-state.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { gettext } from '../i18n/gettext';
import { TranslateService } from '../i18n/translate.service';
import { take } from 'rxjs/operators';
import { ModalService } from '../modal/modal.service';
import { Status } from '../common/status.model';
import { GainsightService } from '../product-experience/gainsight.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
let UserEditModalComponent = class UserEditModalComponent {
    constructor(modal, user, ui, auth, client, alert, translate, userPreferences, modalService, c8yModalService, gainsightService, cookieBannerService) {
        this.modal = modal;
        this.user = user;
        this.ui = ui;
        this.auth = auth;
        this.client = client;
        this.alert = alert;
        this.translate = translate;
        this.userPreferences = userPreferences;
        this.modalService = modalService;
        this.c8yModalService = c8yModalService;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        this.loading = false;
        this.showProductUsageSetting = false;
        this.lang = this.ui.state.lang;
        this.modalService.onHide.pipe(take(1)).subscribe((reason) => {
            if (reason !== null && this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
        });
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.updateUserInAppState();
            this.showProductUsageSetting = yield this.gainsightService.canEditProductExperienceSettings();
            if (this.showProductUsageSetting) {
                this.currentUsageTrackingState = !(yield this.gainsightService.isGainsightDisabledInUserPreferences()) &&
                    this.cookieBannerService.isFunctionalCookieEnabled();
            }
        });
    }
    onDismiss() {
        if (this.changedLang !== undefined) {
            this.translate.switchToLanguage(this.lang);
        }
        this.modal.hide();
    }
    onLanguage(lang) {
        this.changedLang = lang;
        this.translate.switchToLanguage(this.changedLang);
    }
    onProductExperience(option) {
        this.usageTrackingState = option;
    }
    updateAndClose(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            try {
                if (this.changedLang && this.changedLang !== this.lang) {
                    yield this.persistLanguage(this.changedLang);
                }
                if (this.currentUsageTrackingState !== this.usageTrackingState) {
                    yield this.userPreferences.set(this.gainsightService.USER_PREFERENCES_KEY, this.usageTrackingState);
                    this.gainsightService.setFunctionalCookie(this.usageTrackingState);
                    this.usageTrackingState ? this.gainsightService.loadTag(this.client.tenant) : yield this.gainsightTrackingAppReload();
                }
                if (user.customProperties.userOrigin !== 'OAUTH2') {
                    yield this.user.updateCurrent(user);
                    if (user.password) {
                        this.updateCredentials(user.password);
                    }
                    yield this.updateUserInAppState();
                }
                this.modal.hide();
                this.alert.success(gettext('User saved.'));
            }
            catch (e) {
                this.alert.addServerFailure(e);
            }
            finally {
                this.loading = false;
            }
        });
    }
    persistLanguage(lang) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.c8yModalService.confirm(gettext('Reload recommended'), gettext('To change the language in the entire application, we recommend you to reload the page. If you have any unsaved changes, you can reload later. What would you like to do?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                location.reload();
                this.lang = lang;
            }
            catch (ex) {
                this.translate.saveInLocalStorage(lang);
                yield this.userPreferences.set('language', lang);
                this.lang = lang;
            }
        });
    }
    gainsightTrackingAppReload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.c8yModalService.confirm(gettext('Reload required'), gettext('To change the tracking option in the entire application, you need to reload the page. If you have any unsaved changes, you can reload later. What would you like to do?'), Status.WARNING, {
                    ok: gettext('Reload now'),
                    cancel: gettext('Reload later')
                });
                location.reload();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    updateUserInAppState() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const currentUserResult = yield this.user.current();
            this.ui.currentUser.next(currentUserResult.data);
        });
    }
    updateCredentials(password) {
        const newCredentials = {
            password,
            user: this.ui.currentUser.value.id,
            tenant: this.client.tenant
        };
        this.auth.updateCredentials(newCredentials);
    }
};
UserEditModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: UserService },
    { type: AppStateService },
    { type: BasicAuth },
    { type: FetchClient },
    { type: AlertService },
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: BsModalService },
    { type: ModalService },
    { type: GainsightService },
    { type: CookieBannerService }
];
UserEditModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-user-edit-modal',
        template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Edit user' | translate\" (onDismiss)=\"onDismiss()\">\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    [isUsageTrackingEnabled]=\"currentUsageTrackingState\"\n    [showProductUsageSetting]=\"showProductUsageSetting\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onProductExperience)=\"onProductExperience($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>\n"
    })
], UserEditModalComponent);
export { UserEditModalComponent };
//# sourceMappingURL=data:application/json;base64,