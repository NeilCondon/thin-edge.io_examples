import { BaseDeviceGridColumn } from './base.device-grid-column';
import { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
import { map } from 'lodash-es';
export class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {
    constructor(initialColumnConfig) {
        super(initialColumnConfig);
        this.name = 'alarms';
        this.header = gettext('Alarms');
        this.cellRendererComponent = AlarmsCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    critical: {
                        type: 'boolean'
                    },
                    major: {
                        type: 'boolean'
                    },
                    minor: {
                        type: 'boolean'
                    },
                    warning: {
                        type: 'boolean'
                    },
                    none: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: `<label><span translate>${gettext('Show devices with active')}</span>:</label>`
                },
                {
                    key: 'critical',
                    title: gettext('Critical alarms')
                },
                {
                    key: 'major',
                    title: gettext('Major alarms')
                },
                {
                    key: 'minor',
                    title: gettext('Minor alarms')
                },
                {
                    key: 'warning',
                    title: gettext('Warnings')
                },
                {
                    key: 'none',
                    title: gettext('No alarms')
                }
            ],
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], sev => {
                            const zero = {};
                            const has = { __not: { __has: undefined } };
                            const key = `c8y_ActiveAlarmsStatus.${sev}`;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQvIiwic291cmNlcyI6WyJjb2x1bW5zL2FsYXJtcy5kZXZpY2UtZ3JpZC1jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWhDLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxvQkFBb0I7SUFDOUQsWUFBWSxtQkFBa0M7UUFDNUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLDJCQUEyQixDQUFDO1FBRXpELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxRQUFRO2dCQUNkLFVBQVUsRUFBRTtvQkFDVixRQUFRLEVBQUU7d0JBQ1IsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO29CQUNELEtBQUssRUFBRTt3QkFDTCxJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsS0FBSyxFQUFFO3dCQUNMLElBQUksRUFBRSxTQUFTO3FCQUNoQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO29CQUNELElBQUksRUFBRTt3QkFDSixJQUFJLEVBQUUsU0FBUztxQkFDaEI7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QUU7Z0JBQ2xCLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFO2dCQUMzQyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTtnQkFDeEMsRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUU7Z0JBQ3hDLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFO2FBQzNDO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9iYXNlLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2FsYXJtcy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0LCBDb2x1bW5Db25maWcgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbmV4cG9ydCBjbGFzcyBBbGFybXNEZXZpY2VHcmlkQ29sdW1uIGV4dGVuZHMgQmFzZURldmljZUdyaWRDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG4gICAgdGhpcy5uYW1lID0gJ2FsYXJtcyc7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdBbGFybXMnKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudDtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBzY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBjcml0aWNhbDoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtaW5vcjoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICB3YXJuaW5nOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5vbmU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZvcm06IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICd0ZW1wbGF0ZScsXG4gICAgICAgICAgdGVtcGxhdGU6IGA8bGFiZWw+PHNwYW4gdHJhbnNsYXRlPiR7Z2V0dGV4dCgnU2hvdyBkZXZpY2VzIHdpdGggYWN0aXZlJyl9PC9zcGFuPjo8L2xhYmVsPmBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ2NyaXRpY2FsJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnQ3JpdGljYWwgYWxhcm1zJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ21ham9yJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnTWFqb3IgYWxhcm1zJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ21pbm9yJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnTWlub3IgYWxhcm1zJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3dhcm5pbmcnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdXYXJuaW5ncycpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdub25lJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnTm8gYWxhcm1zJylcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGdldEZpbHRlcihtb2RlbCkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBjb25zdCBvcnMgPSBbXTtcbiAgICAgICAgaWYgKG1vZGVsLmNyaXRpY2FsKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5jcml0aWNhbCc6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC5tYWpvcikge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMubWFqb3InOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwubWlub3IpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1pbm9yJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLndhcm5pbmcpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLndhcm5pbmcnOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwubm9uZSkge1xuICAgICAgICAgIG9ycy5wdXNoKHsgX19ub3Q6IHsgX19oYXM6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzJyB9IH0pO1xuICAgICAgICAgIG9ycy5wdXNoKHtcbiAgICAgICAgICAgIF9fYW5kOiBtYXAoWydjcml0aWNhbCcsICdtYWpvcicsICdtaW5vcicsICd3YXJuaW5nJ10sIHNldiA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHplcm8gPSB7fTtcbiAgICAgICAgICAgICAgY29uc3QgaGFzID0geyBfX25vdDogeyBfX2hhczogdW5kZWZpbmVkIH0gfTtcbiAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYGM4eV9BY3RpdmVBbGFybXNTdGF0dXMuJHtzZXZ9YDtcbiAgICAgICAgICAgICAgemVyb1trZXldID0gMDtcbiAgICAgICAgICAgICAgaGFzLl9fbm90Ll9faGFzID0ga2V5O1xuICAgICAgICAgICAgICByZXR1cm4geyBfX29yOiBbemVybywgaGFzXSB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JzLmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0gb3JzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW1xuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLmNyaXRpY2FsJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1ham9yJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1pbm9yJyB9LFxuICAgICAgICB7IHBhdGg6ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLndhcm5pbmcnIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=