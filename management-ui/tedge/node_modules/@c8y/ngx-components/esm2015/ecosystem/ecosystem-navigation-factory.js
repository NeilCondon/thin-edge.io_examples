import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NavigatorNode, gettext } from '@c8y/ngx-components';
import { EcosystemGuard } from './ecosystem.guard';
let EcosystemNavigationFactory = class EcosystemNavigationFactory {
    constructor(ecosystemGuard) {
        this.ecosystemGuard = ecosystemGuard;
        this.navs = [];
    }
    get() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Check for the beta flag. To be removed when the feature is production ready.
            if (!this.ecosystemGuard.isFeatureEnabled()) {
                return [];
            }
            if (this.navs.length === 0) {
                const applicationsNode = new NavigatorNode({
                    label: gettext('Applications'),
                    icon: 'c8y-modules',
                    path: '/application-list'
                });
                const microservicesNode = new NavigatorNode({
                    label: gettext('Microservices'),
                    icon: 'microchip',
                    path: '/microservices'
                });
                this.navs.push(new NavigatorNode({
                    label: gettext('Ecosystem'),
                    icon: 'c8y-atom',
                    priority: 3200,
                    children: [applicationsNode, microservicesNode]
                }));
            }
            return this.navs;
        });
    }
};
EcosystemNavigationFactory.ctorParameters = () => [
    { type: EcosystemGuard }
];
EcosystemNavigationFactory = tslib_1.__decorate([
    Injectable()
], EcosystemNavigationFactory);
export { EcosystemNavigationFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNvc3lzdGVtLW5hdmlnYXRpb24tZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZWNvc3lzdGVtLyIsInNvdXJjZXMiOlsiZWNvc3lzdGVtLW5hdmlnYXRpb24tZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUF3QixPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUFFckMsWUFBb0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBRDFDLFNBQUksR0FBb0IsRUFBRSxDQUFDO0lBQ2tCLENBQUM7SUFFaEQsR0FBRzs7WUFDUCwrRUFBK0U7WUFDL0UsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtnQkFDM0MsT0FBTyxFQUFFLENBQUM7YUFDWDtZQUVELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixNQUFNLGdCQUFnQixHQUFrQixJQUFJLGFBQWEsQ0FBQztvQkFDeEQsS0FBSyxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7b0JBQzlCLElBQUksRUFBRSxhQUFhO29CQUNuQixJQUFJLEVBQUUsbUJBQW1CO2lCQUMxQixDQUFDLENBQUM7Z0JBRUgsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGFBQWEsQ0FBQztvQkFDMUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7b0JBQy9CLElBQUksRUFBRSxXQUFXO29CQUNqQixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2QixDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxhQUFhLENBQUM7b0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO29CQUMzQixJQUFJLEVBQUUsVUFBVTtvQkFDaEIsUUFBUSxFQUFFLElBQUk7b0JBQ2QsUUFBUSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUM7aUJBQ2hELENBQUMsQ0FDSCxDQUFDO2FBQ0g7WUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUFoQ3FDLGNBQWM7O0FBRnZDLDBCQUEwQjtJQUR0QyxVQUFVLEVBQUU7R0FDQSwwQkFBMEIsQ0FrQ3RDO1NBbENZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5hdmlnYXRvck5vZGUsIE5hdmlnYXRvck5vZGVGYWN0b3J5LCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBFY29zeXN0ZW1HdWFyZCB9IGZyb20gJy4vZWNvc3lzdGVtLmd1YXJkJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVjb3N5c3RlbU5hdmlnYXRpb25GYWN0b3J5IGltcGxlbWVudHMgTmF2aWdhdG9yTm9kZUZhY3Rvcnkge1xuICBwcml2YXRlIG5hdnM6IE5hdmlnYXRvck5vZGVbXSA9IFtdO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVjb3N5c3RlbUd1YXJkOiBFY29zeXN0ZW1HdWFyZCkge31cblxuICBhc3luYyBnZXQoKSB7XG4gICAgLy8gQ2hlY2sgZm9yIHRoZSBiZXRhIGZsYWcuIFRvIGJlIHJlbW92ZWQgd2hlbiB0aGUgZmVhdHVyZSBpcyBwcm9kdWN0aW9uIHJlYWR5LlxuICAgIGlmICghdGhpcy5lY29zeXN0ZW1HdWFyZC5pc0ZlYXR1cmVFbmFibGVkKCkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uYXZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25zTm9kZTogTmF2aWdhdG9yTm9kZSA9IG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ0FwcGxpY2F0aW9ucycpLFxuICAgICAgICBpY29uOiAnYzh5LW1vZHVsZXMnLFxuICAgICAgICBwYXRoOiAnL2FwcGxpY2F0aW9uLWxpc3QnXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbWljcm9zZXJ2aWNlc05vZGUgPSBuZXcgTmF2aWdhdG9yTm9kZSh7XG4gICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdNaWNyb3NlcnZpY2VzJyksXG4gICAgICAgIGljb246ICdtaWNyb2NoaXAnLFxuICAgICAgICBwYXRoOiAnL21pY3Jvc2VydmljZXMnXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5uYXZzLnB1c2goXG4gICAgICAgIG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnRWNvc3lzdGVtJyksXG4gICAgICAgICAgaWNvbjogJ2M4eS1hdG9tJyxcbiAgICAgICAgICBwcmlvcml0eTogMzIwMCxcbiAgICAgICAgICBjaGlsZHJlbjogW2FwcGxpY2F0aW9uc05vZGUsIG1pY3Jvc2VydmljZXNOb2RlXVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmF2cztcbiAgfVxufVxuIl19