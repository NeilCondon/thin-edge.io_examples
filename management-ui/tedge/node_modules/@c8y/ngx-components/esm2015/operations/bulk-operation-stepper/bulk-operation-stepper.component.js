import * as tslib_1 from "tslib";
import { Component, ContentChildren, EventEmitter, Output, ViewChild } from '@angular/core';
import { AlertService, C8yStepper, gettext, ModalService, Status } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { OperationDetailsComponent } from '@c8y/ngx-components/operations/details';
import { CustomStep } from './custom-step.directive';
import { OperationDetails, BulkOperationType, BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
let BulkOperationStepper = class BulkOperationStepper {
    constructor(bulkOperationService, modal, alert) {
        this.bulkOperationService = bulkOperationService;
        this.modal = modal;
        this.alert = alert;
        this.selectionChange = new EventEmitter();
        this.steps = [];
        this.showStepper = false;
        this.showButtons = false;
        this.stepperButtonsLabels = { custom: gettext('Schedule bulk operation') };
        this.deviceTypesSubject$ = new Subject();
        this.endSubscriptions = new Subject();
        this.deviceTypes$ = this.deviceTypesSubject$.asObservable();
    }
    ngAfterViewInit() {
        setTimeout(() => {
            // wait for the next event loop turn as `steps` has already been checked in this CD cycle
            this.steps = this.customSteps.toArray();
            this.showStepper = true;
            setTimeout(() => {
                // postpone rendering of buttons for custom steps to the point where custom steps have already been rendered
                this.showButtons = true;
                if (this.stepper) {
                    this.stepper.selectionChange.pipe(takeUntil(this.endSubscriptions)).subscribe(event => {
                        this.selectionChange.next(event);
                    });
                    this.operationDetailsForm = this.operationDetailsComponent.fgOperationDescription;
                }
            });
        });
    }
    changeDeviceTypes(deviceTypes) {
        if (deviceTypes) {
            this.deviceTypesSubject$.next(Array.isArray(deviceTypes) ? deviceTypes : [deviceTypes]);
        }
        else {
            this.deviceTypesSubject$.next([]);
        }
    }
    confirmDeviceSelection($event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.deviceQueryString) {
                try {
                    yield this.modal.confirm(gettext('All devices selected'), gettext('You are about to schedule the bulk operation to be executed for all devices. Do you want to proceed?'), Status.WARNING, { ok: gettext('Schedule for all devices'), cancel: gettext('Cancel and select devices') });
                    $event.step.completed = true;
                    $event.stepper.next();
                    this.operationDetails = this.retrieveOperationDetails
                        ? yield this.retrieveOperationDetails()
                        : undefined;
                }
                catch (ex) {
                    // Intentionally empty
                }
            }
            else {
                $event.step.completed = true;
                $event.stepper.next();
                this.operationDetails = this.retrieveOperationDetails
                    ? yield this.retrieveOperationDetails()
                    : undefined;
            }
            this.bulkOperationType = this.bulkOperationService.retrieveBulkOperationType(get(this.operationDetails, 'prototype'));
            if (this.operationDetailsForm &&
                get(this.operationDetailsForm, 'controls.description.pristine') &&
                this.operationDetails) {
                this.operationDetailsForm.patchValue({
                    description: get(this.operationDetails, 'prototype.description')
                });
            }
        });
    }
    cancel() {
        this.close();
    }
    scheduleBulkOperation() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.pendingStatus = true;
            try {
                this.operationDetails.prototype.description = get(this.operationDetailsForm, 'controls.description.value');
                this.operationDetails.note = get(this.operationDetailsForm, 'controls.note.value');
                this.operationDetails.schedule = get(this.operationDetailsForm, 'controls.schedule.value');
                yield this.bulkOperationService.scheduleBulkOperation(this.deviceQueryString, this.operationDetails);
                this.alert.success(gettext('New bulk operation scheduled.'));
                this.close();
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
            }
            this.pendingStatus = false;
        });
    }
    ngOnDestroy() {
        this.endSubscriptions.next();
        this.endSubscriptions.complete();
    }
    close() {
        this.stepper.reset();
        this.bulkOperationService.returnToBulkOperationOverview();
    }
};
BulkOperationStepper.ctorParameters = () => [
    { type: BulkOperationsService },
    { type: ModalService },
    { type: AlertService }
];
tslib_1.__decorate([
    Output()
], BulkOperationStepper.prototype, "selectionChange", void 0);
tslib_1.__decorate([
    ContentChildren(CustomStep)
], BulkOperationStepper.prototype, "customSteps", void 0);
tslib_1.__decorate([
    ViewChild(C8yStepper, { static: false })
], BulkOperationStepper.prototype, "stepper", void 0);
tslib_1.__decorate([
    ViewChild(OperationDetailsComponent, { static: false })
], BulkOperationStepper.prototype, "operationDetailsComponent", void 0);
BulkOperationStepper = tslib_1.__decorate([
    Component({
        selector: 'c8y-bulk-operation-stepper',
        template: "<div class=\"fit-h\">\n  <c8y-stepper\n    class=\"flex-col no-align-items fit-h c8y-stepper--no-btns\"\n    linear\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    [customClasses]=\"['col-md-6', 'col-md-offset-3', 'p-t-16', 'p-b-32', 'flex-no-shrink']\"\n    *ngIf=\"showStepper\"\n  >\n    <!-- CUSTOM STEPS 1 to N-2 -->\n    <cdk-step\n      *ngFor=\"let step of steps\"\n      [label]=\"step.label | translate\"\n      [completed]=\"step.completed\"\n    >\n      <ng-container *ngTemplateOutlet=\"step.templateRef\"></ng-container>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        *ngIf=\"showButtons\"\n        [disabled]=\"step.buttonsDisabled\"\n        (onNext)=\"step.onNext($event)\"\n        (onCancel)=\"cancel()\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <!-- STEP N-1 - Data-grid -->\n    <cdk-step [label]=\"'Select target devices' | translate\">\n      <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row p-b-16\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center m-b-16\">\n              {{ 'Select target devices' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <c8y-device-selector\n          [deviceTypes]=\"deviceTypes$\"\n          (onDeviceQueryStringChange)=\"deviceQueryString = $event\"\n        ></c8y-device-selector>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onNext)=\"confirmDeviceSelection($event)\"\n        (onCancel)=\"cancel()\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n\n    <!-- STEP N - Scheduler -->\n    <cdk-step [label]=\"'Confirm and schedule bulk operation' | translate\">\n      <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row p-b-16\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center m-b-16\">\n              {{ 'Confirm and schedule bulk operation' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <div class=\"card-inner-scroll fit-h\">\n          <div class=\"card-block p-b-0\">\n            <div class=\"text-center p-b-16\">\n              <c8y-operation-summary\n                [name]=\"operationDetails?.name | translate\"\n                [description]=\"operationDetails?.description | translate\"\n                [deviceQueryString]=\"deviceQueryString\"\n              ></c8y-operation-summary>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-4 col-md-offset-4\">\n                <c8y-operation-details\n                  [bulkOperationType]=\"bulkOperationType\"\n                ></c8y-operation-details>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        [labels]=\"stepperButtonsLabels\"\n        [pending]=\"pendingStatus\"\n        [disabled]=\"operationDetailsForm?.invalid\"\n        (onCancel)=\"cancel()\"\n        (onCustom)=\"scheduleBulkOperation()\"\n      >\n      </c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</div>\n"
    })
], BulkOperationStepper);
export { BulkOperationStepper };
//# sourceMappingURL=data:application/json;base64,