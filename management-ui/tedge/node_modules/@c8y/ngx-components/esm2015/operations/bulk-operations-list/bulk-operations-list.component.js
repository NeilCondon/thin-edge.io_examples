import * as tslib_1 from "tslib";
import { Component, ViewChild, ViewChildren } from '@angular/core';
import { OperationBulkRealtimeService, DatePickerComponent } from '@c8y/ngx-components';
import { flatten } from 'lodash-es';
import { BehaviorSubject, combineLatest, pipe } from 'rxjs';
import { map, tap, switchMap, withLatestFrom, shareReplay } from 'rxjs/operators';
import { BulkOperationsService, OperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { BulkOperationModalsService } from './modals/bulk-operation-modals.service';
import { BulkOperationListItemComponent } from './bulk-operation-list-item.component';
import { BULK_OPERATION_STATUS_OPTIONS } from './bulk-operation-list-item.model';
let BulkOperationsListComponent = class BulkOperationsListComponent {
    constructor(realtime, bulkOperationsService, bulkOperationModalsService) {
        this.realtime = realtime;
        this.bulkOperationsService = bulkOperationsService;
        this.bulkOperationModalsService = bulkOperationModalsService;
        this.bulkTypes = [];
        this.selectedTypeFilters = this.getTypeFilters();
        this.bulkOperationStatusOptions = BULK_OPERATION_STATUS_OPTIONS;
        this.refreshLoading = false;
        this.statusFilter$ = new BehaviorSubject(null);
        this.typeFilter$ = new BehaviorSubject(null);
        this.timeFilter$ = new BehaviorSubject(null);
        this.reload$ = new BehaviorSubject(null);
        this.bulkOperations$ = combineLatest(this.statusFilter$, this.timeFilter$, this.typeFilter$, this.reload$).pipe(tap(() => {
            this.refreshLoading = true;
        }), switchMap(([statusFilters, timeFilters]) => this.filter(statusFilters, timeFilters)), withLatestFrom(this.typeFilter$), map(([result, typeFilter]) => {
            this.filterPipe = pipe(map((data) => this.filterByType(data, typeFilter)));
            return Object.assign({}, result, { data: this.filterByType(result.data, typeFilter) });
        }), tap(() => {
            this.refreshLoading = false;
        }), shareReplay(1));
        this.allFilterFragments = this.flattenFilterFragments(this.getTypeFilters());
    }
    ngOnInit() {
        this.bulkTypes = this.bulkOperationsService.getBulkTypes();
    }
    filterByType(bulkOperations, typeFilter) {
        const flattenedFragments = this.flattenFilterFragments(typeFilter);
        if (
        // return data unfiltered if no filters selected...
        !flattenedFragments.length ||
            // ...or when all filters are selected
            this.allFilterFragments.every(fragment => flattenedFragments.includes(fragment))) {
            return bulkOperations;
        }
        const filteredData = bulkOperations.filter(item => {
            return Object.keys(item.operationPrototype).some(key => flattenedFragments.includes(key));
        });
        return filteredData;
    }
    resetFilter() {
        this.statusFilter$.next(null);
        this.timeFilter$.next(null);
        this.typeFilter$.next(null);
        this.datePicker.clearFilter();
        this.selectedTypeFilters = this.getTypeFilters();
        this.statusFilter.reset();
    }
    isFilterApplied() {
        return (this.statusFilter$.getValue() || this.typeFilter$.getValue() || this.timeFilter$.getValue());
    }
    filter(statusFilters, timeFilter) {
        const status = statusFilters && statusFilters.length > 0
            ? {
                generalStatus: flatten(statusFilters.map(statusFilter => statusFilter.generalStatus))
            }
            : {};
        const time = timeFilter
            ? Object.assign({}, (timeFilter.dateFrom && {
                dateFrom: timeFilter.dateFrom.toISOString()
            }), (timeFilter.dateTo && {
                dateTo: timeFilter.dateTo.toISOString()
            })) : {};
        return this.getBulkOperations(Object.assign({}, status, time));
    }
    getBulkOperations(filter) {
        return this.bulkOperationsService.getBulkOperations(filter);
    }
    getTypeFilters() {
        return this.bulkOperationsService.getBulkTypes();
    }
    addBulkOperation() {
        this.bulkOperationModalsService.showNewBulkOperationModal();
    }
    openFailedOperation(failedParentId) {
        this.listItems.forEach(item => {
            if (item.bulkOperation.id === failedParentId) {
                item.listItem.collapsed = false;
                item.listItem.element.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });
    }
    compareOperations(operationA, operationB) {
        return new Date(operationA.startDate).getTime() - new Date(operationB.startDate).getTime();
    }
    flattenFilterFragments(filters) {
        return (filters || []).reduce((flattened, current) => flattened.concat(current.fragments), []);
    }
};
BulkOperationsListComponent.ctorParameters = () => [
    { type: OperationBulkRealtimeService },
    { type: BulkOperationsService },
    { type: BulkOperationModalsService }
];
tslib_1.__decorate([
    ViewChildren(BulkOperationListItemComponent)
], BulkOperationsListComponent.prototype, "listItems", void 0);
tslib_1.__decorate([
    ViewChild('statusFilter', { static: true })
], BulkOperationsListComponent.prototype, "statusFilter", void 0);
tslib_1.__decorate([
    ViewChild(DatePickerComponent, { static: true })
], BulkOperationsListComponent.prototype, "datePicker", void 0);
BulkOperationsListComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-bulk-operations',
        template: "<c8y-title> {{ 'Device control' | translate }}</c8y-title>\n<c8y-action-bar-item *ngIf=\"bulkTypes?.length\" itemClass=\"navbar-form\" [placement]=\"'left'\">\n  <label translate class=\"hidden-sm\">Type</label>\n  <c8y-select\n    style=\"width: 180px;\"\n    [items]=\"bulkTypes\"\n    [selected]=\"selectedTypeFilters\"\n    [disableApplyOnNoSelection]=\"true\"\n    (onChange)=\"selectedTypeFilters = $event; typeFilter$.next(selectedTypeFilters)\"\n  >\n  </c8y-select>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-status-filter\n    #statusFilter\n    [options]=\"bulkOperationStatusOptions\"\n    (onFilterChanged)=\"statusFilter$.next($event)\"\n  ></c8y-status-filter>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'left'\" itemClass=\"navbar-form\">\n  <c8y-date-picker (onDateSelected)=\"timeFilter$.next($event)\"></c8y-date-picker>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"realtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    *ngIf=\"bulkTypes?.length\"\n    class=\"btn btn-link d-flex a-i-center\"\n    (click)=\"addBulkOperation()\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i> \n    <span class=\"text-truncate\">\n      {{ 'New bulk operation' | translate }}\n    </span> \n  </button>\n</c8y-action-bar-item>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link d-flex a-i-center\" \n    title=\"{{ 'Reload' | translate }}\" \n    (click)=\"reload$.next()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'icon-spin': refreshLoading }\" class=\"m-r-4\"></i>\n    <span class=\"text-truncate\">\n      {{ 'Reload' | translate }}\n    </span>\n  </button>\n</c8y-action-bar-item>\n<!-- Empty state  -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && !isFilterApplied()\"\n>\n  <h1 class=\"c8y-icon c8y-icon-energy c8y-icon-duocolor\"></h1>\n  <h3 translate>No items to display</h3>\n  <p translate>Bulk operations will be displayed here</p>\n  <button\n    type=\"button\"\n    *ngIf=\"bulkTypes?.length\"\n    title=\"{{ 'New bulk operation' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"addBulkOperation()\"\n    translate\n  >\n    New bulk operation\n  </button>\n</div>\n\n<!-- No results empty state -->\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"(bulkOperations$ | async)?.data.length === 0 && isFilterApplied()\"\n>\n  <h1 c8yIcon=\"search\" class=\"c8y-icon c8y-icon-duocolor\"></h1>\n  <h3 translate>No results to display.</h3>\n  <p translate>Adjust or reset the filter.</p>\n  <button\n    type=\"button\"\n    title=\"{{ 'Reset filter' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"resetFilter()\"\n    translate\n  >\n    Reset filter\n  </button>\n</div>\n\n<!-- Detailed list of operations + load more button -->\n<c8y-list-group\n  class=\"m-b-24\"\n  [ngClass]=\"{ 'dd-low': (bulkOperations$ | async)?.data.length < 10 }\"\n>\n  <div\n    class=\"page-sticky-header hidden-xs c8y-list__item--double-actions c8y-list__item\"\n    *ngIf=\"(bulkOperations$ | async)?.data.length\"\n  >\n    <div class=\"c8y-list__item__block\">\n      <div class=\"c8y-list__item__icon\">\n        <i class=\"fa\"></i>\n      </div>\n      <div class=\"c8y-list__item__body\">\n        <div class=\"content-flex-57\">\n          <div class=\"col-5\">\n            {{ 'Operation' | translate }}\n          </div>\n          <div class=\"flex-grow\">\n            {{ 'Progress' | translate }}\n          </div>\n          <div class=\"col-4\">\n            {{ 'Status' | translate }}\n          </div>\n        </div>\n      </div>\n      <div class=\"c8y-list__item__actions\"></div>\n    </div>\n  </div>\n  <div\n    class=\"d-contents\"\n    *c8yFor=\"\n      let bulkOperation of bulkOperations$ | async;\n      let i = index;\n      realtime: realtime;\n      pipe: filterPipe;\n      comparator: compareOperations.bind(this);\n      loadMore: 'auto';\n    \"\n  >\n    <c8y-bulk-operation-list-item\n      [bulkOperation]=\"bulkOperation\"\n      (reload)=\"reload$.next()\"\n      (showFailedOperation)=\"openFailedOperation($event)\"\n      class=\"d-contents\"\n    >\n    </c8y-bulk-operation-list-item>\n  </div>\n</c8y-list-group>\n",
        providers: [OperationBulkRealtimeService]
    })
], BulkOperationsListComponent);
export { BulkOperationsListComponent };
//# sourceMappingURL=data:application/json;base64,