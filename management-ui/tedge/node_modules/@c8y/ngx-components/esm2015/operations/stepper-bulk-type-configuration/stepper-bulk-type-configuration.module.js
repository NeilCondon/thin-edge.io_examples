import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { StepperBulkTypeConfigurationComponent } from './stepper-bulk-type-configuration.component';
const ɵ0 = {
    type: BulkOperationType.CONFIGURATION,
    c8yIcon: 'cogs',
    name: gettext('Configuration update'),
    path: `${baseUrl}configuration`,
    component: StepperBulkTypeConfigurationComponent,
    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],
    selected: false
};
/** Module for the 'Configuration update' operation type stepper */
let StepperBulkTypeConfigurationModule = class StepperBulkTypeConfigurationModule {
};
StepperBulkTypeConfigurationModule = tslib_1.__decorate([
    NgModule({
        declarations: [StepperBulkTypeConfigurationComponent],
        imports: [
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            RepositoryModule
        ],
        providers: [
            {
                provide: HOOK_LIST_BULK_TYPE,
                useValue: ɵ0,
                multi: true
            }
        ],
        entryComponents: [StepperBulkTypeConfigurationComponent],
        exports: [StepperBulkTypeConfigurationComponent]
    })
], StepperBulkTypeConfigurationModule);
export { StepperBulkTypeConfigurationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvc3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi8iLCJzb3VyY2VzIjpbInN0ZXBwZXItYnVsay10eXBlLWNvbmZpZ3VyYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLGlCQUFpQixFQUNsQixNQUFNLHdEQUF3RCxDQUFDO0FBRWhFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO1dBZXBGO0lBQ1IsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGFBQWE7SUFDckMsT0FBTyxFQUFFLE1BQU07SUFDZixJQUFJLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQ3JDLElBQUksRUFBRSxHQUFHLE9BQU8sZUFBZTtJQUMvQixTQUFTLEVBQUUscUNBQXFDO0lBQ2hELFNBQVMsRUFBRSxDQUFDLHdCQUF3QixFQUFFLG1CQUFtQixDQUFDO0lBQzFELFFBQVEsRUFBRSxLQUFLO0NBQ2hCO0FBckJQLG1FQUFtRTtBQTRCbkUsSUFBYSxrQ0FBa0MsR0FBL0MsTUFBYSxrQ0FBa0M7Q0FBRyxDQUFBO0FBQXJDLGtDQUFrQztJQTNCOUMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMscUNBQXFDLENBQUM7UUFDckQsT0FBTyxFQUFFO1lBQ1AsVUFBVTtZQUNWLFdBQVc7WUFDWCxtQkFBbUI7WUFDbkIsMEJBQTBCO1lBQzFCLGdCQUFnQjtTQUNqQjtRQUNELFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxtQkFBbUI7Z0JBQzVCLFFBQVEsSUFRUDtnQkFDRCxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7UUFDRCxlQUFlLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztRQUN4RCxPQUFPLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztLQUNqRCxDQUFDO0dBQ1csa0NBQWtDLENBQUc7U0FBckMsa0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IENvcmVNb2R1bGUsIEZvcm1zTW9kdWxlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5TW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9yZXBvc2l0b3J5JztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9uLXN0ZXBwZXInO1xuaW1wb3J0IHtcbiAgSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgYmFzZVVybCxcbiAgQnVsa09wZXJhdGlvblR5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL2J1bGstb3BlcmF0aW9ucy1zZXJ2aWNlJztcblxuaW1wb3J0IHsgU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vc3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5jb21wb25lbnQnO1xuXG4vKiogTW9kdWxlIGZvciB0aGUgJ0NvbmZpZ3VyYXRpb24gdXBkYXRlJyBvcGVyYXRpb24gdHlwZSBzdGVwcGVyICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSxcbiAgICBSZXBvc2l0b3J5TW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gICAgICB1c2VWYWx1ZToge1xuICAgICAgICB0eXBlOiBCdWxrT3BlcmF0aW9uVHlwZS5DT05GSUdVUkFUSU9OLFxuICAgICAgICBjOHlJY29uOiAnY29ncycsXG4gICAgICAgIG5hbWU6IGdldHRleHQoJ0NvbmZpZ3VyYXRpb24gdXBkYXRlJyksXG4gICAgICAgIHBhdGg6IGAke2Jhc2VVcmx9Y29uZmlndXJhdGlvbmAsXG4gICAgICAgIGNvbXBvbmVudDogU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudCxcbiAgICAgICAgZnJhZ21lbnRzOiBbJ2M4eV9Eb3dubG9hZENvbmZpZ0ZpbGUnLCAnYzh5X0NvbmZpZ3VyYXRpb24nXSxcbiAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9XG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1N0ZXBwZXJCdWxrVHlwZUNvbmZpZ3VyYXRpb25Db21wb25lbnRdLFxuICBleHBvcnRzOiBbU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbk1vZHVsZSB7fVxuIl19