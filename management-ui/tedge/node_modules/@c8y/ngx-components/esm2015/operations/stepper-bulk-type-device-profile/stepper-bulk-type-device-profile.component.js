import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { gettext } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';
let StepperBulkTypeDeviceProfileComponent = class StepperBulkTypeDeviceProfileComponent extends BaseStepperComponent {
    goToConfirmSelection($event) {
        this.deviceTypes = get(this.selectedDeviceProfile, 'c8y_Filter.type');
        $event.stepper.next();
    }
    onDeviceProfileSelected(selectedItem) {
        this.selectedDeviceProfile = selectedItem;
    }
    retrieveOperationPrototype() {
        return {
            name: gettext('Apply device profile'),
            description: get(this.selectedDeviceProfile, 'name'),
            prototype: {
                description: `Apply device profile: ${this.selectedDeviceProfile.name}`,
                profileId: this.selectedDeviceProfile.id,
                profileName: this.selectedDeviceProfile.name,
                c8y_DeviceProfile: this.selectedDeviceProfile.c8y_DeviceProfile
            }
        };
    }
};
StepperBulkTypeDeviceProfileComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-stepper-bulk-type-device-profile',
        template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select device profile' | translate; \n      completed: !!selectedDeviceProfile;\n      buttonsDisabled: !selectedDeviceProfile; \n      onNext: goToConfirmSelection.bind(this)\"\n  >\n    <c8y-select-device-profile-step\n      (deviceProfile)=\"onDeviceProfileSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-device-profile-step>\n  </ng-container>\n  <ng-container *customStep=\"'Confirm selected device profile' | translate\">\n    <c8y-confirm-device-profile-selection-step\n      class=\"d-contents\"\n      [selectedDeviceProfile]=\"selectedDeviceProfile\"\n    ></c8y-confirm-device-profile-selection-step>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
    })
], StepperBulkTypeDeviceProfileComponent);
export { StepperBulkTypeDeviceProfileComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZGV2aWNlLXByb2ZpbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWRldmljZS1wcm9maWxlLyIsInNvdXJjZXMiOlsic3RlcHBlci1idWxrLXR5cGUtZGV2aWNlLXByb2ZpbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBTzdGLElBQWEscUNBQXFDLEdBQWxELE1BQWEscUNBQXNDLFNBQVEsb0JBQW9CO0lBRzdFLG9CQUFvQixDQUFDLE1BQThDO1FBQ2pFLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELHVCQUF1QixDQUFDLFlBQVk7UUFDbEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFlBQVksQ0FBQztJQUM1QyxDQUFDO0lBRVMsMEJBQTBCO1FBQ2xDLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1lBQ3JDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztZQUNwRCxTQUFTLEVBQUc7Z0JBQ1YsV0FBVyxFQUFFLHlCQUF5QixJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFO2dCQUN2RSxTQUFTLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7Z0JBQ3hDLFdBQVcsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSTtnQkFDNUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQjthQUN0QztTQUM1QixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUF4QlkscUNBQXFDO0lBSmpELFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxzQ0FBc0M7UUFDaEQsK3ZCQUE4RDtLQUMvRCxDQUFDO0dBQ1cscUNBQXFDLENBd0JqRDtTQXhCWSxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTdGVwIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3N0ZXBwZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSU9wZXJhdGlvbiB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEM4eVN0ZXBwZXIsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBCYXNlU3RlcHBlckNvbXBvbmVudCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyJztcbmltcG9ydCB7IE9wZXJhdGlvbkRldGFpbHMgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktc3RlcHBlci1idWxrLXR5cGUtZGV2aWNlLXByb2ZpbGUnLFxuICB0ZW1wbGF0ZVVybDogJ3N0ZXBwZXItYnVsay10eXBlLWRldmljZS1wcm9maWxlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTdGVwcGVyQnVsa1R5cGVEZXZpY2VQcm9maWxlQ29tcG9uZW50IGV4dGVuZHMgQmFzZVN0ZXBwZXJDb21wb25lbnQge1xuICBzZWxlY3RlZERldmljZVByb2ZpbGU6IElNYW5hZ2VkT2JqZWN0O1xuXG4gIGdvVG9Db25maXJtU2VsZWN0aW9uKCRldmVudDogeyBzdGVwcGVyOiBDOHlTdGVwcGVyOyBzdGVwOiBDZGtTdGVwIH0pIHtcbiAgICB0aGlzLmRldmljZVR5cGVzID0gZ2V0KHRoaXMuc2VsZWN0ZWREZXZpY2VQcm9maWxlLCAnYzh5X0ZpbHRlci50eXBlJyk7XG4gICAgJGV2ZW50LnN0ZXBwZXIubmV4dCgpO1xuICB9XG5cbiAgb25EZXZpY2VQcm9maWxlU2VsZWN0ZWQoc2VsZWN0ZWRJdGVtKSB7XG4gICAgdGhpcy5zZWxlY3RlZERldmljZVByb2ZpbGUgPSBzZWxlY3RlZEl0ZW07XG4gIH1cblxuICBwcm90ZWN0ZWQgcmV0cmlldmVPcGVyYXRpb25Qcm90b3R5cGUoKTogT3BlcmF0aW9uRGV0YWlscyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGdldHRleHQoJ0FwcGx5IGRldmljZSBwcm9maWxlJyksXG4gICAgICBkZXNjcmlwdGlvbjogZ2V0KHRoaXMuc2VsZWN0ZWREZXZpY2VQcm9maWxlLCAnbmFtZScpLFxuICAgICAgcHJvdG90eXBlOiAoe1xuICAgICAgICBkZXNjcmlwdGlvbjogYEFwcGx5IGRldmljZSBwcm9maWxlOiAke3RoaXMuc2VsZWN0ZWREZXZpY2VQcm9maWxlLm5hbWV9YCxcbiAgICAgICAgcHJvZmlsZUlkOiB0aGlzLnNlbGVjdGVkRGV2aWNlUHJvZmlsZS5pZCxcbiAgICAgICAgcHJvZmlsZU5hbWU6IHRoaXMuc2VsZWN0ZWREZXZpY2VQcm9maWxlLm5hbWUsXG4gICAgICAgIGM4eV9EZXZpY2VQcm9maWxlOiB0aGlzLnNlbGVjdGVkRGV2aWNlUHJvZmlsZS5jOHlfRGV2aWNlUHJvZmlsZVxuICAgICAgfSBhcyB1bmtub3duKSBhcyBJT3BlcmF0aW9uXG4gICAgfTtcbiAgfVxufVxuIl19