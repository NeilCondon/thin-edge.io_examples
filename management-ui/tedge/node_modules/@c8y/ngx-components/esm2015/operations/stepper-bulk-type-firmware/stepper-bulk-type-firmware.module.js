import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { SelectFirmwareComponent } from './select-firmware.component';
import { VersionOrPatchComponent } from './version-or-patch.component';
import { StepperBulkTypeFirmwareComponent } from './stepper-bulk-type-firmware.component';
const ɵ0 = {
    type: BulkOperationType.FIRMWARE,
    c8yIcon: 'c8y-firmware',
    name: gettext('Firmware update'),
    path: `${baseUrl}firmware`,
    component: StepperBulkTypeFirmwareComponent,
    fragments: ['c8y_Firmware'],
    selected: false
};
/** Module for the 'Firmware update' operation type stepper */
let StepperBulkTypeFirmwareModule = class StepperBulkTypeFirmwareModule {
};
StepperBulkTypeFirmwareModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            StepperBulkTypeFirmwareComponent,
            VersionOrPatchComponent,
            SelectFirmwareComponent
        ],
        imports: [
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            RepositoryModule
        ],
        providers: [
            {
                provide: HOOK_LIST_BULK_TYPE,
                useValue: ɵ0,
                multi: true
            }
        ],
        entryComponents: [StepperBulkTypeFirmwareComponent],
        exports: [StepperBulkTypeFirmwareComponent]
    })
], StepperBulkTypeFirmwareModule);
export { StepperBulkTypeFirmwareModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLWZpcm13YXJlLyIsInNvdXJjZXMiOlsic3RlcHBlci1idWxrLXR5cGUtZmlybXdhcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLGlCQUFpQixFQUNsQixNQUFNLHdEQUF3RCxDQUFDO0FBRWhFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO1dBbUIxRTtJQUNSLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxRQUFRO0lBQ2hDLE9BQU8sRUFBRSxjQUFjO0lBQ3ZCLElBQUksRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsSUFBSSxFQUFFLEdBQUcsT0FBTyxVQUFVO0lBQzFCLFNBQVMsRUFBRSxnQ0FBZ0M7SUFDM0MsU0FBUyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQzNCLFFBQVEsRUFBRSxLQUFLO0NBQ2hCO0FBekJQLDhEQUE4RDtBQWdDOUQsSUFBYSw2QkFBNkIsR0FBMUMsTUFBYSw2QkFBNkI7Q0FBRyxDQUFBO0FBQWhDLDZCQUE2QjtJQS9CekMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osZ0NBQWdDO1lBQ2hDLHVCQUF1QjtZQUN2Qix1QkFBdUI7U0FDeEI7UUFDRCxPQUFPLEVBQUU7WUFDUCxVQUFVO1lBQ1YsV0FBVztZQUNYLG1CQUFtQjtZQUNuQiwwQkFBMEI7WUFDMUIsZ0JBQWdCO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtnQkFDNUIsUUFBUSxJQVFQO2dCQUNELEtBQUssRUFBRSxJQUFJO2FBQ1o7U0FDRjtRQUNELGVBQWUsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO1FBQ25ELE9BQU8sRUFBRSxDQUFDLGdDQUFnQyxDQUFDO0tBQzVDLENBQUM7R0FDVyw2QkFBNkIsQ0FBRztTQUFoQyw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQ29yZU1vZHVsZSwgRm9ybXNNb2R1bGUsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL3JlcG9zaXRvcnknO1xuaW1wb3J0IHsgQnVsa09wZXJhdGlvblN0ZXBwZXJNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb24tc3RlcHBlcic7XG5pbXBvcnQge1xuICBIT09LX0xJU1RfQlVMS19UWVBFLFxuICBiYXNlVXJsLFxuICBCdWxrT3BlcmF0aW9uVHlwZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTZWxlY3RGaXJtd2FyZUNvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWZpcm13YXJlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBWZXJzaW9uT3JQYXRjaENvbXBvbmVudCB9IGZyb20gJy4vdmVyc2lvbi1vci1wYXRjaC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItYnVsay10eXBlLWZpcm13YXJlLmNvbXBvbmVudCc7XG5cbi8qKiBNb2R1bGUgZm9yIHRoZSAnRmlybXdhcmUgdXBkYXRlJyBvcGVyYXRpb24gdHlwZSBzdGVwcGVyICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZUNvbXBvbmVudCxcbiAgICBWZXJzaW9uT3JQYXRjaENvbXBvbmVudCxcbiAgICBTZWxlY3RGaXJtd2FyZUNvbXBvbmVudFxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIEJ1bGtPcGVyYXRpb25TdGVwcGVyTW9kdWxlLFxuICAgIFJlcG9zaXRvcnlNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19MSVNUX0JVTEtfVFlQRSxcbiAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgIHR5cGU6IEJ1bGtPcGVyYXRpb25UeXBlLkZJUk1XQVJFLFxuICAgICAgICBjOHlJY29uOiAnYzh5LWZpcm13YXJlJyxcbiAgICAgICAgbmFtZTogZ2V0dGV4dCgnRmlybXdhcmUgdXBkYXRlJyksXG4gICAgICAgIHBhdGg6IGAke2Jhc2VVcmx9ZmlybXdhcmVgLFxuICAgICAgICBjb21wb25lbnQ6IFN0ZXBwZXJCdWxrVHlwZUZpcm13YXJlQ29tcG9uZW50LFxuICAgICAgICBmcmFnbWVudHM6IFsnYzh5X0Zpcm13YXJlJ10sXG4gICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTdGVwcGVyQnVsa1R5cGVGaXJtd2FyZUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckJ1bGtUeXBlRmlybXdhcmVNb2R1bGUge31cbiJdfQ==