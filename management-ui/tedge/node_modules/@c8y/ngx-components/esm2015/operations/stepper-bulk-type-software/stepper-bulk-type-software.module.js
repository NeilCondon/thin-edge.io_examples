import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { ConfirmSoftwareSelectionStepComponent } from './confirm-software-selection-step.component';
import { SelectSoftwareStepComponent } from './select-software-step.component';
import { StepperBulkTypeSoftwareComponent } from './stepper-bulk-type-software.component';
const ɵ0 = {
    type: BulkOperationType.SOFTWARE,
    c8yIcon: 'c8y-tools',
    name: gettext('Software update'),
    path: `${baseUrl}software`,
    component: StepperBulkTypeSoftwareComponent,
    fragments: ['c8y_SoftwareList', 'c8y_SoftwareUpdate'],
    selected: false
};
/** Module for the 'Software update' operation type stepper */
let StepperBulkTypeSoftwareModule = class StepperBulkTypeSoftwareModule {
};
StepperBulkTypeSoftwareModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            StepperBulkTypeSoftwareComponent,
            ConfirmSoftwareSelectionStepComponent,
            SelectSoftwareStepComponent
        ],
        imports: [
            CoreModule,
            FormsModule,
            ReactiveFormsModule,
            BulkOperationStepperModule,
            RepositoryModule
        ],
        providers: [
            {
                provide: HOOK_LIST_BULK_TYPE,
                useValue: ɵ0,
                multi: true
            }
        ],
        entryComponents: [StepperBulkTypeSoftwareComponent],
        exports: [StepperBulkTypeSoftwareComponent]
    })
], StepperBulkTypeSoftwareModule);
export { StepperBulkTypeSoftwareModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtc29mdHdhcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9vcGVyYXRpb25zL3N0ZXBwZXItYnVsay10eXBlLXNvZnR3YXJlLyIsInNvdXJjZXMiOlsic3RlcHBlci1idWxrLXR5cGUtc29mdHdhcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLGlCQUFpQixFQUNsQixNQUFNLHdEQUF3RCxDQUFDO0FBRWhFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO1dBbUIxRTtJQUNSLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxRQUFRO0lBQ2hDLE9BQU8sRUFBRSxXQUFXO0lBQ3BCLElBQUksRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsSUFBSSxFQUFFLEdBQUcsT0FBTyxVQUFVO0lBQzFCLFNBQVMsRUFBRSxnQ0FBZ0M7SUFDM0MsU0FBUyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLENBQUM7SUFDckQsUUFBUSxFQUFFLEtBQUs7Q0FDaEI7QUF6QlAsOERBQThEO0FBZ0M5RCxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE2QjtDQUFHLENBQUE7QUFBaEMsNkJBQTZCO0lBL0J6QyxRQUFRLENBQUM7UUFDUixZQUFZLEVBQUU7WUFDWixnQ0FBZ0M7WUFDaEMscUNBQXFDO1lBQ3JDLDJCQUEyQjtTQUM1QjtRQUNELE9BQU8sRUFBRTtZQUNQLFVBQVU7WUFDVixXQUFXO1lBQ1gsbUJBQW1CO1lBQ25CLDBCQUEwQjtZQUMxQixnQkFBZ0I7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVDtnQkFDRSxPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixRQUFRLElBUVA7Z0JBQ0QsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO1FBQ0QsZUFBZSxFQUFFLENBQUMsZ0NBQWdDLENBQUM7UUFDbkQsT0FBTyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7S0FDNUMsQ0FBQztHQUNXLDZCQUE2QixDQUFHO1NBQWhDLDZCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBGb3Jtc01vZHVsZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyJztcbmltcG9ydCB7XG4gIEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gIGJhc2VVcmwsXG4gIEJ1bGtPcGVyYXRpb25UeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5cbmltcG9ydCB7IENvbmZpcm1Tb2Z0d2FyZVNlbGVjdGlvblN0ZXBDb21wb25lbnQgfSBmcm9tICcuL2NvbmZpcm0tc29mdHdhcmUtc2VsZWN0aW9uLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdFNvZnR3YXJlU3RlcENvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LXNvZnR3YXJlLXN0ZXAuY29tcG9uZW50JztcbmltcG9ydCB7IFN0ZXBwZXJCdWxrVHlwZVNvZnR3YXJlQ29tcG9uZW50IH0gZnJvbSAnLi9zdGVwcGVyLWJ1bGstdHlwZS1zb2Z0d2FyZS5jb21wb25lbnQnO1xuXG4vKiogTW9kdWxlIGZvciB0aGUgJ1NvZnR3YXJlIHVwZGF0ZScgb3BlcmF0aW9uIHR5cGUgc3RlcHBlciAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU3RlcHBlckJ1bGtUeXBlU29mdHdhcmVDb21wb25lbnQsXG4gICAgQ29uZmlybVNvZnR3YXJlU2VsZWN0aW9uU3RlcENvbXBvbmVudCxcbiAgICBTZWxlY3RTb2Z0d2FyZVN0ZXBDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvcmVNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSxcbiAgICBSZXBvc2l0b3J5TW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gICAgICB1c2VWYWx1ZToge1xuICAgICAgICB0eXBlOiBCdWxrT3BlcmF0aW9uVHlwZS5TT0ZUV0FSRSxcbiAgICAgICAgYzh5SWNvbjogJ2M4eS10b29scycsXG4gICAgICAgIG5hbWU6IGdldHRleHQoJ1NvZnR3YXJlIHVwZGF0ZScpLFxuICAgICAgICBwYXRoOiBgJHtiYXNlVXJsfXNvZnR3YXJlYCxcbiAgICAgICAgY29tcG9uZW50OiBTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZUNvbXBvbmVudCxcbiAgICAgICAgZnJhZ21lbnRzOiBbJ2M4eV9Tb2Z0d2FyZUxpc3QnLCAnYzh5X1NvZnR3YXJlVXBkYXRlJ10sXG4gICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTdGVwcGVyQnVsa1R5cGVTb2Z0d2FyZUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckJ1bGtUeXBlU29mdHdhcmVNb2R1bGUge31cbiJdfQ==