import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SearchGridComponent } from './search-grid.component';
import { FilteringActionType, AlertService, Status, gettext, Alert } from '@c8y/ngx-components';
let SearchResultsComponent = class SearchResultsComponent {
    constructor(route, alert) {
        this.route = route;
        this.alert = alert;
        this.filter = '';
        this.searchTerm = '';
        this.unsubscribe$ = new Subject();
    }
    ngOnInit() {
        this.route.queryParams.subscribe(params => {
            if (params.filter) {
                this.filteringName = params.filter;
            }
        });
    }
    ngAfterViewInit() {
        this.route.queryParams
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(({ filter, search }) => this.onQueryParamsChange(filter, search));
        this.searchGrid.dataGrid.searchText$.pipe(takeUntil(this.unsubscribe$)).subscribe(text => {
            if (text) {
                this.resetFilter();
            }
            this.searchTerm = text;
        });
        this.searchGrid.dataGrid.onFilter
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(() => this.resetSearch());
        // to prevent race condition (search empty):
        this.searchTerm = this.route.snapshot.queryParams.search || '';
    }
    resetSearch() {
        this.searchTerm = '';
        if (this.searchTerm) {
            this.alert.add({
                text: gettext('Search reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
        }
    }
    resetFilter() {
        this.filter = '';
        if (this.searchGrid.dataGrid.filteringApplied) {
            this.alert.add({
                text: gettext('Filter reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
            this.searchGrid.dataGrid.clearFilters();
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    onQueryParamsChange(filter, searchTerm) {
        if (!this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
        else if (this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
    }
    shouldFilter(filter) {
        if (!filter) {
            return false;
        }
        this.resetSearch();
        this.filter = filter || '';
        this.searchGrid.updateFiltering(['name'], {
            type: FilteringActionType.ApplyFilter,
            payload: {
                filteringModifier: {
                    externalFilterQuery: {
                        names: [this.filter]
                    }
                }
            }
        });
        return true;
    }
    search(searchTerm) {
        this.searchTerm = searchTerm || '';
        this.searchGrid.dataGrid.searchText$.next(this.searchTerm);
    }
};
SearchResultsComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: AlertService }
];
tslib_1.__decorate([
    ViewChild(SearchGridComponent, { static: true })
], SearchResultsComponent.prototype, "searchGrid", void 0);
SearchResultsComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-search-results',
        template: "<c8y-title>\n  <span translate class=\"p-r-4\">Search</span>\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"searchTerm\"\n    [translateParams]=\"{\n      searchHint: searchTerm\n    }\"\n    >searching \"{{ searchHint }}\"</small\n  >\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"filter\"\n    [translateParams]=\"{\n      filterHint: filter\n    }\"\n    >filtered by \"{{ filterHint }}\"</small\n  >\n</c8y-title>\n\n<c8y-search-grid [searchText]=\"searchTerm\" [filteringName]=\"filteringName\"></c8y-search-grid>\n"
    })
], SearchResultsComponent);
export { SearchResultsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXJlc3VsdHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9zZWFyY2gvIiwic291cmNlcyI6WyJzZWFyY2gtcmVzdWx0cy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNaEcsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFRakMsWUFBb0IsS0FBcUIsRUFBVSxLQUFtQjtRQUFsRCxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWM7UUFQdEUsV0FBTSxHQUFXLEVBQUUsQ0FBQztRQUNwQixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBSWhCLGlCQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQUUrQixDQUFDO0lBRTFFLFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUNqQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtB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LFdBQVc7WUFDckMsT0FBTyxFQUFFO2dCQUNQLGlCQUFpQixFQUFFO29CQUNqQixtQkFBbUIsRUFBRTt3QkFDbkIsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztxQkFDckI7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLE1BQU0sQ0FBQyxVQUFrQjtRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNGLENBQUE7O1lBekY0QixjQUFjO1lBQWlCLFlBQVk7O0FBSnRFO0lBREMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzBEQUNqQjtBQUpyQixzQkFBc0I7SUFKbEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG9CQUFvQjtRQUM5Qix5aUJBQThDO0tBQy9DLENBQUM7R0FDVyxzQkFBc0IsQ0FpR2xDO1NBakdZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25EZXN0cm95LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFNlYXJjaEdyaWRDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdBY3Rpb25UeXBlLCBBbGVydFNlcnZpY2UsIFN0YXR1cywgZ2V0dGV4dCwgQWxlcnQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXNlYXJjaC1yZXN1bHRzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1yZXN1bHRzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hSZXN1bHRzQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgZmlsdGVyOiBzdHJpbmcgPSAnJztcbiAgc2VhcmNoVGVybTogc3RyaW5nID0gJyc7XG4gIEBWaWV3Q2hpbGQoU2VhcmNoR3JpZENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSlcbiAgc2VhcmNoR3JpZDogU2VhcmNoR3JpZENvbXBvbmVudDtcbiAgZmlsdGVyaW5nTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHVuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgcHJpdmF0ZSBhbGVydDogQWxlcnRTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucm91dGUucXVlcnlQYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICBpZiAocGFyYW1zLmZpbHRlcikge1xuICAgICAgICB0aGlzLmZpbHRlcmluZ05hbWUgPSBwYXJhbXMuZmlsdGVyO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMucm91dGUucXVlcnlQYXJhbXNcbiAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCkpXG4gICAgICAuc3Vic2NyaWJlKCh7IGZpbHRlciwgc2VhcmNoIH0pID0+IHRoaXMub25RdWVyeVBhcmFtc0NoYW5nZShmaWx0ZXIsIHNlYXJjaCkpO1xuXG4gICAgdGhpcy5zZWFyY2hHcmlkLmRhdGFHcmlkLnNlYXJjaFRleHQkLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKHRleHQgPT4ge1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdGhpcy5yZXNldEZpbHRlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWFyY2hUZXJtID0gdGV4dDtcbiAgICB9KTtcblxuICAgIHRoaXMuc2VhcmNoR3JpZC5kYXRhR3JpZC5vbkZpbHRlclxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5yZXNldFNlYXJjaCgpKTtcblxuICAgIC8vIHRvIHByZXZlbnQgcmFjZSBjb25kaXRpb24gKHNlYXJjaCBlbXB0eSk6XG4gICAgdGhpcy5zZWFyY2hUZXJtID0gdGhpcy5yb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtcy5zZWFyY2ggfHwgJyc7XG4gIH1cblxuICByZXNldFNlYXJjaCgpIHtcbiAgICB0aGlzLnNlYXJjaFRlcm0gPSAnJztcbiAgICBpZiAodGhpcy5zZWFyY2hUZXJtKSB7XG4gICAgICB0aGlzLmFsZXJ0LmFkZCh7XG4gICAgICAgIHRleHQ6IGdldHRleHQoJ1NlYXJjaCByZXNldC4gRnVsbCB0ZXh0IHNlYXJjaCBkb2VzIG5vdCBzdXBwb3J0IGZpbHRlcmluZy4nKSxcbiAgICAgICAgdHlwZTogU3RhdHVzLldBUk5JTkcsXG4gICAgICAgIHRpbWVvdXQ6IDUwMDBcbiAgICAgIH0gYXMgQWxlcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0RmlsdGVyKCkge1xuICAgIHRoaXMuZmlsdGVyID0gJyc7XG4gICAgaWYgKHRoaXMuc2VhcmNoR3JpZC5kYXRhR3JpZC5maWx0ZXJpbmdBcHBsaWVkKSB7XG4gICAgICB0aGlzLmFsZXJ0LmFkZCh7XG4gICAgICAgIHRleHQ6IGdldHRleHQoJ0ZpbHRlciByZXNldC4gRnVsbCB0ZXh0IHNlYXJjaCBkb2VzIG5vdCBzdXBwb3J0IGZpbHRlcmluZy4nKSxcbiAgICAgICAgdHlwZTogU3RhdHVzLldBUk5JTkcsXG4gICAgICAgIHRpbWVvdXQ6IDUwMDBcbiAgICAgIH0gYXMgQWxlcnQpO1xuICAgICAgdGhpcy5zZWFyY2hHcmlkLmRhdGFHcmlkLmNsZWFyRmlsdGVycygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQoKTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvblF1ZXJ5UGFyYW1zQ2hhbmdlKGZpbHRlcjogc3RyaW5nLCBzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMuc2hvdWxkRmlsdGVyKGZpbHRlcikgJiYgc2VhcmNoVGVybSkge1xuICAgICAgdGhpcy5zZWFyY2goc2VhcmNoVGVybSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNob3VsZEZpbHRlcihmaWx0ZXIpICYmIHNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMuc2VhcmNoKHNlYXJjaFRlcm0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkRmlsdGVyKGZpbHRlcikge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMucmVzZXRTZWFyY2goKTtcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlciB8fCAnJztcbiAgICB0aGlzLnNlYXJjaEdyaWQudXBkYXRlRmlsdGVyaW5nKFsnbmFtZSddLCB7XG4gICAgICB0eXBlOiBGaWx0ZXJpbmdBY3Rpb25UeXBlLkFwcGx5RmlsdGVyLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBmaWx0ZXJpbmdNb2RpZmllcjoge1xuICAgICAgICAgIGV4dGVybmFsRmlsdGVyUXVlcnk6IHtcbiAgICAgICAgICAgIG5hbWVzOiBbdGhpcy5maWx0ZXJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwcml2YXRlIHNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlYXJjaFRlcm0gPSBzZWFyY2hUZXJtIHx8ICcnO1xuICAgIHRoaXMuc2VhcmNoR3JpZC5kYXRhR3JpZC5zZWFyY2hUZXh0JC5uZXh0KHRoaXMuc2VhcmNoVGVybSk7XG4gIH1cbn1cbiJdfQ==