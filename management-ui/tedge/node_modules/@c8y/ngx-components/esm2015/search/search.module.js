import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CoreModule, HOOK_ONCE_ROUTE, HOOK_SEARCH } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { SearchBoxComponent } from './search-box.component';
import { SearchResultsComponent } from './search-results.component';
import { SearchGridComponent } from './search-grid.component';
import { SearchService } from './search.service';
const ɵ0 = [
    {
        path: 'assetsearch',
        component: SearchResultsComponent
    }
], ɵ1 = [
    {
        template: SearchBoxComponent
    }
];
let SearchModule = class SearchModule {
};
SearchModule = tslib_1.__decorate([
    NgModule({
        declarations: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
        imports: [CoreModule, DeviceGridModule, BsDropdownModule],
        entryComponents: [SearchResultsComponent, SearchBoxComponent],
        exports: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
        providers: [
            SearchService,
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            },
            {
                provide: HOOK_SEARCH,
                useValue: ɵ1,
                multi: true
            }
        ]
    })
], SearchModule);
export { SearchModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvc2VhcmNoLyIsInNvdXJjZXMiOlsic2VhcmNoLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQVUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7V0FXakM7SUFDUjtRQUNFLElBQUksRUFBRSxhQUFhO1FBQ25CLFNBQVMsRUFBRSxzQkFBc0I7S0FDbEM7Q0FDRixPQUtTO0lBQ1I7UUFDRSxRQUFRLEVBQUUsa0JBQWtCO0tBQzdCO0NBQ1U7QUFLbkIsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtDQUFHLENBQUE7QUFBZixZQUFZO0lBNUJ4QixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQztRQUMvRSxPQUFPLEVBQUUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUM7UUFDekQsZUFBZSxFQUFFLENBQUMsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUM7UUFDN0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUM7UUFDMUUsU0FBUyxFQUFFO1lBQ1QsYUFBYTtZQUNiO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixRQUFRLElBS1A7Z0JBQ0QsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixRQUFRLElBSUs7Z0JBQ2IsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQztHQUNXLFlBQVksQ0FBRztTQUFmLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgSE9PS19PTkNFX1JPVVRFLCBIT09LX1NFQVJDSCwgU2VhcmNoIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZCc7XG5pbXBvcnQgeyBCc0Ryb3Bkb3duTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9kcm9wZG93bic7XG5pbXBvcnQgeyBTZWFyY2hCb3hDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1ib3guY29tcG9uZW50JztcbmltcG9ydCB7IFNlYXJjaFJlc3VsdHNDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1yZXN1bHRzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWFyY2hHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSB9IGZyb20gJy4vc2VhcmNoLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtTZWFyY2hSZXN1bHRzQ29tcG9uZW50LCBTZWFyY2hCb3hDb21wb25lbnQsIFNlYXJjaEdyaWRDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbQ29yZU1vZHVsZSwgRGV2aWNlR3JpZE1vZHVsZSwgQnNEcm9wZG93bk1vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1NlYXJjaFJlc3VsdHNDb21wb25lbnQsIFNlYXJjaEJveENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtTZWFyY2hSZXN1bHRzQ29tcG9uZW50LCBTZWFyY2hCb3hDb21wb25lbnQsIFNlYXJjaEdyaWRDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtcbiAgICBTZWFyY2hTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfT05DRV9ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwYXRoOiAnYXNzZXRzZWFyY2gnLFxuICAgICAgICAgIGNvbXBvbmVudDogU2VhcmNoUmVzdWx0c0NvbXBvbmVudFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfU0VBUkNILFxuICAgICAgdXNlVmFsdWU6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRlbXBsYXRlOiBTZWFyY2hCb3hDb21wb25lbnRcbiAgICAgICAgfVxuICAgICAgXSBhcyBTZWFyY2hbXSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaE1vZHVsZSB7fVxuIl19