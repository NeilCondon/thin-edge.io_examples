import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { find, get, isUndefined, some } from 'lodash-es';
let SearchService = class SearchService extends SubAssetsService {
    constructor() {
        super(...arguments);
        this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        this.DEFAULT_PAGE_SIZE = 50;
        this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping'
        ];
        this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_',
            'c8y_CepAgent'
        ];
        this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    filterOnlyAssets(data) {
        return data.filter(mo => mo.c8y_IsDeviceGroup || this.isAnyDevice(mo));
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const rootQuery = {
            __filter: {
                __and: { __not: { __has: `c8y_IsBinary` } }
            }
        };
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     */
    search(term) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: this.DEFAULT_PAGE_SIZE,
            withChildren: false
        });
    }
    isRootDevice(mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    }
    isAnyDevice(mo) {
        const isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    }
    hasFragmentOrTypeFromBlacklist(mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    }
    hasTypeFromBlacklist(mo) {
        const moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, type => moType.includes(type));
    }
    hasFragmentFromBlacklist(mo) {
        return find(this.FRAGMENTS_FOR_NO_DEVICE, f => !isUndefined(mo[f]));
    }
};
SearchService = tslib_1.__decorate([
    Injectable()
], SearchService);
export { SearchService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3NlYXJjaC8iLCJzb3VyY2VzIjpbInNlYXJjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHekQsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYyxTQUFRLGdCQUFnQjtJQURuRDs7UUFFWSw0QkFBdUIsR0FBRyxvQkFBb0IsQ0FBQztRQUMvQyxzQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDaEIsNEJBQXVCLEdBQUc7WUFDekMsZUFBZTtZQUNmLFlBQVk7WUFDWixTQUFTO1lBQ1QseUJBQXlCO1lBQ3pCLGNBQWM7WUFDZCxjQUFjO1lBQ2QsbUJBQW1CO1lBQ25CLFdBQVc7WUFDWCxrREFBa0Q7WUFDbEQscURBQXFEO1lBQ3JELGNBQWM7WUFDZCxrQkFBa0I7WUFDbEIsaUNBQWlDO1NBQ2xDLENBQUM7UUFDZSx3QkFBbUIsR0FBRztZQUNyQyx1QkFBdUI7WUFDdkIsY0FBYztZQUNkLGVBQWU7WUFDZixjQUFjO1lBQ2QsdUJBQXVCO1lBQ3ZCLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsc0JBQXNCO1lBQ3RCLHdCQUF3QjtZQUN4QixnQkFBZ0I7WUFDaEIseUJBQXlCO1lBQ3pCLGdCQUFnQjtZQUNoQixnQkFBZ0I7WUFDaEIsa0JBQWtCO1lBQ2xCLG1CQUFtQjtZQUNuQixxQkFBcUI7WUFDckIseUJBQXlCO1lBQ3pCLHlCQUF5QjtZQUN6Qiw0QkFBNEI7WUFDNUIsY0FBYztTQUNmLENBQUM7UUFDZSx5QkFBb0IsR0FBRyxjQUFjLENBQUM7SUEwRHpELENBQUM7SUF4REM7Ozs7T0FJRztJQUNILGdCQUFnQixDQUFDLElBQXNCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELDRCQUE0QixDQUFDLE9BQU8sRUFBRSxVQUFVO1FBQzlDLE1BQU0sU0FBUyxHQUFHO1lBQ2hCLFFBQVEsRUFBRTtnQkFDUixLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLEVBQUU7YUFDNUM7U0FDRixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDeEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLElBQVk7UUFDakIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1lBQ2hDLElBQUksRUFBRSxJQUFJO1lBQ1YsY0FBYyxFQUFFLElBQUk7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDaEMsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFlBQVksQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sV0FBVyxDQUFDLEVBQUU7UUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU8sOEJBQThCLENBQUMsRUFBRTtRQUN2QyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVPLG9CQUFvQixDQUFDLEVBQUU7UUFDN0IsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTyx3QkFBd0IsQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGLENBQUE7QUFsR1ksYUFBYTtJQUR6QixVQUFVLEVBQUU7R0FDQSxhQUFhLENBa0d6QjtTQWxHWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9zdWItYXNzZXRzJztcbmltcG9ydCB7IGZpbmQsIGdldCwgaXNVbmRlZmluZWQsIHNvbWUgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VhcmNoU2VydmljZSBleHRlbmRzIFN1YkFzc2V0c1NlcnZpY2Uge1xuICBwcm90ZWN0ZWQgR1JJRF9DT05GSUdfU1RPUkFHRV9LRVkgPSAnc2VhcmNoLWdyaWQtY29uZmlnJztcbiAgcHJvdGVjdGVkIERFRkFVTFRfUEFHRV9TSVpFID0gNTA7XG4gIHByaXZhdGUgcmVhZG9ubHkgRlJBR01FTlRTX0ZPUl9OT19ERVZJQ0UgPSBbXG4gICAgJ2M4eV9EYXNoYm9hcmQnLFxuICAgICdjOHlfUmVwb3J0JyxcbiAgICAnYzh5X0twaScsXG4gICAgJ2M4eV9FeHBvcnRDb25maWd1cmF0aW9uJyxcbiAgICAnYzh5X0lzQmluYXJ5JyxcbiAgICAnYzh5X05vRGV2aWNlJyxcbiAgICAnYzh5X0lzRGV2aWNlR3JvdXAnLFxuICAgICdjOHlfR3JvdXAnLFxuICAgICdjb21fY3VtdWxvY2l0eV9tb2RlbF9zbWFydHJlc3RfU21hcnRSZXN0VGVtcGxhdGUnLFxuICAgICdjb21fY3VtdWxvY2l0eV9tb2RlbF9kZXZpY2VzaW11bGF0b3JfU2Vuc29yVGVtcGxhdGUnLFxuICAgICdfYXR0YWNobWVudHMnLFxuICAgICdjOHlfSXNEZXZpY2VUeXBlJyxcbiAgICAnYzh5X29iamVjdG1hcHBpbmdfT2JqZWN0TWFwcGluZydcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBUWVBFU19GT1JfTk9fREVWSUNFID0gW1xuICAgICdjOHlfQ29uZmlndXJhdGlvbkR1bXAnLFxuICAgICdjOHlfRmlybXdhcmUnLFxuICAgICdjOHlfU21hcnRSdWxlJyxcbiAgICAnYzh5X1NvZnR3YXJlJyxcbiAgICAnaW1wYWN0X29iamVjdF9tYXBwaW5nJyxcbiAgICAnYzh5X1VzZXJQcmVmZXJlbmNlJyxcbiAgICAnYzh5X1RlbmFudFBvbGljeScsXG4gICAgJ2M4eV9Qcml2YXRlU21hcnRSdWxlJyxcbiAgICAnYzh5X1NtYXJ0UmVzdDJUZW1wbGF0ZScsXG4gICAgJ2M4eV9Kc29uU2NoZW1hJyxcbiAgICAnYzh5X0RldmljZVNoZWxsVGVtcGxhdGUnLFxuICAgICdjOHlfRGVtb1N0YXR1cycsXG4gICAgJ2M4eV9EYXRhQnJva2VyJyxcbiAgICAnYzh5X0FwcGxpY2F0aW9uXycsXG4gICAgJ2JyYW5kaW5nVmFyaWFibGVzJyxcbiAgICAnYzh5X0RldmljZVNpbXVsYXRvcicsXG4gICAgJ2M4eV9DZXJ0aWZpY2F0ZU1ldGFkYXRhJyxcbiAgICAnbHdtMm1fcG9zdF9yZWdpc3RyYXRpb24nLFxuICAgICdjOHlfbWljcm9zZXJ2aWNlX21hbmlmZXN0XycsXG4gICAgJ2M4eV9DZXBBZ2VudCdcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBERVZJQ0VfRlJBR01FTlRfVFlQRSA9ICdjOHlfSXNEZXZpY2UnO1xuXG4gIC8qKlxuICAgKiBXaWxsIHJldHVybiBvbmx5IHZhbGlkIGFzc2V0cyAoZ3JvdXBzIGFuZCBkZXZpY2VzKSBhbmQgZmlsdGVyIG91dFxuICAgKiBub25lIHVzZWZ1bCBpbnZlbnRvcmllcyAoZS5nLiBjOHlfSnNvblNjaGVtYSkuXG4gICAqIEBwYXJhbSBkYXRhIEFsbCBtYW5hZ2VkIG9iamVjdHMgdGhhdCBzaG91bGQgYmUgZmlsdGVyZWQuXG4gICAqL1xuICBmaWx0ZXJPbmx5QXNzZXRzKGRhdGE6IElNYW5hZ2VkT2JqZWN0W10pIHtcbiAgICByZXR1cm4gZGF0YS5maWx0ZXIobW8gPT4gbW8uYzh5X0lzRGV2aWNlR3JvdXAgfHwgdGhpcy5pc0FueURldmljZShtbykpO1xuICB9XG5cbiAgYnVpbGRDb21iaW5lZFJvb3RRdWVyeUZpbHRlcihjb2x1bW5zLCBwYWdpbmF0aW9uKSB7XG4gICAgY29uc3Qgcm9vdFF1ZXJ5ID0ge1xuICAgICAgX19maWx0ZXI6IHtcbiAgICAgICAgX19hbmQ6IHsgX19ub3Q6IHsgX19oYXM6IGBjOHlfSXNCaW5hcnlgIH0gfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXNlclF1ZXJ5ID0gdGhpcy5nZXRRdWVyeU9iaihjb2x1bW5zLCBwYWdpbmF0aW9uKTtcbiAgICBjb25zdCBxdWVyeVBhcnQgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZE9yZGVyYnlzKHJvb3RRdWVyeSwgdXNlclF1ZXJ5Ll9fb3JkZXJieSwgJ2FwcGVuZCcpO1xuICAgIGNvbnN0IGZ1bGxRdWVyeSA9IHRoaXMucXVlcmllc1V0aWwuYWRkQW5kRmlsdGVyKHF1ZXJ5UGFydCwgdXNlclF1ZXJ5Ll9fZmlsdGVyKTtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KGZ1bGxRdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZnVsbC10ZXh0IHNlYXJjaCByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0gdGVybSBUaGUgc2VhcmNoIHRlcm0uXG4gICAqL1xuICBzZWFyY2godGVybTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KHtcbiAgICAgIHRleHQ6IHRlcm0sXG4gICAgICB3aXRoVG90YWxQYWdlczogdHJ1ZSxcbiAgICAgIHBhZ2VTaXplOiB0aGlzLkRFRkFVTFRfUEFHRV9TSVpFLFxuICAgICAgd2l0aENoaWxkcmVuOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Jvb3REZXZpY2UobW8pIHtcbiAgICByZXR1cm4gISFtb1t0aGlzLkRFVklDRV9GUkFHTUVOVF9UWVBFXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNBbnlEZXZpY2UobW8pIHtcbiAgICBjb25zdCBpc0RldmljZSA9IHRoaXMuaXNSb290RGV2aWNlKG1vKSB8fCAhdGhpcy5oYXNGcmFnbWVudE9yVHlwZUZyb21CbGFja2xpc3QobW8pO1xuICAgIHJldHVybiBpc0RldmljZTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzRnJhZ21lbnRPclR5cGVGcm9tQmxhY2tsaXN0KG1vKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzVHlwZUZyb21CbGFja2xpc3QobW8pIHx8IHRoaXMuaGFzRnJhZ21lbnRGcm9tQmxhY2tsaXN0KG1vKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzVHlwZUZyb21CbGFja2xpc3QobW8pIHtcbiAgICBjb25zdCBtb1R5cGUgPSBnZXQobW8sICd0eXBlJywgJycpO1xuICAgIHJldHVybiBzb21lKHRoaXMuVFlQRVNfRk9SX05PX0RFVklDRSwgdHlwZSA9PiBtb1R5cGUuaW5jbHVkZXModHlwZSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNGcmFnbWVudEZyb21CbGFja2xpc3QobW8pIHtcbiAgICByZXR1cm4gZmluZCh0aGlzLkZSQUdNRU5UU19GT1JfTk9fREVWSUNFLCBmID0+ICFpc1VuZGVmaW5lZChtb1tmXSkpO1xuICB9XG59XG4iXX0=