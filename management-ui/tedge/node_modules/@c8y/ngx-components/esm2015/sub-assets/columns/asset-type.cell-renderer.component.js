import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
let AssetTypeCellRendererComponent = class AssetTypeCellRendererComponent {
    constructor(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    ngOnInit() {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    }
    getIconTitle(icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    }
};
AssetTypeCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGroupService }
];
AssetTypeCellRendererComponent = tslib_1.__decorate([
    Component({
        template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
    })
], AssetTypeCellRendererComponent);
export { AssetTypeCellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvc3ViLWFzc2V0cy8iLCJzb3VyY2VzIjpbImNvbHVtbnMvYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFLMUUsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFLekMsWUFDUyxPQUE0QixFQUMzQixrQkFBc0M7UUFEdkMsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUM3QyxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLFlBQVksQ0FBQyxJQUFZO1FBQy9CLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxXQUFXO2dCQUNkLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFCLEtBQUssaUJBQWlCO2dCQUNwQixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoQyxLQUFLLDJCQUEyQjtnQkFDOUIsT0FBTyx1QkFBdUIsQ0FBQztZQUNqQyxLQUFLLGtCQUFrQjtnQkFDckIsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakM7Z0JBQ0UsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUF6Qm1CLG1CQUFtQjtZQUNQLGtCQUFrQjs7QUFQckMsOEJBQThCO0lBSDFDLFNBQVMsQ0FBQztRQUNULCtQQUF3RDtLQUN6RCxDQUFDO0dBQ1csOEJBQThCLENBK0IxQztTQS9CWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2VsbFJlbmRlcmVyQ29udGV4dCwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRGV2aWNlR3JvdXBTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGdyb3VwSWNvbjogc3RyaW5nO1xuICBpc0FueUdyb3VwOiBib29sZWFuO1xuICBpc0RldmljZTogYm9vbGVhbjtcbiAgaWNvblRpdGxlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0LFxuICAgIHByaXZhdGUgZGV2aWNlR3JvdXBTZXJ2aWNlOiBEZXZpY2VHcm91cFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaXNBbnlHcm91cCA9IHRoaXMuZGV2aWNlR3JvdXBTZXJ2aWNlLmlzQW55R3JvdXAodGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuaXNEZXZpY2UgPSB0aGlzLmRldmljZUdyb3VwU2VydmljZS5pc0RldmljZSh0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5ncm91cEljb24gPSB0aGlzLmRldmljZUdyb3VwU2VydmljZS5pY29uKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmljb25UaXRsZSA9IHRoaXMuZ2V0SWNvblRpdGxlKHRoaXMuZ3JvdXBJY29uKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SWNvblRpdGxlKGljb246IHN0cmluZykge1xuICAgIHN3aXRjaCAoaWNvbikge1xuICAgICAgY2FzZSAnYzh5LWdyb3VwJzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ0dyb3VwJyk7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtc21hcnQnOlxuICAgICAgICByZXR1cm4gZ2V0dGV4dCgnU21hcnQgZ3JvdXAnKTtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cC1yZW1vdGUtaW5hY3RpdmUnOlxuICAgICAgICByZXR1cm4gJ0luYWN0aXZlIHJlbW90ZSBncm91cCc7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtcmVtb3RlJzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ1JlbW90ZSBncm91cCcpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ0NoaWxkIGRldmljZScpO1xuICAgIH1cbiAgfVxufVxuIl19