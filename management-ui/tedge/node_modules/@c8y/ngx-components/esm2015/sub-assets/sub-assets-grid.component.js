import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { IManagedObject, SmartGroupsService } from '@c8y/client';
import { DataGridComponent, gettext } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
let SubAssetsGridComponent = class SubAssetsGridComponent {
    constructor(subAssetsGridService, bsModalService, smartGroupsService) {
        this.subAssetsGridService = subAssetsGridService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.title = gettext('Subassets');
        this.emptyStateText = gettext('Add your first group or assign devices using the buttons on the toolbar.');
        this.loadingItemsLabel = gettext('Loading assetsâ€¦');
        this.selectable = false;
        this.baseQuery = {};
        this.filterable = true;
        this.sortable = true;
        this.onColumnsChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.pagination = this.subAssetsGridService.getDefaultPagination();
        this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    get columns() {
        return this._columns;
    }
    set columns(value) {
        if (value) {
            this._columns = this.subAssetsGridService.getUserConfiguredColumns(value);
        }
        else {
            this._columns = this.subAssetsGridService.getUserConfiguredColumns(this.subAssetsGridService.getDefaultColumns());
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.subAssetsGridService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.subAssetsGridService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        }
    }
    get isRootGroup() {
        return !this.parentGroup;
    }
    get getInfiniteScrollMode() {
        return this.isRootGroup && this.subAssetsGridService.isUsingInventoryRoles()
            ? 'auto'
            : undefined;
    }
    set _displayOptions(displayOptions) {
        this.displayOptions = Object.assign({}, this.displayOptions, displayOptions);
    }
    ngOnInit() {
        this.columns = this.subAssetsGridService.getDefaultColumns(this.filterable, this.sortable);
        if (!this.filterable || !this.sortable) {
            this.columns.forEach(column => {
                column.filterable = this.filterable;
                column.sortable = this.sortable;
            });
        }
        this.setActionControls();
    }
    setActionControls() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const actionControls = [];
            const { data: isMicroserviceInstalled } = yield this.smartGroupsService.isSmartGroupsV2MicroserviceInstalled();
            const deleteAction = {
                type: "DELETE" /* Delete */,
                callback: (asset) => this.onDeleteAsset(asset, this.parentGroup),
                showIf: (asset) => {
                    if (this.smartGroupsService.isSmartGroupV2(asset)) {
                        return isMicroserviceInstalled ? this.subAssetsGridService.canDeleteSmartGroup() : false;
                    }
                    if (this.smartGroupsService.isSmartGroup(asset)) {
                        return this.subAssetsGridService.canDeleteSmartGroup();
                    }
                    return true;
                }
            };
            actionControls.push(deleteAction);
            const unassignAction = {
                type: 'UNASSIGN',
                icon: 'unlink',
                text: gettext('Unassign'),
                callback: (asset) => this.onUnassignAsset(asset, this.parentGroup),
                showIf: (asset) => this.subAssetsGridService.isDevice(asset) &&
                    !this.subAssetsGridService.isSmartGroup(this.parentGroup)
            };
            actionControls.push(unassignAction);
            if (!this.actionControls) {
                this.actionControls = actionControls;
            }
        });
    }
    onUnassignAsset(asset, parentRef) {
        const initialState = {
            asset
        };
        const modalRef = this.bsModalService.show(UnassignModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe((result) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (result) {
                yield this.subAssetsGridService.unassignAsset(asset, parentRef);
                this.refresh.emit();
            }
        }));
    }
    onDeleteAsset(asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const initialState = {
                showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
                asset,
                showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                    !this.smartGroupsService.isSmartGroupV2(asset)
            };
            const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
            modalRef.content.closeSubject.subscribe((result) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (result) {
                    this.subAssetsGridService.uiOnlyCountersUpdate.next('DECREASE');
                    yield this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                    this.refresh.emit();
                }
            }));
        });
    }
    ngOnChanges(changes) {
        if (changes.parentGroup && !changes.parentGroup.firstChange) {
            this.dataGrid.reload();
        }
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const promises = [];
            let counters;
            promises.push(this.subAssetsGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
            const action = this.subAssetsGridService.uiOnlyCountersUpdate.value;
            if (action) {
                counters = this.uiOnlyCountersUpdate(action);
                this.subAssetsGridService.uiOnlyCountersUpdate.next(null);
            }
            else {
                promises.push(this.subAssetsGridService.getTotal(this.parentGroup, this.baseQuery));
                promises.push(this.subAssetsGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
            }
            const [dataResponse, size, filteredSize] = yield Promise.all(promises);
            if (!counters) {
                counters = {
                    size,
                    filteredSize
                };
            }
            this.onColumnsChange.emit(dataSourceModifier.columns);
            return Object.assign({ res: dataResponse.res, data: dataResponse.data, paging: dataResponse.paging }, counters);
        });
    }
    configChange(config) {
        this.subAssetsGridService.saveConfig(config);
    }
    // workaround since the totalPages value is cached on the BE
    uiOnlyCountersUpdate(action) {
        const currentAllItemsCount = this.dataGrid.filteringLabelsParams.allItemsCount;
        const currentFilteredItemsCount = this.dataGrid.filteringLabelsParams.filteredItemsCount;
        let counters;
        if (action === 'DECREASE') {
            counters = {
                size: currentAllItemsCount - 1,
                filteredSize: currentFilteredItemsCount - 1
            };
        }
        if (action === 'INCREASE') {
            counters = {
                size: currentAllItemsCount + 1,
                filteredSize: currentFilteredItemsCount + 1
            };
        }
        return counters;
    }
};
SubAssetsGridComponent.ctorParameters = () => [
    { type: SubAssetsService },
    { type: BsModalService },
    { type: SmartGroupsService }
];
tslib_1.__decorate([
    Input('parent-group')
], SubAssetsGridComponent.prototype, "parentGroup", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "refresh", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "emptyStateText", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "loadingItemsLabel", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "columns", null);
tslib_1.__decorate([
    Input('pagination')
], SubAssetsGridComponent.prototype, "_pagination", null);
tslib_1.__decorate([
    Input('actionControls')
], SubAssetsGridComponent.prototype, "_actionControls", null);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "selectable", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "baseQuery", void 0);
tslib_1.__decorate([
    Input('bulkActionControls')
], SubAssetsGridComponent.prototype, "_bulkActionControls", null);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "filterable", void 0);
tslib_1.__decorate([
    Input()
], SubAssetsGridComponent.prototype, "sortable", void 0);
tslib_1.__decorate([
    Output()
], SubAssetsGridComponent.prototype, "onColumnsChange", void 0);
tslib_1.__decorate([
    Output()
], SubAssetsGridComponent.prototype, "itemsSelect", void 0);
tslib_1.__decorate([
    ViewChild(DataGridComponent, { static: true })
], SubAssetsGridComponent.prototype, "dataGrid", void 0);
tslib_1.__decorate([
    Input('displayOptions')
], SubAssetsGridComponent.prototype, "_displayOptions", null);
SubAssetsGridComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-sub-assets-grid',
        template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [refresh]=\"refresh\"\n  [displayOptions]=\"displayOptions\"\n  (onConfigChange)=\"configChange($event)\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  class=\"d-contents\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"c8y-group-add\" class=\"c8y-icon-duocolor\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No items to display.' | translate }}</strong>\n      </p>\n      <small>{{ emptyStateText | translate }}</small>\n    </div>\n  </div>\n</c8y-data-grid>\n"
    })
], SubAssetsGridComponent);
export { SubAssetsGridComponent };
//# sourceMappingURL=data:application/json;base64,