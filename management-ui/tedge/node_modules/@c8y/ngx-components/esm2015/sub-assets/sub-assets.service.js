import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, IRule, QueriesUtil, SmartGroupsService, SmartRulesService, UserService } from '@c8y/client';
import { ActionControl, AlertService, AppStateService, BulkActionControl, gettext, Pagination, Permissions } from '@c8y/ngx-components';
import { AssetNodeService, DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
import { AlarmsDeviceGridColumn, DeviceGridService, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AssetTypeGridColumn } from './columns/asset-type-grid-column';
let SubAssetsService = class SubAssetsService extends DeviceGridService {
    constructor(translateService, inventoryService, appState, user, assetNodeService, deviceGroupService, smartGroupsService, smartRulesService, alertService, permissionsService) {
        super(inventoryService, translateService);
        this.translateService = translateService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.user = user;
        this.assetNodeService = assetNodeService;
        this.deviceGroupService = deviceGroupService;
        this.smartGroupsService = smartGroupsService;
        this.smartRulesService = smartRulesService;
        this.alertService = alertService;
        this.permissionsService = permissionsService;
        this.uiOnlyCountersUpdate = new BehaviorSubject(null);
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'sub-assets-grid-config';
        this.IS_DEVICE_GROUP_FRAGMENT = 'c8y_IsDeviceGroup';
        this.IS_DYNAMIC_GROUP_FRAGMENT = 'c8y_IsDynamicGroup';
    }
    getDefaultColumns(filterable = true, sortable = true) {
        const defaultColumns = [
            new AssetTypeGridColumn({ sortOrder: 'desc' }),
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getDefaultPagination() {
        const { pagination } = this.getConfig();
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [];
    }
    unassignAsset(asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { id: assetId } = asset;
            const { id: parentId } = parentRef;
            if (this.isDevice(asset)) {
                try {
                    yield this.inventoryService.childAssetsRemove(assetId, parentId);
                    const alertMessage = this.translateService.instant(gettext('Asset unassigned.'));
                    this.alertService.success(alertMessage);
                }
                catch (error) {
                    const alertMessage = this.translateService.instant(gettext('Could not unassign devices.'));
                    this.alertService.danger(alertMessage);
                }
                yield this.deactivateSmartrulesForAsset(asset, parentRef);
            }
        });
    }
    isDevice(asset) {
        return (!asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) &&
            !asset.hasOwnProperty(this.IS_DYNAMIC_GROUP_FRAGMENT));
    }
    deleteAsset(asset, parentRef, params = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const isGroup = asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) ||
                this.smartGroupsService.isSmartGroup(asset);
            if (isGroup) {
                yield this.deleteGroup(asset, params);
            }
            else {
                yield this.deleteDevice(asset, params);
            }
            if (parentRef &&
                !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)) {
                yield this.deactivateSmartrulesForAsset(asset, parentRef);
            }
        });
    }
    shouldShowWithDeviceUserCheckbox(asset) {
        const { owner, c8y_IsDevice: isRootDevice } = asset;
        const hasDeviceUserAsOwner = asset.owner && this.isDeviceUser(owner);
        return Boolean(isRootDevice && hasDeviceUserAsOwner);
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getData(columns, pagination, parentReference, baseQuery = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const isRoot = !parentReference;
            if (isRoot) {
                const query = this.buildCombinedRootQueryFilter(columns, pagination);
                return this.assetNodeService.getRootNodes(Object.assign({}, pagination, { query }));
            }
            const filters = Object.assign({}, this.getAssetsFilters(columns, pagination, baseQuery), { withParents: false });
            if (this.deviceGroupService.isGroup(parentReference)) {
                return this.assetNodeService.getGroupItems(parentReference.id, filters);
            }
            if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                return this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters);
            }
            if (this.deviceGroupService.isDevice(parentReference)) {
                return this.assetNodeService.getDeviceChildren(parentReference.id, filters);
            }
        });
    }
    getCount(columns, pagination, parentReference, baseQuery = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const defaultFilters = {
                pageSize: 1,
                withChildren: false
            };
            const filters = !parentReference
                ? Object.assign({ query: this.buildCombinedRootQueryFilter(columns, pagination) }, defaultFilters) : Object.assign({}, this.getAssetsFilters(columns, pagination, baseQuery), defaultFilters);
            return this.getAssetsStatistics(parentReference, filters);
        });
    }
    getTotal(parentReference, baseQuery = {}) {
        const queryFilter = this.assetNodeService.rootQueryFilter();
        const query = !parentReference
            ? this.queriesUtil.addAndFilter(queryFilter, baseQuery)
            : baseQuery;
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            withChildren: false,
            withTotalPages: true,
            pageSize: 1
        };
        return this.getAssetsStatistics(parentReference, filters);
    }
    canEditGroup(group) {
        const currentUser = this.appState.currentUser.value;
        const hasAdminRole = this.user.hasAnyRole(currentUser, ['ROLE_INVENTORY_ADMIN']);
        const isOwner = group.owner === currentUser.userName;
        return hasAdminRole || isOwner;
    }
    canEditSmartGroup() {
        const SMART_GROUPS_ROLES_EDIT = ['ROLE_SMARTGROUP_UPDATE', 'ROLE_SMARTGROUP_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_EDIT);
    }
    canDeleteSmartGroup() {
        const SMART_GROUPS_ROLES_DELETE = ['ROLE_SMARTGROUP_ADMIN', 'ROLE_INVENTORY_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_DELETE);
    }
    isSmartGroup(group) {
        return this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group);
    }
    isUsingInventoryRoles() {
        const currentUser = this.appState.currentUser.value;
        const hasAnyInventoryRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_READ',
            'ROLE_INVENTORY_CREATE'
        ]);
        return !hasAnyInventoryRole;
    }
    getAssetsStatistics(parentReference, filters) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const isRoot = !parentReference;
            if (isRoot) {
                return (yield this.assetNodeService.getRootNodes(filters)).paging.totalPages;
            }
            if (this.deviceGroupService.isGroup(parentReference)) {
                return (yield this.assetNodeService.getGroupItems(parentReference.id, filters)).paging
                    .totalPages;
            }
            if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                return (yield this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)).paging.totalPages;
            }
            if (this.deviceGroupService.isDevice(parentReference)) {
                return (yield this.assetNodeService.getDeviceChildren(parentReference.id, filters)).paging
                    .totalPages;
            }
        });
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const queryFilter = this.assetNodeService.rootQueryFilter();
        const userQuery = this.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(queryFilter, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    deleteGroup(group, params = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { cascade } = params;
            try {
                this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group)
                    ? yield this.smartGroupsService.delete(group, { cascade })
                    : yield this.inventoryService.delete(group, { cascade });
                const alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                this.alertService.success(alertMessage);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    deleteDevice(device, params = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { cascade, withDeviceUser } = params;
            try {
                const { owner } = device;
                const shouldRemoveOwner = withDeviceUser && owner && this.isDeviceUser(owner);
                shouldRemoveOwner
                    ? yield this.deleteDeviceWithUser(device, cascade)
                    : yield this.inventoryService.delete(device, { cascade });
                const alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                this.alertService.success(alertMessage);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    deactivateSmartrulesForAsset(asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { id: assetId } = asset;
            const { id: parentId } = parentRef;
            const rules = (yield this.smartRulesService.listByContext(parentId)).data;
            const upateSmartrulesPromises = rules.map(rule => this.smartRulesService.bulkDeactivateEnabledSources(rule, [assetId]));
            try {
                yield Promise.all(upateSmartrulesPromises);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not deactivate smart rules.'));
                this.alertService.danger(alertMessage);
            }
        });
    }
    isDeviceUser(userId) {
        return userId.match(/^device_/);
    }
    deleteDeviceWithUser(device, cascade) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const params = { cascade, withDeviceUser: true };
            try {
                return yield this.inventoryService.delete(device, params);
            }
            catch (error) {
                return yield this.inventoryService.delete(device, { cascade });
            }
        });
    }
    getAssetsFilters(columns, pagination, baseQuery) {
        const query = this.queriesUtil.addAndFilter(this.getQueryObj(columns), baseQuery);
        return {
            query: this.queriesUtil.buildQuery(query),
            pageSize: pagination.pageSize || this.DEFAULT_PAGE_SIZE,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    }
};
SubAssetsService.ctorParameters = () => [
    { type: TranslateService },
    { type: InventoryService },
    { type: AppStateService },
    { type: UserService },
    { type: AssetNodeService },
    { type: DeviceGroupService },
    { type: SmartGroupsService },
    { type: SmartRulesService },
    { type: AlertService },
    { type: Permissions }
];
SubAssetsService = tslib_1.__decorate([
    Injectable()
], SubAssetsService);
export { SubAssetsService };
//# sourceMappingURL=data:application/json;base64,