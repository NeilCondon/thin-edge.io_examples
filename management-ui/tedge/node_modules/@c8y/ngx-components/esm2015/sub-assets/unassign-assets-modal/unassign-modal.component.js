import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { gettext, Status } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
let UnassignModalComponent = class UnassignModalComponent {
    constructor(translateService) {
        this.translateService = translateService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign devices');
        this.status = Status.WARNING;
    }
    ngOnInit() {
        this.message = this.translateService.instant(gettext('You are about to unassign asset: "{{name}}" . Do you want to proceed?'), { name: this.asset.name });
    }
    ngAfterViewInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.modalRef.result;
                this.onClose();
            }
            catch (error) {
                this.onDismiss();
            }
        });
    }
    onClose() {
        this.closeSubject.next(true);
        this.closeSubject.complete();
    }
    onDismiss() {
        this.closeSubject.complete();
    }
};
UnassignModalComponent.ctorParameters = () => [
    { type: TranslateService }
];
tslib_1.__decorate([
    Input()
], UnassignModalComponent.prototype, "asset", void 0);
tslib_1.__decorate([
    ViewChild('modalRef', { static: false })
], UnassignModalComponent.prototype, "modalRef", void 0);
UnassignModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-unassign-modal',
        template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
    })
], UnassignModalComponent);
export { UnassignModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hc3NpZ24tbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9zdWItYXNzZXRzLyIsInNvdXJjZXMiOlsidW5hc3NpZ24tYXNzZXRzLW1vZGFsL3VuYXNzaWduLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFFTCxPQUFPLEVBRVAsTUFBTSxFQUVQLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUsvQixJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQVNqQyxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUx0RCxpQkFBWSxHQUFxQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9DLFdBQU0sR0FBZ0IsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUM3RSxVQUFLLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEMsV0FBTSxHQUFlLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFFcUIsQ0FBQztJQUUxRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMxQyxPQUFPLENBQUMsdUVBQXVFLENBQUMsRUFDaEYsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFSyxlQUFlOztZQUNuQixJQUFJO2dCQUNGLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNoQjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQjtRQUNILENBQUM7S0FBQTtJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0NBQ0YsQ0FBQTs7WUExQnVDLGdCQUFnQjs7QUFSN0M7SUFBUixLQUFLLEVBQUU7cURBQXVCO0FBQ1c7SUFBekMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQzt3REFBaUM7QUFGL0Qsc0JBQXNCO0lBSmxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIscUtBQThDO0tBQy9DLENBQUM7R0FDVyxzQkFBc0IsQ0FtQ2xDO1NBbkNZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQge1xuICBDb25maXJtTW9kYWxDb21wb25lbnQsXG4gIGdldHRleHQsXG4gIE1vZGFsTGFiZWxzLFxuICBTdGF0dXMsXG4gIFN0YXR1c1R5cGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdW5hc3NpZ24tbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFVuYXNzaWduTW9kYWxDb21wb25lbnQge1xuICBASW5wdXQoKSBhc3NldDogSU1hbmFnZWRPYmplY3Q7XG4gIEBWaWV3Q2hpbGQoJ21vZGFsUmVmJywgeyBzdGF0aWM6IGZhbHNlIH0pIG1vZGFsUmVmOiBDb25maXJtTW9kYWxDb21wb25lbnQ7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgY2xvc2VTdWJqZWN0OiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcbiAgbGFiZWxzOiBNb2RhbExhYmVscyA9IHsgb2s6IGdldHRleHQoJ1VuYXNzaWduJyksIGNhbmNlbDogZ2V0dGV4dCgnQ2FuY2VsJykgfTtcbiAgdGl0bGUgPSBnZXR0ZXh0KCdVbmFzc2lnbiBkZXZpY2VzJyk7XG4gIHN0YXR1czogU3RhdHVzVHlwZSA9IFN0YXR1cy5XQVJOSU5HO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChcbiAgICAgIGdldHRleHQoJ1lvdSBhcmUgYWJvdXQgdG8gdW5hc3NpZ24gYXNzZXQ6IFwie3tuYW1lfX1cIiAuIERvIHlvdSB3YW50IHRvIHByb2NlZWQ/JyksXG4gICAgICB7IG5hbWU6IHRoaXMuYXNzZXQubmFtZSB9XG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5tb2RhbFJlZi5yZXN1bHQ7XG4gICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5vbkRpc21pc3MoKTtcbiAgICB9XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgdGhpcy5jbG9zZVN1YmplY3QuY29tcGxldGUoKTtcbiAgfVxuXG4gIG9uRGlzbWlzcygpIHtcbiAgICB0aGlzLmNsb3NlU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=