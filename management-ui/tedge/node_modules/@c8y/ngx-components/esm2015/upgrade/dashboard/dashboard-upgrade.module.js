import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule, NgZone, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { ActionBarService, HOOK_ACTION_BAR, HOOK_COMPONENTS } from '@c8y/ngx-components';
import { ContextDashboardService } from '@c8y/ngx-components/context-dashboard';
import { Ng1ComponentFactoryService } from './component.factory';
import { CopyActionComponent } from './copy-action.component';
import { Ng1DashboardActionFactoryService } from './dashboard-actions.factory';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
import { WidgetComponent } from './widget.component';
import { DeviceSelectorComponent } from './device-selector.component';
import { C8yTranslateModule } from '@c8y/ngx-components';
let DashboardUpgradeModule = class DashboardUpgradeModule {
};
DashboardUpgradeModule = tslib_1.__decorate([
    NgModule({
        declarations: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
        entryComponents: [DeviceSelectorComponent, WidgetComponent, CopyActionComponent, PasteActionComponent],
        imports: [CommonModule, C8yTranslateModule],
        providers: [
            {
                provide: DashboardBridgeService,
                useFactory: dashboardBridgeFactory,
                deps: ['$injector', NgZone, Router, [new Optional(), ContextDashboardService], ActionBarService]
            },
            { provide: HOOK_COMPONENTS, useClass: Ng1ComponentFactoryService, multi: true },
            { provide: HOOK_ACTION_BAR, useClass: Ng1DashboardActionFactoryService, multi: true }
        ]
    })
], DashboardUpgradeModule);
export { DashboardUpgradeModule };
export function dashboardBridgeFactory(injector, ngZone, router, contextDashboardService, actionBarService) {
    return new DashboardBridgeService(injector, ngZone, router, contextDashboardService, actionBarService);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLXVwZ3JhZGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy91cGdyYWRlLyIsInNvdXJjZXMiOlsiZGFzaGJvYXJkL2Rhc2hib2FyZC11cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFnQnpELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0NBQUcsQ0FBQTtBQUF6QixzQkFBc0I7SUFkbEMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsZUFBZSxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDO1FBQ25HLGVBQWUsRUFBRSxDQUFDLHVCQUF1QixFQUFFLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsQ0FBQztRQUN0RyxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLENBQUM7UUFDM0MsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjtnQkFDL0IsVUFBVSxFQUFFLHNCQUFzQjtnQkFDbEMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLHVCQUF1QixDQUFDLEVBQUUsZ0JBQWdCLENBQUM7YUFDakc7WUFDRCxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDL0UsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ3RGO0tBQ0YsQ0FBQztHQUNXLHNCQUFzQixDQUFHO1NBQXpCLHNCQUFzQjtBQUVuQyxNQUFNLFVBQVUsc0JBQXNCLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCO0lBQ3hHLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3pHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBY3Rpb25CYXJTZXJ2aWNlLCBIT09LX0FDVElPTl9CQVIsIEhPT0tfQ09NUE9ORU5UU30gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQnO1xuaW1wb3J0IHsgTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC5mYWN0b3J5JztcbmltcG9ydCB7IENvcHlBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL2NvcHktYWN0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZzFEYXNoYm9hcmRBY3Rpb25GYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBEYXNoYm9hcmRCcmlkZ2VTZXJ2aWNlIH0gZnJvbSAnLi9kYXNoYm9hcmQtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFzdGVBY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3Bhc3RlLWFjdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi93aWRnZXQuY29tcG9uZW50JztcbmltcG9ydCB7IERldmljZVNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IEM4eVRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtEZXZpY2VTZWxlY3RvckNvbXBvbmVudCwgV2lkZ2V0Q29tcG9uZW50LCBDb3B5QWN0aW9uQ29tcG9uZW50LCBQYXN0ZUFjdGlvbkNvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0RldmljZVNlbGVjdG9yQ29tcG9uZW50LCBXaWRnZXRDb21wb25lbnQsIENvcHlBY3Rpb25Db21wb25lbnQsIFBhc3RlQWN0aW9uQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgQzh5VHJhbnNsYXRlTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogRGFzaGJvYXJkQnJpZGdlU2VydmljZSxcbiAgICAgIHVzZUZhY3Rvcnk6IGRhc2hib2FyZEJyaWRnZUZhY3RvcnksXG4gICAgICBkZXBzOiBbJyRpbmplY3RvcicsIE5nWm9uZSwgUm91dGVyLCBbbmV3IE9wdGlvbmFsKCksIENvbnRleHREYXNoYm9hcmRTZXJ2aWNlXSwgQWN0aW9uQmFyU2VydmljZV1cbiAgICB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19DT01QT05FTlRTLCB1c2VDbGFzczogTmcxQ29tcG9uZW50RmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTl9CQVIsIHVzZUNsYXNzOiBOZzFEYXNoYm9hcmRBY3Rpb25GYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERhc2hib2FyZFVwZ3JhZGVNb2R1bGUge31cblxuZXhwb3J0IGZ1bmN0aW9uIGRhc2hib2FyZEJyaWRnZUZhY3RvcnkoaW5qZWN0b3IsIG5nWm9uZSwgcm91dGVyLCBjb250ZXh0RGFzaGJvYXJkU2VydmljZSwgYWN0aW9uQmFyU2VydmljZSkge1xuICByZXR1cm4gbmV3IERhc2hib2FyZEJyaWRnZVNlcnZpY2UoaW5qZWN0b3IsIG5nWm9uZSwgcm91dGVyLCBjb250ZXh0RGFzaGJvYXJkU2VydmljZSwgYWN0aW9uQmFyU2VydmljZSk7XG59XG4iXX0=