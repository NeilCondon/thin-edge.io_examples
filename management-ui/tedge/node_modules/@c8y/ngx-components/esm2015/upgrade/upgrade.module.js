import * as tslib_1 from "tslib";
import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
import { absoluteDateServiceProvider } from './absolute-date.service';
let UpgradeModule = class UpgradeModule {
};
UpgradeModule = tslib_1.__decorate([
    NgModule({
        imports: [RouterModule],
        exports: [],
        providers: [
            absoluteDateServiceProvider,
            bridgeServiceProvider,
            authBridgeServiceProvider,
            { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
            { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
            { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
            { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
            { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
            { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
        ]
    })
], UpgradeModule);
export { UpgradeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJ1cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDYixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFpQnRFLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7Q0FBRyxDQUFBO0FBQWhCLGFBQWE7SUFmekIsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxFQUFFO1FBQ1gsU0FBUyxFQUFFO1lBQ1QsMkJBQTJCO1lBQzNCLHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDaEYsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ3BFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUMvRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDeEUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQ2hGLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtTQUNyRTtLQUNGLENBQUM7R0FDVyxhQUFhLENBQUc7U0FBaEIsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJyaWRnZVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgSE9PS19BQ1RJT04sXG4gIEhPT0tfQUNUSU9OX0JBUixcbiAgSE9PS19CUkVBRENSVU1CLFxuICBIT09LX05BVklHQVRPUl9OT0RFUyxcbiAgSE9PS19UQUJTLFxuICBIT09LX0RPQ1MsXG4gIFJvdXRlck1vZHVsZVxufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE5nMUFjdGlvbkJhckZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9hY3Rpb24tYmFyLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi5mYWN0b3J5JztcbmltcG9ydCB7IE5nMUJyZWFkY3J1bWJGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYnJlYWRjcnVtYi5mYWN0b3J5JztcbmltcG9ydCB7IE5nMU5vZGVzRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL25vZGVzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxVGFic0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi90YWJzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nMURvY3NGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZG9jcy5mYWN0b3J5JztcbmltcG9ydCB7IGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2F1dGgtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgYWJzb2x1dGVEYXRlU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi9hYnNvbHV0ZS1kYXRlLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlXSxcbiAgZXhwb3J0czogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIGFic29sdXRlRGF0ZVNlcnZpY2VQcm92aWRlcixcbiAgICBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIsXG4gICAgYXV0aEJyaWRnZVNlcnZpY2VQcm92aWRlcixcbiAgICB7IHByb3ZpZGU6IEhPT0tfTkFWSUdBVE9SX05PREVTLCB1c2VDbGFzczogTmcxTm9kZXNGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfVEFCUywgdXNlQ2xhc3M6IE5nMVRhYnNGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQUNUSU9OX0JBUiwgdXNlQ2xhc3M6IE5nMUFjdGlvbkJhckZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19BQ1RJT04sIHVzZUNsYXNzOiBOZzFBY3Rpb25GYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQlJFQURDUlVNQiwgdXNlQ2xhc3M6IE5nMUJyZWFkY3J1bWJGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfRE9DUywgdXNlQ2xhc3M6IE5nMURvY3NGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFVwZ3JhZGVNb2R1bGUge31cbiJdfQ==