import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService, QueriesUtil, UserService, IManagedObject, IResult } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, NavigatorNode, AppStateService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { empty } from 'rxjs';
import { filter, mergeMap } from 'rxjs/operators';
import { AssetNode } from './asset-node';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
var AssetNodeService = /** @class */ (function () {
    function AssetNodeService(inventory, groups, apiService, modal, alert, breadcrumbService, user, appState, moduleConfig) {
        this.inventory = inventory;
        this.groups = groups;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.moduleConfig = moduleConfig;
        this.firstUrl = true;
        this.PAGE_SIZE = 20;
        this.moduleConfig = tslib_1.__assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
        this.queriesUtil = new QueriesUtil();
    }
    AssetNodeService.prototype.createRootNode = function () {
        this.rootNode = this.createAssetNode({
            root: true,
            priority: this.moduleConfig.rootNodePriority
        });
        return this.rootNode;
    };
    AssetNodeService.prototype.createDynamicGroupNode = function (config) {
        return new DynamicGroupNode(this, config);
    };
    AssetNodeService.prototype.createAssetNode = function (config) {
        return new AssetNode(this, config);
    };
    AssetNodeService.prototype.createChildNode = function (managedObject) {
        var type = managedObject.type;
        var config = { mo: managedObject };
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    };
    AssetNodeService.prototype.getRootNodes = function (customFilter) {
        var defaultFilter = {
            pageSize: this.PAGE_SIZE,
            withChildren: false,
            query: this.queriesUtil.buildQuery(this.rootQueryFilter())
        };
        var groupFilter = customFilter ? customFilter : defaultFilter;
        // due to BE performance limitations we do not allow filtering and sorting for a user without inventory roles
        if (!this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            delete groupFilter.query;
            Object.assign(groupFilter, {
                fragmentType: GroupFragment.groupFragmentType,
                onlyRoots: true
            });
        }
        return this.inventory.list(this.createFilter(groupFilter));
    };
    AssetNodeService.prototype.getGroupItems = function (moId, extraFilter) {
        if (extraFilter === void 0) { extraFilter = {}; }
        var queryFilter = {
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId)
        };
        return this.inventory.childAssetsList(moId, tslib_1.__assign({}, queryFilter, extraFilter));
    };
    AssetNodeService.prototype.getDynamicGroupItems = function (groupQuery, filterObj) {
        if (filterObj === void 0) { filterObj = {}; }
        var query = filterObj.query, queryParams = tslib_1.__rest(filterObj, ["query"]);
        var orderByQuery = query;
        var queryFilter = tslib_1.__assign({ q: this.buildCombinedQuery(groupQuery, orderByQuery) }, queryParams);
        return this.inventory.list(this.createFilter(queryFilter));
    };
    AssetNodeService.prototype.getDeviceChildren = function (moId, extraFilter) {
        if (extraFilter === void 0) { extraFilter = {}; }
        var queryFilter = {
            withChildren: false,
            pageSize: this.PAGE_SIZE,
            query: this.groupQueryFilter(moId)
        };
        return this.inventory.childDevicesList(moId, tslib_1.__assign({}, queryFilter, extraFilter));
    };
    AssetNodeService.prototype.groupQueryFilter = function (moId) {
        return "$filter=(bygroupid(" + moId + "))$orderby=name";
    };
    AssetNodeService.prototype.rootQueryFilter = function () {
        var moduleConfig = this.moduleConfig;
        var rootFilter = {
            __filter: {
                type: "" + GroupFragment.groupType
            },
            __orderby: [{ name: 1 }]
        };
        if (moduleConfig.smartGroups) {
            var queryFilter = {
                __filter: {
                    __and: [
                        {
                            type: "" + GroupFragment.dynamicGroupType
                        },
                        {
                            __has: "" + GroupFragment.dynamicGroupFragment
                        },
                        { __not: { __has: GroupFragment.dynamicGroupFragment + ".invisible" } }
                    ]
                }
            };
            this.queriesUtil.addOrFilter(rootFilter, queryFilter);
        }
        return rootFilter;
    };
    AssetNodeService.prototype.onUpdate = function (_a) {
        var _this = this;
        var mo = _a.mo, root = _a.root;
        if (mo.id) {
            return this.apiService
                .hookResponse(function (_a) {
                var url = _a.url, method = _a.method;
                return ['PUT', 'DELETE', 'POST'].includes(method) &&
                    RegExp("((inventory/managedObjects)|(service/smartgroup/smartgroups))/" + mo.id).test(url);
            })
                .pipe(filter(function () { return !_this.draggedData; }), mergeMap(this.apiService.resolveData), filter(function (response) { return !response.data.c8y_Dashboard; }));
        }
        else if (root) {
            return this.apiService
                .hookResponse(function (_a) {
                var url = _a.url, method = _a.method;
                return RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                    method === 'POST';
            })
                .pipe(mergeMap(this.apiService.resolveData), filter(function (response) { return _this.isNewManagedObjectRoot(response); }));
        }
        else {
            return empty();
        }
    };
    AssetNodeService.prototype.isNewManagedObjectRoot = function (response) {
        if (response === void 0) { response = {}; }
        var data = response.data;
        var isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    };
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    AssetNodeService.prototype.preferBreadcrumb = function (parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    };
    AssetNodeService.prototype.createFilter = function (extraParams) {
        if (extraParams === void 0) { extraParams = {}; }
        var params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return tslib_1.__assign({}, params, extraParams);
    };
    AssetNodeService.prototype.buildCombinedQuery = function (query, orderByQuery) {
        var combinedQuery;
        if (query && orderByQuery) {
            var filterQuery = this.queriesUtil.buildQuery({
                __useFilterQueryString: query
            });
            combinedQuery = filterQuery + " " + orderByQuery;
        }
        else {
            combinedQuery = query || orderByQuery || '';
        }
        return combinedQuery;
    };
    AssetNodeService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: DeviceGroupService },
        { type: ApiService },
        { type: ModalService },
        { type: AlertService },
        { type: BreadcrumbService },
        { type: UserService },
        { type: AppStateService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
    ]; };
    AssetNodeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(8, Optional()), tslib_1.__param(8, Inject(ASSET_NAVIGATOR_CONFIG))
    ], AssetNodeService);
    return AssetNodeService;
}());
export { AssetNodeService };
//# sourceMappingURL=data:application/json;base64,