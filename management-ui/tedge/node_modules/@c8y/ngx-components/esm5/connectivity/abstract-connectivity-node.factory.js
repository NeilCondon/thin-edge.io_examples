import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { gettext, NavigatorNode } from '@c8y/ngx-components';
import { isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { AbstractConnectivityTabFactory } from './abstract-connectivity-tab.factory';
var AbstractConnectivityNodeFactory = /** @class */ (function () {
    function AbstractConnectivityNodeFactory(tabFactory) {
        this.tabFactory = tabFactory;
        this.connectivityNode = new NavigatorNode({
            parent: gettext('Settings'),
            label: gettext('Connectivity'),
            path: 'connectivitySettings',
            icon: 'plug',
            preventDuplicates: true
        });
    }
    AbstractConnectivityNodeFactory.prototype.get = function () {
        var _this = this;
        return this.wrapIntoObservable(this.tabFactory.tab()).pipe(map(function (tab) {
            return !!tab ? [_this.connectivityNode] : [];
        }));
    };
    AbstractConnectivityNodeFactory.prototype.wrapIntoObservable = function (value) {
        if (isObservable(value)) {
            return value;
        }
        return of(value);
    };
    AbstractConnectivityNodeFactory.ctorParameters = function () { return [
        { type: AbstractConnectivityTabFactory }
    ]; };
    AbstractConnectivityNodeFactory = tslib_1.__decorate([
        Injectable()
    ], AbstractConnectivityNodeFactory);
    return AbstractConnectivityNodeFactory;
}());
export { AbstractConnectivityNodeFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29ubmVjdGl2aXR5LW5vZGUuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvY29ubmVjdGl2aXR5LyIsInNvdXJjZXMiOlsiYWJzdHJhY3QtY29ubmVjdGl2aXR5LW5vZGUuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBd0IsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHckY7SUFTRSx5Q0FBc0IsVUFBMEM7UUFBMUMsZUFBVSxHQUFWLFVBQVUsQ0FBZ0M7UUFSN0MscUJBQWdCLEdBQWtCLElBQUksYUFBYSxDQUFDO1lBQ3JFLE1BQU0sRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDO1lBQzNCLEtBQUssRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO1lBQzlCLElBQUksRUFBRSxzQkFBc0I7WUFDNUIsSUFBSSxFQUFFLE1BQU07WUFDWixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCLENBQUMsQ0FBQztJQUVnRSxDQUFDO0lBRXBFLDZDQUFHLEdBQUg7UUFBQSxpQkFNQztRQUxDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3hELEdBQUcsQ0FBQyxVQUFBLEdBQUc7WUFDTCxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVTLDREQUFrQixHQUE1QixVQUFnQyxLQUF3QjtRQUN0RCxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsQ0FBQzs7Z0JBaEJpQyw4QkFBOEI7O0lBVDVDLCtCQUErQjtRQURwRCxVQUFVLEVBQUU7T0FDUywrQkFBK0IsQ0EwQnBEO0lBQUQsc0NBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQTFCcUIsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnkgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFic3RyYWN0Q29ubmVjdGl2aXR5VGFiRmFjdG9yeSB9IGZyb20gJy4vYWJzdHJhY3QtY29ubmVjdGl2aXR5LXRhYi5mYWN0b3J5JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0Q29ubmVjdGl2aXR5Tm9kZUZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBjb25uZWN0aXZpdHlOb2RlOiBOYXZpZ2F0b3JOb2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgIHBhcmVudDogZ2V0dGV4dCgnU2V0dGluZ3MnKSxcbiAgICBsYWJlbDogZ2V0dGV4dCgnQ29ubmVjdGl2aXR5JyksXG4gICAgcGF0aDogJ2Nvbm5lY3Rpdml0eVNldHRpbmdzJyxcbiAgICBpY29uOiAncGx1ZycsXG4gICAgcHJldmVudER1cGxpY2F0ZXM6IHRydWVcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHRhYkZhY3Rvcnk6IEFic3RyYWN0Q29ubmVjdGl2aXR5VGFiRmFjdG9yeSkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcEludG9PYnNlcnZhYmxlKHRoaXMudGFiRmFjdG9yeS50YWIoKSkucGlwZShcbiAgICAgIG1hcCh0YWIgPT4ge1xuICAgICAgICByZXR1cm4gISF0YWIgPyBbdGhpcy5jb25uZWN0aXZpdHlOb2RlXSA6IFtdO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIHdyYXBJbnRvT2JzZXJ2YWJsZTxUPih2YWx1ZTogVCB8IE9ic2VydmFibGU8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBpZiAoaXNPYnNlcnZhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvZih2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==