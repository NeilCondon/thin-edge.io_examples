import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { gettext } from '@c8y/ngx-components';
import { from, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ImpactGuard } from './impact.guard';
var ImpactTabFactory = /** @class */ (function () {
    function ImpactTabFactory(router, guard) {
        this.router = router;
        this.guard = guard;
        this.config = {
            label: gettext('IMPACT provider settings'),
            path: '/connectivitySettings/impact_provider_settings',
            icon: 'plug'
        };
    }
    ImpactTabFactory.prototype.get = function () {
        return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];
    };
    ImpactTabFactory.prototype.tab = function () {
        var _this = this;
        return this.wrapIntoObservable(this.guard.canActivate(this.router.routerState.snapshot.root, this.router.routerState.snapshot)).pipe(map(function (canActivate) { return (canActivate ? _this.config : null); }));
    };
    ImpactTabFactory.prototype.isPromise = function (obj) {
        return !!obj && typeof obj.then === 'function';
    };
    ImpactTabFactory.prototype.wrapIntoObservable = function (value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    };
    ImpactTabFactory.ctorParameters = function () { return [
        { type: Router },
        { type: ImpactGuard }
    ]; };
    ImpactTabFactory = tslib_1.__decorate([
        Injectable()
    ], ImpactTabFactory);
    return ImpactTabFactory;
}());
export { ImpactTabFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wYWN0LXRhYi5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9jb25uZWN0aXZpdHkvIiwic291cmNlcyI6WyJpbXBhY3QvaW1wYWN0LXRhYi5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFtQixNQUFNLHFCQUFxQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzdDO0lBT0UsMEJBQW9CLE1BQWMsRUFBVSxLQUFrQjtRQUExQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQU50RCxXQUFNLEdBQVE7WUFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztZQUMxQyxJQUFJLEVBQUUsZ0RBQWdEO1lBQ3RELElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQztJQUUrRCxDQUFDO0lBRWxFLDhCQUFHLEdBQUg7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRSxDQUFDO0lBRUQsOEJBQUcsR0FBSDtRQUFBLGlCQU9DO1FBTkMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQ2pDLENBQ0YsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsV0FBVyxJQUFJLE9BQUEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFsQyxDQUFrQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU8sb0NBQVMsR0FBakIsVUFBMkIsR0FBUTtRQUNqQyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztJQUNqRCxDQUFDO0lBRU8sNkNBQWtCLEdBQTFCLFVBQThCLEtBQXFDO1FBQ2pFLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEI7UUFFRCxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDOztnQkE3QjJCLE1BQU07Z0JBQWlCLFdBQVc7O0lBUG5ELGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7T0FDQSxnQkFBZ0IsQ0FxQzVCO0lBQUQsdUJBQUM7Q0FBQSxBQXJDRCxJQXFDQztTQXJDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZ2V0dGV4dCwgVGFiLCBUYWJGYWN0b3J5IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBmcm9tLCBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJbXBhY3RHdWFyZCB9IGZyb20gJy4vaW1wYWN0Lmd1YXJkJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEltcGFjdFRhYkZhY3RvcnkgaW1wbGVtZW50cyBUYWJGYWN0b3J5IHtcbiAgcHJpdmF0ZSBjb25maWc6IFRhYiA9IHtcbiAgICBsYWJlbDogZ2V0dGV4dCgnSU1QQUNUIHByb3ZpZGVyIHNldHRpbmdzJyksXG4gICAgcGF0aDogJy9jb25uZWN0aXZpdHlTZXR0aW5ncy9pbXBhY3RfcHJvdmlkZXJfc2V0dGluZ3MnLFxuICAgIGljb246ICdwbHVnJ1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgZ3VhcmQ6IEltcGFjdEd1YXJkKSB7fVxuXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3V0ZXIudXJsLm1hdGNoKC9jb25uZWN0aXZpdHlTZXR0aW5ncy9nKSA/IHRoaXMudGFiKCkgOiBbXTtcbiAgfVxuXG4gIHRhYigpOiBUYWIgfCBPYnNlcnZhYmxlPFRhYj4ge1xuICAgIHJldHVybiB0aGlzLndyYXBJbnRvT2JzZXJ2YWJsZShcbiAgICAgIHRoaXMuZ3VhcmQuY2FuQWN0aXZhdGUoXG4gICAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90LnJvb3QsXG4gICAgICAgIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90XG4gICAgICApXG4gICAgKS5waXBlKG1hcChjYW5BY3RpdmF0ZSA9PiAoY2FuQWN0aXZhdGUgPyB0aGlzLmNvbmZpZyA6IG51bGwpKSk7XG4gIH1cblxuICBwcml2YXRlIGlzUHJvbWlzZTxUID0gYW55PihvYmo6IGFueSk6IG9iaiBpcyBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgcHJpdmF0ZSB3cmFwSW50b09ic2VydmFibGU8VD4odmFsdWU6IFQgfCBQcm9taXNlPFQ+IHwgT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8VD4ge1xuICAgIGlmIChpc09ic2VydmFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQcm9taXNlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBvZih2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==