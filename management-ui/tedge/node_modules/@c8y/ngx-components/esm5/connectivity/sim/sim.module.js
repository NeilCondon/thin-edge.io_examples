import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { gettext, ProviderConfigurationModule } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { SimGuard } from './sim.guard';
export function encodeFiles(model, fields) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var result, fileFields, fileFields_1, fileFields_1_1, fileField, files, _a, _b, encodedFileContent, files_1, files_1_1, file, _c, _d, e_1_1, e_2_1;
        var e_2, _e, e_1, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    result = tslib_1.__assign({}, model);
                    fileFields = (get(fields, '[0].fieldGroup') || []).filter(function (field) {
                        return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';
                    });
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 15, 16, 17]);
                    fileFields_1 = tslib_1.__values(fileFields), fileFields_1_1 = fileFields_1.next();
                    _g.label = 2;
                case 2:
                    if (!!fileFields_1_1.done) return [3 /*break*/, 14];
                    fileField = fileFields_1_1.value;
                    files = model[fileField.key];
                    if (!(files && files.length)) return [3 /*break*/, 13];
                    if (!(fileField.templateOptions.maxAllowedFiles === 1)) return [3 /*break*/, 4];
                    _a = result;
                    _b = fileField.key;
                    return [4 /*yield*/, files[0].readAsDataURL()];
                case 3:
                    _a[_b] = (_g.sent()).replace(/data:\S+;base64,/gi, '');
                    return [3 /*break*/, 13];
                case 4:
                    encodedFileContent = [];
                    _g.label = 5;
                case 5:
                    _g.trys.push([5, 10, 11, 12]);
                    files_1 = (e_1 = void 0, tslib_1.__values(files)), files_1_1 = files_1.next();
                    _g.label = 6;
                case 6:
                    if (!!files_1_1.done) return [3 /*break*/, 9];
                    file = files_1_1.value;
                    _d = (_c = encodedFileContent).push;
                    return [4 /*yield*/, file.readAsDataURL()];
                case 7:
                    _d.apply(_c, [(_g.sent()).replace(/data:\w+\/\w+;base64,/gi, '')]);
                    _g.label = 8;
                case 8:
                    files_1_1 = files_1.next();
                    return [3 /*break*/, 6];
                case 9: return [3 /*break*/, 12];
                case 10:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 12];
                case 11:
                    try {
                        if (files_1_1 && !files_1_1.done && (_f = files_1.return)) _f.call(files_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 12:
                    result[fileField.key] = encodedFileContent;
                    _g.label = 13;
                case 13:
                    fileFields_1_1 = fileFields_1.next();
                    return [3 /*break*/, 2];
                case 14: return [3 /*break*/, 17];
                case 15:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 17];
                case 16:
                    try {
                        if (fileFields_1_1 && !fileFields_1_1.done && (_e = fileFields_1.return)) _e.call(fileFields_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 17: return [2 /*return*/, result];
            }
        });
    });
}
var SimModule = /** @class */ (function () {
    function SimModule() {
    }
    SimModule = tslib_1.__decorate([
        NgModule({
            providers: [SimGuard],
            imports: [
                ProviderConfigurationModule.config([
                    {
                        navigation: {
                            label: gettext('Connectivity'),
                            path: 'connectivitySettings',
                            icon: 'plug',
                            parent: gettext('Settings'),
                            priority: 1000,
                            preventDuplicates: true
                        },
                        tab: {
                            path: 'sim_provider_settings',
                            label: 'SIM provider settings',
                            icon: 'mobile',
                            canActivate: [SimGuard]
                        },
                        layout: {
                            pageTitle: gettext('Connectivity'),
                            cardTitle: gettext('Settings'),
                            description: gettext("In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'."),
                            providerName: gettext('Provider'),
                            providerNamePlaceholder: gettext('Select or type to filter providers'),
                            providerNameNoMatchesHint: gettext('Select one of the existing providers.'),
                            deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                            deleteBtnLabel: gettext('Delete'),
                            saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],
                            saveBtnLabel: gettext('Save'),
                            beforeSaveHook: encodeFiles,
                            configurationUpdatedSuccessMsg: gettext('Settings updated.'),
                            deleteConfigurationModalTitle: gettext('Delete settings'),
                            deleteConfigurationModalBody: gettext("You are about to delete SIM provider settings. Do you want to proceed?"),
                            deleteConfigurationModalOkBtnLabel: gettext('Delete'),
                            configurationDeletedSuccessMsg: gettext('Settings deleted.')
                        },
                        endpoint: {
                            definitionsEndpoint: {
                                baseUrl: 'service/connectivity/metadata',
                                listUrl: 'definitions'
                            },
                            configurationEndpoint: {
                                baseUrl: 'service/connectivity/metadata',
                                listUrl: 'sim/provider'
                            }
                        }
                    }
                ])
            ]
        })
    ], SimModule);
    return SimModule;
}());
export { SimModule };
//# sourceMappingURL=data:application/json;base64,