import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { NavigatorNode, NavigatorService, gettext } from '@c8y/ngx-components';
import { ReportDashboardService } from './report-dashboard.service';
var ReportDashboardNavigationFactory = /** @class */ (function () {
    function ReportDashboardNavigationFactory(navigatorService, inventoryService, reportDashboardService) {
        this.navigatorService = navigatorService;
        this.inventoryService = inventoryService;
        this.reportDashboardService = reportDashboardService;
        this.loaded = false;
    }
    ReportDashboardNavigationFactory.prototype.get = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var reports;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.loaded) return [3 /*break*/, 2];
                        this.loaded = true;
                        this.navigatorService.add(new NavigatorNode({
                            label: gettext('Reports'),
                            path: 'reports',
                            icon: 'c8y-reports',
                            priority: 5
                        }));
                        return [4 /*yield*/, this.reportDashboardService.listReports({
                                filter: { __has: 'c8y_IsNavigatorNode' },
                                pageSize: 2000
                            })];
                    case 1:
                        reports = (_a.sent()).data;
                        reports.forEach(function (report) {
                            var node = new NavigatorNode({
                                label: report.name,
                                path: "reports/" + report.id,
                                icon: report.icon,
                                priority: report.priority
                            });
                            _this.navigatorService.add(node);
                        });
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ReportDashboardNavigationFactory.ctorParameters = function () { return [
        { type: NavigatorService },
        { type: InventoryService },
        { type: ReportDashboardService }
    ]; };
    ReportDashboardNavigationFactory = tslib_1.__decorate([
        Injectable()
    ], ReportDashboardNavigationFactory);
    return ReportDashboardNavigationFactory;
}());
export { ReportDashboardNavigationFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LWRhc2hib2FyZC1uYXZpZ2F0aW9uLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkLyIsInNvdXJjZXMiOlsicmVwb3J0LWRhc2hib2FyZC9yZXBvcnQtZGFzaGJvYXJkLW5hdmlnYXRpb24uZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM1RSxPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3BFO0lBR0UsMENBQ1UsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxzQkFBOEM7UUFGOUMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFMeEQsV0FBTSxHQUFZLEtBQUssQ0FBQztJQU1yQixDQUFDO0lBRUUsOENBQUcsR0FBVDs7Ozs7Ozs2QkFDTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQVosd0JBQVk7d0JBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7d0JBRW5CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQ3ZCLElBQUksYUFBYSxDQUFDOzRCQUNoQixLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQzs0QkFDekIsSUFBSSxFQUFFLFNBQVM7NEJBQ2YsSUFBSSxFQUFFLGFBQWE7NEJBQ25CLFFBQVEsRUFBRSxDQUFDO3lCQUNaLENBQUMsQ0FDSCxDQUFDO3dCQUVpQyxxQkFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO2dDQUMvRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUscUJBQXFCLEVBQUU7Z0NBQ3hDLFFBQVEsRUFBRSxJQUFJOzZCQUNmLENBQUMsRUFBQTs7d0JBSEksT0FBTyxHQUFxQixDQUFDLFNBR2pDLENBQUMsQ0FBQyxJQUFJO3dCQUNSLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNOzRCQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQztnQ0FDN0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dDQUNsQixJQUFJLEVBQUUsYUFBVyxNQUFNLENBQUMsRUFBSTtnQ0FDNUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dDQUNqQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7NkJBQzFCLENBQUMsQ0FBQzs0QkFDSCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNsQyxDQUFDLENBQUMsQ0FBQzs7Ozs7O0tBRU47O2dCQWhDMkIsZ0JBQWdCO2dCQUNoQixnQkFBZ0I7Z0JBQ1Ysc0JBQXNCOztJQU43QyxnQ0FBZ0M7UUFENUMsVUFBVSxFQUFFO09BQ0EsZ0NBQWdDLENBcUM1QztJQUFELHVDQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FyQ1ksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yU2VydmljZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3J0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vcmVwb3J0LWRhc2hib2FyZC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcG9ydERhc2hib2FyZE5hdmlnYXRpb25GYWN0b3J5IHtcbiAgbG9hZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuYXZpZ2F0b3JTZXJ2aWNlOiBOYXZpZ2F0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSxcbiAgICBwcml2YXRlIHJlcG9ydERhc2hib2FyZFNlcnZpY2U6IFJlcG9ydERhc2hib2FyZFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGdldCgpIHtcbiAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG5cbiAgICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5hZGQoXG4gICAgICAgIG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnUmVwb3J0cycpLFxuICAgICAgICAgIHBhdGg6ICdyZXBvcnRzJyxcbiAgICAgICAgICBpY29uOiAnYzh5LXJlcG9ydHMnLFxuICAgICAgICAgIHByaW9yaXR5OiA1XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXBvcnRzOiBJTWFuYWdlZE9iamVjdFtdID0gKGF3YWl0IHRoaXMucmVwb3J0RGFzaGJvYXJkU2VydmljZS5saXN0UmVwb3J0cyh7XG4gICAgICAgIGZpbHRlcjogeyBfX2hhczogJ2M4eV9Jc05hdmlnYXRvck5vZGUnIH0sXG4gICAgICAgIHBhZ2VTaXplOiAyMDAwXG4gICAgICB9KSkuZGF0YTtcbiAgICAgIHJlcG9ydHMuZm9yRWFjaChyZXBvcnQgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiByZXBvcnQubmFtZSxcbiAgICAgICAgICBwYXRoOiBgcmVwb3J0cy8ke3JlcG9ydC5pZH1gLFxuICAgICAgICAgIGljb246IHJlcG9ydC5pY29uLFxuICAgICAgICAgIHByaW9yaXR5OiByZXBvcnQucHJpb3JpdHlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmF2aWdhdG9yU2VydmljZS5hZGQobm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==