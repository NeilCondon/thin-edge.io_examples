import * as tslib_1 from "tslib";
import { BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { StateService } from '../common/state-service.abstract';
import { gettext } from '../i18n/gettext';
import { isEqual } from 'lodash-es';
import * as i0 from "@angular/core";
/**
 * A service which allows to display alerts.
 */
var AlertService = /** @class */ (function (_super) {
    tslib_1.__extends(AlertService, _super);
    function AlertService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @ignore
         */
        _this.state$ = new BehaviorSubject([]);
        _this.MAX_ALERTS = 3;
        _this.ALERT_TIMEOUT = 3000;
        return _this;
    }
    Object.defineProperty(AlertService.prototype, "state", {
        /**
         * Returns all alerts.
         * @readonly
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new alert to the current state.
     */
    AlertService.prototype.add = function (alert) {
        this.addAlert(alert);
    };
    /**
     * Adds a alert by text.
     */
    AlertService.prototype.addByText = function (type, txt, detailedData) {
        this.addAlert({ text: txt, type: type, detailedData: detailedData });
    };
    /**
     * Returns all alerts.
     * @deprecated Use alertService.alerts instead.
     */
    AlertService.prototype.list = function () {
        return this.state;
    };
    /**
     * Remove an alert from the current state.
     */
    AlertService.prototype.remove = function (alert) {
        var _this = this;
        this.changeAlerts(this.state.filter(function (item) { return !_this.areSame(alert, item); }));
    };
    /**
     * Updates matching alert with provided values.
     */
    AlertService.prototype.update = function (alert, fieldsToUpdate) {
        var _this = this;
        this.changeAlerts(this.state.map(function (item) {
            if (_this.areSame(alert, item)) {
                Object.assign(item, fieldsToUpdate);
            }
            return item;
        }));
    };
    /**
     * Removes last danger alert.
     * It can be used e.g. in the case of a failed request which triggered an alert, to hide it from user.
     *
     * ```js
     *  try {
     *    // something that might throw a danger server msg
     *  } catch (ex) {
     *   this.alertService.removeLastDanger();
     *  }
     * ```
     */
    AlertService.prototype.removeLastDanger = function () {
        var firstDangerAlert = this.state.reverse().find(function (_a) {
            var type = _a.type;
            return type === 'danger';
        });
        this.changeAlerts(this.state.filter(function (alert) { return alert !== firstDangerAlert; }));
    };
    /**
     * Shorthand for a save successful alert.
     * @param savedObject The object which was saved.
     * @return A function that can be executed to show the msg.
     */
    AlertService.prototype.saveSuccess = function (savedObject) {
        var _this = this;
        return function () {
            var text = savedObject + " saved successfully";
            _this.addByText('success', text);
        };
    };
    /**
     * Shorthand for a create successful alert.
     * @param createdObject The object which was created.
     * @return A function that can be executed to show the msg.
     */
    AlertService.prototype.createSuccess = function (createdObject) {
        var _this = this;
        return function () {
            var text = createdObject + " created successfully";
            _this.addByText('success', text);
        };
    };
    /**
     * Clears all alerts.
     */
    AlertService.prototype.clearAll = function () {
        this.changeAlerts([]);
    };
    /**
     * A shorthand to display a simple success message.
     * @param text The success text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.success = function (text, detailedData) {
        this.addByText('success', text, detailedData);
    };
    /**
     * A shorthand to display a simple danger message.
     * @param text The danger text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.danger = function (text, detailedData) {
        this.addByText('danger', text, detailedData);
    };
    /**
     * A shorthand to display a simple info message.
     * @param text The info text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.info = function (text, detailedData) {
        this.addByText('info', text, detailedData);
    };
    /**
     * A shorthand to display a simple warning message.
     * @param text The warning text.
     * @param detailedData The text with additional information.
     */
    AlertService.prototype.warning = function (text, detailedData) {
        this.addByText('warning', text, detailedData);
    };
    /**
     * Creates alert from standard api errors.
     * Should be used for errors generated by @c8y/client services.
     * @param {IResult}  error The error from server.
     * @param {alertType} type The type of alert.
     */
    AlertService.prototype.addServerFailure = function (error, type) {
        if (type === void 0) { type = 'danger'; }
        var data = error.data, res = error.res;
        var text = data && data.message ? data.message : null;
        var detailedData;
        if (data) {
            if (typeof data === 'object') {
                detailedData = data.exceptionMessage;
            }
            else if (typeof data === 'string') {
                detailedData = data;
            }
        }
        var hasRelevantMessage = !!(text || detailedData);
        if (!text) {
            text = gettext('A server error occurred.');
        }
        if (!hasRelevantMessage) {
            detailedData = {
                status: res.status,
                statusText: res.statusText,
                url: res.url
            };
        }
        this.addAlert({
            type: type,
            text: text,
            detailedData: detailedData
        });
    };
    /**
     * Compares two alert objects. Alerts are same if text, type, detailed data and callbacks are same.
     * Callbacks are same if they refer to the same function.
     */
    AlertService.prototype.areSame = function (alert1, alert2) {
        return (alert1.text === alert2.text &&
            alert1.type === alert2.type &&
            isEqual(alert1.detailedData, alert2.detailedData) &&
            alert1.onClose === alert2.onClose &&
            alert1.onDetail === alert2.onDetail);
    };
    AlertService.prototype.changeAlerts = function (newAlerts) {
        this.state$.next(newAlerts);
    };
    AlertService.prototype.addAlert = function (alert) {
        var _this = this;
        if (!alert.text && !alert.type) {
            throw new Error('Cannot add empty alert');
        }
        var alertAlreadyAdded = this.state.find(function (item) { return _this.areSame(alert, item); });
        if (alertAlreadyAdded) {
            return;
        }
        this.changeAlerts(tslib_1.__spread(this.state, [alert]));
        this.hideAutomaticallyIfNeeded(alert);
        this.removeOldestIfMax();
    };
    AlertService.prototype.hideAutomaticallyIfNeeded = function (alert) {
        var _this = this;
        var isSuccess = alert.type === 'success';
        var noDetails = !alert.detailedData;
        var alertTimeout = isSuccess && noDetails ? this.ALERT_TIMEOUT : 0;
        if (typeof alert.timeout !== 'undefined') {
            alertTimeout = alert.timeout;
        }
        if (alertTimeout) {
            setTimeout(function () { return _this.remove(alert); }, alertTimeout);
        }
    };
    AlertService.prototype.removeOldestIfMax = function () {
        if (this.state.length > this.MAX_ALERTS) {
            var _a = tslib_1.__read(this.state), firstRemoved = _a.slice(1);
            this.changeAlerts(firstRemoved);
        }
    };
    AlertService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AlertService_Factory() { return new AlertService(); }, token: AlertService, providedIn: "root" });
    AlertService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AlertService);
    return AlertService;
}(StateService));
export { AlertService };
//# sourceMappingURL=data:application/json;base64,