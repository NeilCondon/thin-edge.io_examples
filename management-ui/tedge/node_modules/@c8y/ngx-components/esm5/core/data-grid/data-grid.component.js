import * as tslib_1 from "tslib";
import { CdkHeaderCell } from '@angular/cdk/table';
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactory, ComponentFactoryResolver, ContentChildren, ElementRef, EventEmitter, Input, OnChanges, Output, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { throttle } from './../common/throttle.decorator';
import { flow, get, parseInt as _parseInt, union, without, uniqBy } from 'lodash-es';
import { combineLatest, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, first, mergeMap, take, takeUntil, tap } from 'rxjs/operators';
import { LoadMoreComponent } from '../common/load-more.component';
import { gettext } from '../i18n/gettext';
import { ColumnDirective } from './column/column.directive';
import { FilteringActionType, minColumnGridTrackSize, ratiosByColumnTypes } from './data-grid.model';
import { GridDataSource } from './grid-data-source';
var DataGridComponent = /** @class */ (function () {
    function DataGridComponent(sanitizer, hostRef, cd, cfr) {
        this.sanitizer = sanitizer;
        this.hostRef = hostRef;
        this.cd = cd;
        this.cfr = cfr;
        this.title = gettext('Items');
        this.loadMoreItemsLabel = gettext('Load more items');
        this.loadingItemsLabel = gettext('Loading itemsâ€¦');
        this.showSearch = false;
        this.showChildDevices = {};
        this.dataSource = new GridDataSource();
        this.filteringLabelsParams = {
            filteredItemsCount: 0,
            allItemsCount: 0
        };
        this.paginationLabelParams = {
            pageFirstItemIdx: 0,
            pageLastItemIdx: 0,
            itemsTotal: 0
        };
        this.possiblePageSizes = [10, 15, 20, 30, 50];
        this.minPossiblePageSize = Math.min.apply(Math, tslib_1.__spread(this.possiblePageSizes));
        this.selectable = false;
        this.selectionPrimaryKey = 'id';
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.searchText = '';
        this.rowMouseOver = new EventEmitter();
        this.rowMouseLeave = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.onConfigChange = new EventEmitter();
        this.onFilter = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.onChildDevices = new EventEmitter();
        this.columnNames = [];
        this.styles = {
            tableCursor: 'auto',
            gridTemplateColumns: undefined,
            gridInfiniteScrollColumn: undefined
        };
        this.searchText$ = new EventEmitter();
        this.filteringApplied = false;
        this.totalPagesCount = Infinity;
        this.selectedItemIds = [];
        this.currentPageSelectionState = {
            allSelected: false,
            allDeselected: true
        };
        this.builtInActionType = {
            Edit: "EDIT" /* Edit */,
            Delete: "DELETE" /* Delete */,
            Export: "EXPORT" /* Export */
        };
        this.resizeHandleMouseDown$ = new EventEmitter();
        this.resizeHandleContainerMouseMove$ = new EventEmitter();
        this.resizeHandleContainerMouseUp$ = new EventEmitter();
        this.unsubscribe$ = new Subject();
    }
    Object.defineProperty(DataGridComponent.prototype, "_columns", {
        set: function (columns) {
            this.columns = columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_rows", {
        set: function (rows) {
            this.rows = rows || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_pagination", {
        set: function (pagination) {
            this.pagination = pagination;
            var pageSize = get(this.pagination, 'pageSize');
            if (pageSize &&
                !this.possiblePageSizes.find(function (possiblePageSize) { return possiblePageSize === pageSize; })) {
                this.pagination = tslib_1.__assign({}, this.pagination, { pageSize: 10 });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_infiniteScroll", {
        set: function (infiniteScroll) {
            this.infiniteScroll = infiniteScroll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_serverSideDataCallback", {
        set: function (serverSideDataCallback) {
            this.serverSideDataCallback = serverSideDataCallback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectable", {
        set: function (selectable) {
            this.selectable = selectable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_selectionPrimaryKey", {
        set: function (selectionPrimaryKey) {
            this.selectionPrimaryKey = selectionPrimaryKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_displayOptions", {
        set: function (displayOptions) {
            this.displayOptions = tslib_1.__assign({}, this.displayOptions, displayOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_actionControls", {
        set: function (actionControls) {
            this.actionControls = actionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataGridComponent.prototype, "_bulkActionControls", {
        set: function (bulkActionControls) {
            this.bulkActionControls = bulkActionControls || [];
        },
        enumerable: true,
        configurable: true
    });
    DataGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.searchText$
            .pipe(takeUntil(this.unsubscribe$), debounceTime(300), distinctUntilChanged(), tap(function (searchText) {
            _this.searchText = searchText;
        }))
            .subscribe(function () {
            _this.reload();
        });
        if (this.selectable) {
            combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                .pipe(takeUntil(this.unsubscribe$))
                .subscribe(function (_a) {
                var _b = tslib_1.__read(_a, 1), data = _b[0];
                var currentPageEmpty = data.length === 0;
                _this.currentPageSelectionState = {
                    allSelected: currentPageEmpty ? false : data.every(function (item) { return _this.isItemSelected(item); }),
                    allDeselected: currentPageEmpty ? true : data.every(function (item) { return !_this.isItemSelected(item); })
                };
            });
        }
        this.dataSource.stats$.pipe(takeUntil(this.unsubscribe$)).subscribe(function (stats) {
            _this.createLoadMoreComponent(stats);
            _this.updateFilteringLabelsParams(stats);
            _this.updatePaginationLabelParams(stats);
        });
        if (this.refresh) {
            this.refresh.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {
                _this.cancel();
                _this.reload();
            });
        }
    };
    DataGridComponent.prototype.ngOnChanges = function (event) {
        if (!event._actionControls || event._actionControls.firstChange) {
            this.loadData();
        }
        this.updateColumns();
    };
    DataGridComponent.prototype.ngAfterViewInit = function () {
        this.updateGridColumnsSize();
        this.thEls = this.thRefs.toArray().map(function (_a) {
            var nativeElement = _a.nativeElement;
            return nativeElement;
        });
        this.setupResizeHandle();
    };
    DataGridComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    DataGridComponent.prototype.trackByName = function (index, item) {
        return item.name;
    };
    DataGridComponent.prototype.resolveCellValue = function (row, path) {
        var _this = this;
        return flow([
            function (x) { return _this.dataSource.resolveValue(x, path); },
            this.dataSource.resolveFunction,
            this.dataSource.normalizeNil
        ])(row);
    };
    DataGridComponent.prototype.changeSortOrder = function (columnName) {
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        if (column) {
            var sortOrder = column.sortOrder;
            if (!sortOrder) {
                this.updateSorting([columnName], 'asc');
            }
            else if (sortOrder === 'asc') {
                this.updateSorting([columnName], 'desc');
            }
            else {
                this.updateSorting([columnName], '');
            }
        }
    };
    DataGridComponent.prototype.updateSorting = function (columnNames, sortOrder) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return tslib_1.__assign({}, column, { sortOrder: sortOrder });
            }
            return column;
        });
        this.emitConfigChange();
        this.reload();
    };
    DataGridComponent.prototype.applyFilter = function (columnName, dropdown, filteringModifier) {
        this.updateFiltering([columnName], {
            type: FilteringActionType.ApplyFilter,
            payload: { filteringModifier: filteringModifier }
        });
        dropdown.hide();
        this.onFilter.emit({ columnName: columnName, dropdown: dropdown, filteringModifier: filteringModifier });
    };
    DataGridComponent.prototype.resetFilter = function (columnName, dropdown) {
        this.updateFiltering([columnName], { type: FilteringActionType.ResetFilter });
        dropdown.hide();
    };
    DataGridComponent.prototype.clearFilters = function () {
        this.updateFiltering(this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        }), {
            type: FilteringActionType.ResetFilter
        });
    };
    DataGridComponent.prototype.updateFiltering = function (columnNames, action) {
        this.columns = this.columns.map(function (column) {
            if (columnNames.includes(column.name)) {
                return tslib_1.__assign({}, column, (action.type === FilteringActionType.ApplyFilter
                    ? action.payload.filteringModifier
                    : { filterPredicate: undefined, externalFilterQuery: undefined }));
            }
            return column;
        });
        this.updateFilteringApplied();
        this.reload();
    };
    DataGridComponent.prototype.updateFilteringApplied = function () {
        this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
    };
    DataGridComponent.prototype.isColumnFilteringApplied = function (column) {
        var filterable = column.filterable, filterPredicate = column.filterPredicate, externalFilterQuery = column.externalFilterQuery;
        return !!(filterable && (filterPredicate || externalFilterQuery));
    };
    DataGridComponent.prototype.updatePagination = function (_a) {
        var itemsPerPage = _a.itemsPerPage, page = _a.page;
        this.pagination = tslib_1.__assign({}, this.pagination, { pageSize: itemsPerPage, currentPage: page });
        this.loadData();
        this.emitConfigChange();
    };
    DataGridComponent.prototype.reload = function () {
        this.pagination = tslib_1.__assign({}, this.pagination, { currentPage: 1 });
        this.recreateLoadMoreComponent = true;
        this.loadData(true);
        this.scrollToTop();
    };
    DataGridComponent.prototype.loadNextPage = function () {
        var _this = this;
        this.pagination = tslib_1.__assign({}, this.pagination, { currentPage: this.pagination.nextPage });
        this.loadData();
        return this.dataSource.resultList$
            .pipe(take(1)) // in order for `toPromise` to work, the observable needs to complete
            .toPromise()
            .then(function (result) {
            return tslib_1.__assign({}, result, { paging: tslib_1.__assign({}, result.paging, { next: _this.loadNextPage.bind(_this) }) });
        });
    };
    DataGridComponent.prototype.getCellRendererSpec = function (_a) {
        var value = _a.value, row = _a.row, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'CELL', value: value, row: row, columnName: columnName });
    };
    DataGridComponent.prototype.getHeaderCellRendererSpec = function (_a) {
        var value = _a.value, columnName = _a.columnName;
        return this._getCellRendererSpec({ type: 'HEADER', value: value, row: undefined, columnName: columnName });
    };
    DataGridComponent.prototype.getFilteringFormRendererSpec = function (_a) {
        var column = _a.column, dropdown = _a.dropdown;
        return {
            renderer: get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                column.filteringFormRendererComponent,
            context: {
                property: column,
                applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                resetFilter: this.resetFilter.bind(this, column.name, dropdown)
            }
        };
    };
    DataGridComponent.prototype.setAllItemsSelected = function (selected) {
        var _this = this;
        this.dataSource.selection$
            .pipe(first())
            .subscribe(function (_a) {
            var filteredDataIds = _a.filteredDataIds;
            return _this.setItemsSelected(filteredDataIds, selected);
        });
    };
    DataGridComponent.prototype.setAllItemsInCurrentPageSelected = function (selected) {
        var _this = this;
        this.dataSource.data$.pipe(first()).subscribe(function (data) { return _this.setItemsSelected(data, selected); });
    };
    DataGridComponent.prototype.setItemsSelected = function (items, selected) {
        var _this = this;
        var itemIds = items.map(function (item) {
            return typeof item === 'object' ? item[_this.selectionPrimaryKey] : item;
        });
        this.selectedItemIds = selected
            ? union(this.selectedItemIds, itemIds)
            : without.apply(void 0, tslib_1.__spread([this.selectedItemIds], itemIds));
        this.itemsSelect.emit(this.selectedItemIds);
    };
    DataGridComponent.prototype.cancel = function () {
        this.selectedItemIds = [];
        this.itemsSelect.emit(this.selectedItemIds);
    };
    DataGridComponent.prototype.isItemSelected = function (item) {
        return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
    };
    DataGridComponent.prototype.onColumnDrop = function (_a) {
        var previousIndex = _a.previousIndex, currentIndex = _a.currentIndex;
        var differentIndex = previousIndex !== currentIndex;
        if (differentIndex) {
            var column = this.columns.splice(previousIndex, 1);
            this.columns.splice(currentIndex, 0, column[0]);
        }
        this.updateColumnNames();
        this.updateGridColumnsSize();
    };
    DataGridComponent.prototype.updateGridColumnsSize = function () {
        this.styles = tslib_1.__assign({}, this.styles, { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                .filter(function (column) { return column.visible; })
                .map(function (_a) {
                var gridTrackSize = _a.gridTrackSize;
                return gridTrackSize;
            })
                .join(' ')), gridInfiniteScrollColumn: this.sanitizer.bypassSecurityTrustStyle("1 / span " + this.columns.filter(function (column) { return column.visible; }).length) });
        this.emitConfigChange();
    };
    DataGridComponent.prototype.loadChildDevices = function () {
        this.showChildDevices.value = !this.showChildDevices.value;
        this.onChildDevices.emit(this.showChildDevices.value);
    };
    DataGridComponent.prototype.emitConfigChange = function () {
        var columns = this.columns.map(function (_a) {
            var visible = _a.visible, sortOrder = _a.sortOrder, name = _a.name;
            return ({
                visible: visible,
                sortOrder: sortOrder,
                name: name
            });
        });
        this.onConfigChange.emit({ columns: columns, pagination: this.pagination });
    };
    DataGridComponent.prototype.updateColumns = function () {
        var specialColumn = {
            gridTrackSize: 'minmax(42px, 82px)',
            sortable: false,
            positionFixed: true
        };
        var columns = tslib_1.__spread([
            this.selectable ? tslib_1.__assign({}, specialColumn, { name: "checkbox" /* Checkbox */ }) : undefined
        ], this.columns, [
            this.actionControls.length > 0
                ? tslib_1.__assign({}, specialColumn, { name: "actions" /* Actions */ }) : undefined
        ]).filter(Boolean)
            .map(this.withColumnDefaults);
        this.columns = uniqBy(columns, 'name');
        this.updateColumnNames();
        this.updateGridColumnsSize();
        this.updateFilteringApplied();
    };
    DataGridComponent.prototype.withColumnDefaults = function (column) {
        var dataType = column.dataType || "text-short" /* TextShort */;
        var headerCSSClassName = column.headerCSSClassName, cellCSSClassName = column.cellCSSClassName;
        return tslib_1.__assign({ visible: true, positionFixed: false, sortable: true, sortOrder: '', filterable: false }, column, { dataType: dataType, gridTrackSize: column.gridTrackSize ||
                "minmax(" + minColumnGridTrackSize + "px, " + ratiosByColumnTypes[dataType] + "fr)", headerCSSClassName: (typeof headerCSSClassName === 'string'
                ? headerCSSClassName.split(' ')
                : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                [] });
    };
    DataGridComponent.prototype.updateColumnNames = function () {
        this.columnNames = this.columns.map(function (_a) {
            var name = _a.name;
            return name;
        });
    };
    DataGridComponent.prototype.setupResizeHandle = function () {
        var _this = this;
        var resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(takeUntil(this.unsubscribe$), tap(function () { return _this.clearMouseHighlights(); }), mergeMap(function (_a) {
            var event = _a.event, targetColumnName = _a.targetColumnName;
            _this.columns = _this.columns.map(function (column) {
                if (column.name === targetColumnName) {
                    return tslib_1.__assign({}, column, { headerCSSClassName: union(column.headerCSSClassName, ['header--being-resized']) });
                }
                return column;
            });
            _this.headerBeingResized = {
                columnName: targetColumnName,
                el: event.target.parentNode
            };
            _this.styles = tslib_1.__assign({}, _this.styles, { tableCursor: 'col-resize' });
            return _this.resizeHandleContainerMouseMove$.pipe(tap(function () { return _this.clearMouseHighlights(); }), takeUntil(_this.resizeHandleContainerMouseUp$));
        }));
        resizeHandleDrag$.subscribe(function (event) {
            requestAnimationFrame(function () {
                _this.columns = _this.columns.map(function (column, i) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        var wrapper = _this.hostRef.nativeElement;
                        // Read wrapper's offset left relative to the document.
                        var horizontalOffset = wrapper.getBoundingClientRect().left;
                        // Adjust with the wrapper horizontal scroll position.
                        var horizontalScrollOffset = wrapper.scrollLeft - horizontalOffset;
                        // Calculate the desired width.
                        var width = horizontalScrollOffset + event.clientX - (_this.headerBeingResized.el.offsetLeft || 0);
                        return tslib_1.__assign({}, column, { 
                            // Update the column object with the new size value, enforce our minimum size.
                            gridTrackSize: Math.max(minColumnGridTrackSize, width) + "px" });
                    }
                    // For the other headers which don't have a set width, fix it to their computed width.
                    if (column.gridTrackSize.startsWith('minmax')) {
                        return tslib_1.__assign({}, column, { 
                            // isn't fixed yet (it would be a px value)
                            gridTrackSize: _parseInt(_this.thEls[i].clientWidth) + "px" });
                    }
                    return column;
                });
                /*
                 * Update the column sizes.
                 * Note: grid-template-columns sets the width for all columns in one value.
                 */
                _this.updateGridColumnsSize();
            });
        });
        this.resizeHandleContainerMouseUp$.pipe(takeUntil(this.unsubscribe$)).subscribe(function () {
            if (_this.headerBeingResized) {
                _this.columns = _this.columns.map(function (column) {
                    if (column.name === _this.headerBeingResized.columnName) {
                        return tslib_1.__assign({}, column, { headerCSSClassName: without(column.headerCSSClassName, 'header--being-resized') });
                    }
                    return column;
                });
                _this.headerBeingResized = undefined;
                _this.styles = tslib_1.__assign({}, _this.styles, { tableCursor: 'auto' });
            }
        });
    };
    DataGridComponent.prototype.clearMouseHighlights = function () {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    };
    DataGridComponent.prototype._getCellRendererSpec = function (_a) {
        var type = _a.type, value = _a.value, row = _a.row, columnName = _a.columnName;
        var column = this.columns.find(function (_a) {
            var name = _a.name;
            return name === columnName;
        });
        var columnRenderer = this.getColumnRenderer(column);
        var rendererTemplate = get(columnRenderer, (type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef') + ".template");
        var cellRendererComponent = column.cellRendererComponent, headerCellRendererComponent = column.headerCellRendererComponent;
        var rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
        return {
            renderer: rendererTemplate || rendererComponent,
            context: {
                value: value,
                item: row,
                property: column
            }
        };
    };
    DataGridComponent.prototype.getColumnRenderer = function (column) {
        return this.columnRenderers.toArray().find(function (_a) {
            var name = _a.name;
            return name === column.name;
        });
    };
    DataGridComponent.prototype.loadData = function (reload) {
        if (reload === void 0) { reload = false; }
        var _a = this, rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey, infiniteScroll = _a.infiniteScroll;
        this.dataSource.loadData({
            rows: rows,
            columns: columns,
            pagination: pagination,
            searchText: searchText,
            serverSideDataCallback: serverSideDataCallback,
            selectable: selectable,
            selectionPrimaryKey: selectionPrimaryKey,
            infiniteScroll: infiniteScroll,
            reload: reload
        });
    };
    DataGridComponent.prototype.updateFilteringLabelsParams = function (stats) {
        this.filteringLabelsParams = {
            filteredItemsCount: stats.filteredSize,
            allItemsCount: stats.size
        };
    };
    DataGridComponent.prototype.updatePaginationLabelParams = function (stats) {
        this.pagination.nextPage = stats.nextPage;
        var pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
        this.paginationLabelParams = {
            pageFirstItemIdx: pageFirstItemIdx,
            pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
            itemsTotal: stats.filteredSize
        };
    };
    DataGridComponent.prototype.createLoadMoreComponent = function (stats) {
        if (this.infiniteScroll &&
            stats &&
            stats.nextPage &&
            (!this.loadMoreComponent || this.recreateLoadMoreComponent)) {
            this.recreateLoadMoreComponent = false;
            this.infiniteScrollContainer.clear();
            var componentFactory = this.cfr.resolveComponentFactory(LoadMoreComponent);
            var componentRef = this.infiniteScrollContainer.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.useIntersection = this.infiniteScroll === 'auto' || this.infiniteScroll === 'hidden';
            instance.hidden = this.infiniteScroll === 'hidden';
            instance.paging = {
                nextPage: stats.nextPage,
                next: this.loadNextPage.bind(this)
            };
            instance.loadNextLabel = this.loadMoreItemsLabel;
            instance.loadingLabel = this.loadingItemsLabel;
            this.loadMoreComponent = instance;
        }
        else if (this.loadMoreComponent && !stats.nextPage) {
            this.loadMoreComponent.paging = {
                nextPage: null
            };
        }
    };
    DataGridComponent.prototype.scrollToTop = function () {
        if (this.infiniteScroll) {
            this.scrollContainer.nativeElement.scrollTop = 0;
        }
    };
    DataGridComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "loadMoreItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "loadingItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "showSearch", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "refresh", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "showChildDevices", void 0);
    tslib_1.__decorate([
        Input('columns')
    ], DataGridComponent.prototype, "_columns", null);
    tslib_1.__decorate([
        Input('rows')
    ], DataGridComponent.prototype, "_rows", null);
    tslib_1.__decorate([
        Input('pagination')
    ], DataGridComponent.prototype, "_pagination", null);
    tslib_1.__decorate([
        Input('infiniteScroll')
    ], DataGridComponent.prototype, "_infiniteScroll", null);
    tslib_1.__decorate([
        Input('serverSideDataCallback')
    ], DataGridComponent.prototype, "_serverSideDataCallback", null);
    tslib_1.__decorate([
        Input('selectable')
    ], DataGridComponent.prototype, "_selectable", null);
    tslib_1.__decorate([
        Input('selectionPrimaryKey')
    ], DataGridComponent.prototype, "_selectionPrimaryKey", null);
    tslib_1.__decorate([
        Input('displayOptions')
    ], DataGridComponent.prototype, "_displayOptions", null);
    tslib_1.__decorate([
        Input('actionControls')
    ], DataGridComponent.prototype, "_actionControls", null);
    tslib_1.__decorate([
        Input('bulkActionControls')
    ], DataGridComponent.prototype, "_bulkActionControls", null);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "searchText", void 0);
    tslib_1.__decorate([
        Input()
    ], DataGridComponent.prototype, "itemsSelectLimit", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseOver", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowMouseLeave", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "rowClick", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "onConfigChange", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "onFilter", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "itemsSelect", void 0);
    tslib_1.__decorate([
        Output()
    ], DataGridComponent.prototype, "onChildDevices", void 0);
    tslib_1.__decorate([
        ContentChildren(ColumnDirective)
    ], DataGridComponent.prototype, "columnRenderers", void 0);
    tslib_1.__decorate([
        ViewChild('scroll', { static: true })
    ], DataGridComponent.prototype, "scrollContainer", void 0);
    tslib_1.__decorate([
        ViewChild('infiniteScrollContainer', { static: false, read: ViewContainerRef })
    ], DataGridComponent.prototype, "infiniteScrollContainer", void 0);
    tslib_1.__decorate([
        ViewChildren(CdkHeaderCell, { read: ElementRef })
    ], DataGridComponent.prototype, "thRefs", void 0);
    tslib_1.__decorate([
        throttle(500, { trailing: true, leading: false })
    ], DataGridComponent.prototype, "loadData", null);
    DataGridComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-data-grid',
            template: "<div class=\"table-data-grid-scroll\" #scroll>\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator large-padding\">\n    <h4 class=\"m-r-16\">{{ title | translate }}</h4>\n\n    <ng-container *ngIf=\"displayOptions.filter\">\n      <span *ngIf=\"!filteringApplied\">\n        <span class=\"label label-warning m-r-4\" translate>No filters</span>\n        <small\n          *ngIf=\"!!filteringLabelsParams.allItemsCount\"\n          class=\"m-r-4\"\n          ngNonBindable\n          translate\n          [translateParams]=\"filteringLabelsParams\"\n          >{{ filteredItemsCount }} of {{ allItemsCount }} items</small\n        >\n      </span>\n      <span *ngIf=\"filteringApplied\">\n        <ng-container *ngIf=\"!!filteringLabelsParams.allItemsCount\">\n          <span class=\"badge badge-info m-r-4\">\n            {{ (dataSource.stats$ | async).filteredSize }}\n          </span>\n          <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n            >of {{ allItemsCount }} items</small\n          >\n        </ng-container>\n        <button\n          title=\" {{ 'Clear filters' | translate }}\"\n          class=\"m-l-8 btn btn-xs btn-default m-r-4\"\n          (click)=\"clearFilters()\"\n        >\n          {{ 'Clear filters' | translate }}\n        </button>\n      </span>\n      <span class=\"hidden-xs hidden-sm\">\n        <button\n          class=\"btn-clean text-primary\"\n          popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n          placement=\"right\"\n          triggers=\"focus\"\n        >\n          <i c8yIcon=\"question-circle-o\"></i>\n        </button> </span\n    ></ng-container>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <label class=\"c8y-switch\" *ngIf=\"showChildDevices.show\">\n          <input type=\"checkbox\" [(ngModel)]=\"showChildDevices.value\" (click)=\"loadChildDevices()\"/>\n          <span></span>\n          {{ 'Show child devices' | translate }}\n        </label>\n\n        <div\n          class=\"dropdown\"\n          dropdown\n          [insideClick]=\"true\"\n          container=\"body\"\n          placement=\"bottom left\"\n        >\n          <button\n            title=\"{{ 'Configure columns' | translate }}\"\n            class=\"btnbar-btn c8y-dropdown\"\n            dropdownToggle\n          >\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i>\n            <span>{{ 'Configure columns' | translate }}</span>\n          </button>\n\n          <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n            <li class=\"bg-white\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after p-0 \">\n                      <label\n                        title=\"{{ (column.header | translate) || column.name }}\"\n                        class=\"c8y-checkbox p-l-16 p-r-32 p-t-8 p-b-8 flex-item-v-stretch\"\n                      >\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize()\"\n                        />\n                        <span></span>\n                        <span>{{ (column.header | translate) || column.name }}</span>\n                      </label>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          title=\"{{ 'Reload' | translate }}\"\n          class=\"btnbar-btn btn-link\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"searchText = ''; reload()\"\n        >\n          <i c8yIcon=\"refresh\" class=\"m-r-4\"></i>\n          <span>{{ 'Reload' | translate }}</span>\n        </button>\n\n        <div *ngIf=\"!serverSideDataCallback || showSearch\" class=\"input-group input-group-search m-l-sm-32\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span\n          *ngIf=\"!itemsSelectLimit; else limit\"\n          ngNonBindable\n          translate\n          [translateParams]=\"{ count: selectedItemIds.length }\"\n        >\n          {{ count }} selected items.\n        </span>\n        <ng-template #limit>\n          <span\n            ngNonBindable\n            translate\n            [translateParams]=\"{ count: selectedItemIds.length, limit: itemsSelectLimit }\"\n          >\n            {{ count }} selected items out of {{ limit }} allowed\n          </span>\n        </ng-template>\n\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"selectedItemIds.length >= pagination.pageSize && !itemsSelectLimit\">\n          <a (click)=\"setAllItemsSelected(true)\" class=\"interact\" >\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <button\n              title=\"{{ 'Export' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Export\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"sign-out\"></i>\n              <span>{{ 'Export' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ 'Delete' | translate }}\"\n              *ngSwitchCase=\"builtInActionType.Delete\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"trash\"></i>\n              <span>{{ 'Delete' | translate }}</span>\n            </button>\n\n            <button\n              title=\"{{ bulkActionControl.text | translate }}\"\n              *ngSwitchDefault\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n              <span>{{ bulkActionControl.text | translate }}</span>\n            </button>\n          </ng-container>\n\n          <button title=\"{{ 'Cancel' | translate }}\" class=\"btnbar-btn\" (click)=\"cancel()\">\n            <i c8yIcon=\"times\"></i>\n            <span>{{ 'Cancel' | translate }}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid large-padding\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\" [cdkColumnDef]=\"column.name\">\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div *ngIf=\"!itemsSelectLimit\">\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n                [disabled]=\"selectedItemIds.length >= itemsSelectLimit && !isItemSelected(row)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    title=\"{{ 'Edit' | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"pencil\"></i>\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    class=\"btn btn-dot showOnHover\"\n                    title=\"{{ 'Delete' | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                  </button>\n                  <button\n                    *ngSwitchDefault\n                    class=\"btn btn-icon btn-xs btn-default\"\n                    title=\"{{ actionControl.text | translate }}\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                  </button>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n\n            <div *ngIf=\"actionControls.length > 2\" class=\"dropdown\" dropdown>\n              <button\n                title=\"{{ 'Actions' | translate }}\"\n                class=\"dropdown-toggle c8y-dropdown\"\n                dropdownToggle\n              >\n                <i c8yIcon=\"ellipsis-v\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                  <ng-container *ngIf=\"actionControl.showIf ? actionControl.showIf(row) : true\">\n                    <button\n                      title=\"{{ 'Edit' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Edit\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"pencil\"></i>\n                      {{ 'Edit' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ 'Delete' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Delete\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"trash\"></i>\n                      {{ 'Delete' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ 'Export' | translate }}\"\n                      *ngSwitchCase=\"builtInActionType.Export\"\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"download\"></i>\n                      {{ 'Export' | translate }}\n                    </button>\n                    <button\n                      title=\"{{ actionControl.text | translate }}\"\n                      *ngSwitchDefault\n                      (click)=\"actionControl.callback(row, reload.bind(this))\"\n                    >\n                      <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                      {{ actionControl.text | translate }}\n                    </button>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  (\n                    [{\n                      columnName: column.name,\n                      value: ((column.header | translate) || column.name)\n                    }]\n                      | map:getHeaderCellRendererSpec:this\n                  ) as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              placement=\"bottom left\"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    (\n                      [{\n                        columnName: column.name,\n                        value: ((column.header | translate) || column.name)\n                      }]\n                        | map:getHeaderCellRendererSpec:this\n                    ) as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\" title=\"{{ 'Filter' | translate }}\"></i>\n              </button>\n\n              <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n                <li class=\"data-grid__dropdown\">\n                  <ng-container\n                    *ngIf=\"\n                      (\n                        [{\n                          column: column,\n                          dropdown: dropdown\n                        }]\n                          | map:getFilteringFormRendererSpec:this\n                      ) as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer [spec]=\"filteringFormRendererSpec\">\n                    </c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            >\n            </span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                (\n                  [{\n                    value: resolveCellValue(row, column.path),\n                    row: row,\n                    columnName: column.name\n                  }]\n                    | map:getCellRendererSpec:this\n                ) as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"infiniteScrollFooter\">\n      <td cdk-footer-cell *cdkFooterCellDef [style.grid-column]=\"styles.gridInfiniteScrollColumn\">\n        <template #infiniteScrollContainer></template>\n      </td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n\n    <ng-container *ngIf=\"infiniteScroll\">\n      <tr cdk-footer-row *cdkFooterRowDef=\"['infiniteScrollFooter']\"></tr>\n    </ng-container>\n  </table>\n\n  <div *ngIf=\"(dataSource.loading$ | async) && !loadMoreComponent\" class=\"text-center\">\n    <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n  </div>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <ng-content select=\".c8y-empty-state\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination && !infiniteScroll\" class=\"table-data-grid-footer separator large-padding\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\"\n          >{{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}</span\n        >\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\">{{ 'Items per page' | translate }}</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        [class.hidden]=\"totalPagesCount <= 1\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount = $event\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n"
        })
    ], DataGridComponent);
    return DataGridComponent;
}());
export { DataGridComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1ncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RhdGEtZ3JpZC9kYXRhLWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUNMLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGdCQUFnQixFQUNoQix3QkFBd0IsRUFDeEIsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sU0FBUyxFQUNULFNBQVMsRUFDVCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDMUQsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxJQUFJLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNyRixPQUFPLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQ0wsWUFBWSxFQUNaLG9CQUFvQixFQUNwQixLQUFLLEVBQ0wsUUFBUSxFQUNSLElBQUksRUFDSixTQUFTLEVBQ1QsR0FBRyxFQUNKLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUU1RCxPQUFPLEVBU0wsbUJBQW1CLEVBQ25C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ZSxDQUFDOzhEQUE2QztJQUV2QztRQUF0QyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhEQUE2QjtJQUduRTtRQURDLFNBQVMsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLENBQUM7c0VBQ3RDO0lBbUNTO1FBQWxELFlBQVksQ0FBQyxhQUFhLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUM7cURBQXVDO0lBOGR6RjtRQURDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztxREF3QmpEO0lBdG9CVSxpQkFBaUI7UUFKN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsNmhxQkFBeUM7U0FDMUMsQ0FBQztPQUNXLGlCQUFpQixDQTRyQjdCO0lBQUQsd0JBQUM7Q0FBQSxBQTVyQkQsSUE0ckJDO1NBNXJCWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtIZWFkZXJDZWxsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RhYmxlJztcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgUXVlcnlMaXN0LFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlbixcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgSVJlc3VsdExpc3QsIFBhZ2luZyB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnLi8uLi9jb21tb24vdGhyb3R0bGUuZGVjb3JhdG9yJztcbmltcG9ydCB7IGZsb3csIGdldCwgcGFyc2VJbnQgYXMgX3BhcnNlSW50LCB1bmlvbiwgd2l0aG91dCwgdW5pcUJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGRlYm91bmNlVGltZSxcbiAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gIGZpcnN0LFxuICBtZXJnZU1hcCxcbiAgdGFrZSxcbiAgdGFrZVVudGlsLFxuICB0YXBcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTG9hZE1vcmVDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vbG9hZC1tb3JlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2FkTW9yZU1vZGUgfSBmcm9tICcuLi9jb21tb24vbG9hZC1tb3JlLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgQ2VsbFJlbmRlcmVyU3BlYyB9IGZyb20gJy4vY29sdW1uL2NlbGwtcmVuZGVyZXInO1xuaW1wb3J0IHsgQ29sdW1uRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4vY29sdW1uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJTcGVjLCBGaWx0ZXJpbmdNb2RpZmllciB9IGZyb20gJy4vY29sdW1uL2ZpbHRlcmluZy1mb3JtLXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIEFjdGlvbkNvbnRyb2wsXG4gIEJ1aWx0SW5BY3Rpb25UeXBlLFxuICBCdWxrQWN0aW9uQ29udHJvbCxcbiAgQ29sdW1uLFxuICBDb2x1bW5EYXRhVHlwZSxcbiAgRGF0YUdyaWQsXG4gIERhdGFTb3VyY2VTdGF0cyxcbiAgRGlzcGxheU9wdGlvbnMsXG4gIEZpbHRlcmluZ0FjdGlvblR5cGUsXG4gIG1pbkNvbHVtbkdyaWRUcmFja1NpemUsXG4gIFBhZ2luYXRpb24sXG4gIHJhdGlvc0J5Q29sdW1uVHlwZXMsXG4gIFJvdyxcbiAgU2VydmVyU2lkZURhdGFDYWxsYmFjayxcbiAgU29ydE9yZGVyLFxuICBTcGVjaWFsQ29sdW1uTmFtZSxcbiAgR3JpZENvbmZpZ1xufSBmcm9tICcuL2RhdGEtZ3JpZC5tb2RlbCc7XG5pbXBvcnQgeyBHcmlkRGF0YVNvdXJjZSB9IGZyb20gJy4vZ3JpZC1kYXRhLXNvdXJjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1kYXRhLWdyaWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0YS1ncmlkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEYXRhR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIERhdGFHcmlkLCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nID0gZ2V0dGV4dCgnSXRlbXMnKTtcbiAgQElucHV0KCkgbG9hZE1vcmVJdGVtc0xhYmVsOiBzdHJpbmcgPSBnZXR0ZXh0KCdMb2FkIG1vcmUgaXRlbXMnKTtcbiAgQElucHV0KCkgbG9hZGluZ0l0ZW1zTGFiZWw6IHN0cmluZyA9IGdldHRleHQoJ0xvYWRpbmcgaXRlbXPigKYnKTtcbiAgQElucHV0KCkgc2hvd1NlYXJjaCA9IGZhbHNlO1xuICBASW5wdXQoKSByZWZyZXNoOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgQElucHV0KCkgc2hvd0NoaWxkRGV2aWNlczogYW55ID0ge307XG5cbiAgY29sdW1uczogQ29sdW1uW107XG4gIEBJbnB1dCgnY29sdW1ucycpXG4gIHNldCBfY29sdW1ucyhjb2x1bW5zKSB7XG4gICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgfVxuXG4gIGRhdGFTb3VyY2UgPSBuZXcgR3JpZERhdGFTb3VyY2UoKTtcbiAgcm93czogUm93W107XG4gIEBJbnB1dCgncm93cycpXG4gIHNldCBfcm93cyhyb3dzKSB7XG4gICAgdGhpcy5yb3dzID0gcm93cyB8fCBbXTtcbiAgfVxuXG4gIGZpbHRlcmluZ0xhYmVsc1BhcmFtcyA9IHtcbiAgICBmaWx0ZXJlZEl0ZW1zQ291bnQ6IDAsXG4gICAgYWxsSXRlbXNDb3VudDogMFxuICB9O1xuXG4gIHBhZ2luYXRpb246IFBhZ2luYXRpb247XG4gIHBhZ2luYXRpb25MYWJlbFBhcmFtcyA9IHtcbiAgICBwYWdlRmlyc3RJdGVtSWR4OiAwLFxuICAgIHBhZ2VMYXN0SXRlbUlkeDogMCxcbiAgICBpdGVtc1RvdGFsOiAwXG4gIH07XG4gIHJlYWRvbmx5IHBvc3NpYmxlUGFnZVNpemVzOiBudW1iZXJbXSA9IFsxMCwgMTUsIDIwLCAzMCwgNTBdO1xuICByZWFkb25seSBtaW5Qb3NzaWJsZVBhZ2VTaXplID0gTWF0aC5taW4oLi4udGhpcy5wb3NzaWJsZVBhZ2VTaXplcyk7XG4gIEBJbnB1dCgncGFnaW5hdGlvbicpXG4gIHNldCBfcGFnaW5hdGlvbihwYWdpbmF0aW9uKSB7XG4gICAgdGhpcy5wYWdpbmF0aW9uID0gcGFnaW5hdGlvbjtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IGdldCh0aGlzLnBhZ2luYXRpb24sICdwYWdlU2l6ZScpO1xuXG4gICAgaWYgKFxuICAgICAgcGFnZVNpemUgJiZcbiAgICAgICF0aGlzLnBvc3NpYmxlUGFnZVNpemVzLmZpbmQocG9zc2libGVQYWdlU2l6ZSA9PiBwb3NzaWJsZVBhZ2VTaXplID09PSBwYWdlU2l6ZSlcbiAgICApIHtcbiAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHsgLi4udGhpcy5wYWdpbmF0aW9uLCBwYWdlU2l6ZTogMTAgfTtcbiAgICB9XG4gIH1cblxuICBpbmZpbml0ZVNjcm9sbDogTG9hZE1vcmVNb2RlO1xuICBASW5wdXQoJ2luZmluaXRlU2Nyb2xsJylcbiAgc2V0IF9pbmZpbml0ZVNjcm9sbChpbmZpbml0ZVNjcm9sbDogTG9hZE1vcmVNb2RlKSB7XG4gICAgdGhpcy5pbmZpbml0ZVNjcm9sbCA9IGluZmluaXRlU2Nyb2xsO1xuICB9XG5cbiAgc2VydmVyU2lkZURhdGFDYWxsYmFjazogU2VydmVyU2lkZURhdGFDYWxsYmFjaztcbiAgQElucHV0KCdzZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrJylcbiAgc2V0IF9zZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrKHNlcnZlclNpZGVEYXRhQ2FsbGJhY2spIHtcbiAgICB0aGlzLnNlcnZlclNpZGVEYXRhQ2FsbGJhY2sgPSBzZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrO1xuICB9XG5cbiAgc2VsZWN0YWJsZSA9IGZhbHNlO1xuICBASW5wdXQoJ3NlbGVjdGFibGUnKVxuICBzZXQgX3NlbGVjdGFibGUoc2VsZWN0YWJsZSkge1xuICAgIHRoaXMuc2VsZWN0YWJsZSA9IHNlbGVjdGFibGU7XG4gIH1cblxuICBzZWxlY3Rpb25QcmltYXJ5S2V5ID0gJ2lkJztcbiAgQElucHV0KCdzZWxlY3Rpb25QcmltYXJ5S2V5JylcbiAgc2V0IF9zZWxlY3Rpb25QcmltYXJ5S2V5KHNlbGVjdGlvblByaW1hcnlLZXkpIHtcbiAgICB0aGlzLnNlbGVjdGlvblByaW1hcnlLZXkgPSBzZWxlY3Rpb25QcmltYXJ5S2V5O1xuICB9XG5cbiAgZGlzcGxheU9wdGlvbnM6IERpc3BsYXlPcHRpb25zID0ge1xuICAgIHN0cmlwZWQ6IHRydWUsXG4gICAgYm9yZGVyZWQ6IGZhbHNlLFxuICAgIGdyaWRIZWFkZXI6IHRydWUsXG4gICAgZmlsdGVyOiB0cnVlXG4gIH07XG4gIEBJbnB1dCgnZGlzcGxheU9wdGlvbnMnKVxuICBzZXQgX2Rpc3BsYXlPcHRpb25zKGRpc3BsYXlPcHRpb25zKSB7XG4gICAgdGhpcy5kaXNwbGF5T3B0aW9ucyA9IHsgLi4udGhpcy5kaXNwbGF5T3B0aW9ucywgLi4uZGlzcGxheU9wdGlvbnMgfTtcbiAgfVxuXG4gIGFjdGlvbkNvbnRyb2xzOiBBY3Rpb25Db250cm9sW107XG4gIEBJbnB1dCgnYWN0aW9uQ29udHJvbHMnKVxuICBzZXQgX2FjdGlvbkNvbnRyb2xzKGFjdGlvbkNvbnRyb2xzKSB7XG4gICAgdGhpcy5hY3Rpb25Db250cm9scyA9IGFjdGlvbkNvbnRyb2xzIHx8IFtdO1xuICB9XG5cbiAgYnVsa0FjdGlvbkNvbnRyb2xzOiBCdWxrQWN0aW9uQ29udHJvbFtdO1xuICBASW5wdXQoJ2J1bGtBY3Rpb25Db250cm9scycpXG4gIHNldCBfYnVsa0FjdGlvbkNvbnRyb2xzKGJ1bGtBY3Rpb25Db250cm9scykge1xuICAgIHRoaXMuYnVsa0FjdGlvbkNvbnRyb2xzID0gYnVsa0FjdGlvbkNvbnRyb2xzIHx8IFtdO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNlYXJjaFRleHQgPSAnJztcbiAgQElucHV0KCkgaXRlbXNTZWxlY3RMaW1pdDogbnVtYmVyO1xuXG4gIEBPdXRwdXQoKSByb3dNb3VzZU92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgQE91dHB1dCgpIHJvd01vdXNlTGVhdmUgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgQE91dHB1dCgpIHJvd0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gIEBPdXRwdXQoKSBvbkNvbmZpZ0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8R3JpZENvbmZpZz4oKTtcbiAgQE91dHB1dCgpIG9uRmlsdGVyID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gIEBPdXRwdXQoKSBpdGVtc1NlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nW10+KCk7XG4gIEBPdXRwdXQoKSBvbkNoaWxkRGV2aWNlcyA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBAQ29udGVudENoaWxkcmVuKENvbHVtbkRpcmVjdGl2ZSkgY29sdW1uUmVuZGVyZXJzOiBRdWVyeUxpc3Q8Q29sdW1uRGlyZWN0aXZlPjtcblxuICBAVmlld0NoaWxkKCdzY3JvbGwnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzY3JvbGxDb250YWluZXI6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnaW5maW5pdGVTY3JvbGxDb250YWluZXInLCB7IHN0YXRpYzogZmFsc2UsIHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgaW5maW5pdGVTY3JvbGxDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgbG9hZE1vcmVDb21wb25lbnQ6IExvYWRNb3JlQ29tcG9uZW50O1xuXG4gIGNvbHVtbk5hbWVzID0gW107XG5cbiAgc3R5bGVzID0ge1xuICAgIHRhYmxlQ3Vyc29yOiAnYXV0bycsXG4gICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogdW5kZWZpbmVkLFxuICAgIGdyaWRJbmZpbml0ZVNjcm9sbENvbHVtbjogdW5kZWZpbmVkXG4gIH07XG5cbiAgc2VhcmNoVGV4dCQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgZmlsdGVyaW5nQXBwbGllZCA9IGZhbHNlO1xuICB0b3RhbFBhZ2VzQ291bnQgPSBJbmZpbml0eTtcblxuICBzZWxlY3RlZEl0ZW1JZHM6IHN0cmluZ1tdID0gW107XG4gIGN1cnJlbnRQYWdlU2VsZWN0aW9uU3RhdGUgPSB7XG4gICAgYWxsU2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGFsbERlc2VsZWN0ZWQ6IHRydWVcbiAgfTtcblxuICBidWlsdEluQWN0aW9uVHlwZSA9IHtcbiAgICBFZGl0OiBCdWlsdEluQWN0aW9uVHlwZS5FZGl0LFxuICAgIERlbGV0ZTogQnVpbHRJbkFjdGlvblR5cGUuRGVsZXRlLFxuICAgIEV4cG9ydDogQnVpbHRJbkFjdGlvblR5cGUuRXhwb3J0XG4gIH07XG5cbiAgcmVzaXplSGFuZGxlTW91c2VEb3duJCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICByZXNpemVIYW5kbGVDb250YWluZXJNb3VzZU1vdmUkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHJlc2l6ZUhhbmRsZUNvbnRhaW5lck1vdXNlVXAkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIHByaXZhdGUgaGVhZGVyQmVpbmdSZXNpemVkOiB7XG4gICAgY29sdW1uTmFtZTogc3RyaW5nO1xuICAgIGVsOiBIVE1MRWxlbWVudDtcbiAgfTtcbiAgQFZpZXdDaGlsZHJlbihDZGtIZWFkZXJDZWxsLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgcHJpdmF0ZSB0aFJlZnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgcHJpdmF0ZSB0aEVscztcblxuICBwcml2YXRlIHJlY3JlYXRlTG9hZE1vcmVDb21wb25lbnQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZSQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICBwcml2YXRlIGhvc3RSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZWFyY2hUZXh0JFxuICAgICAgLnBpcGUoXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJCksXG4gICAgICAgIGRlYm91bmNlVGltZSgzMDApLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICB0YXAoc2VhcmNoVGV4dCA9PiB7XG4gICAgICAgICAgdGhpcy5zZWFyY2hUZXh0ID0gc2VhcmNoVGV4dDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgfSk7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RhYmxlKSB7XG4gICAgICBjb21iaW5lTGF0ZXN0KHRoaXMuZGF0YVNvdXJjZS5kYXRhJCwgdGhpcy5pdGVtc1NlbGVjdC5hc09ic2VydmFibGUoKSlcbiAgICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSlcbiAgICAgICAgLnN1YnNjcmliZSgoW2RhdGFdKSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFBhZ2VFbXB0eSA9IGRhdGEubGVuZ3RoID09PSAwO1xuXG4gICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVNlbGVjdGlvblN0YXRlID0ge1xuICAgICAgICAgICAgYWxsU2VsZWN0ZWQ6IGN1cnJlbnRQYWdlRW1wdHkgPyBmYWxzZSA6IGRhdGEuZXZlcnkoaXRlbSA9PiB0aGlzLmlzSXRlbVNlbGVjdGVkKGl0ZW0pKSxcbiAgICAgICAgICAgIGFsbERlc2VsZWN0ZWQ6IGN1cnJlbnRQYWdlRW1wdHkgPyB0cnVlIDogZGF0YS5ldmVyeShpdGVtID0+ICF0aGlzLmlzSXRlbVNlbGVjdGVkKGl0ZW0pKVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmRhdGFTb3VyY2Uuc3RhdHMkLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKHN0YXRzID0+IHtcbiAgICAgIHRoaXMuY3JlYXRlTG9hZE1vcmVDb21wb25lbnQoc3RhdHMpO1xuICAgICAgdGhpcy51cGRhdGVGaWx0ZXJpbmdMYWJlbHNQYXJhbXMoc3RhdHMpO1xuICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uTGFiZWxQYXJhbXMoc3RhdHMpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMucmVmcmVzaCkge1xuICAgICAgdGhpcy5yZWZyZXNoLnBpcGUodGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5fYWN0aW9uQ29udHJvbHMgfHwgZXZlbnQuX2FjdGlvbkNvbnRyb2xzLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLmxvYWREYXRhKCk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlQ29sdW1ucygpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudXBkYXRlR3JpZENvbHVtbnNTaXplKCk7XG4gICAgdGhpcy50aEVscyA9IHRoaXMudGhSZWZzLnRvQXJyYXkoKS5tYXAoKHsgbmF0aXZlRWxlbWVudCB9KSA9PiBuYXRpdmVFbGVtZW50KTtcbiAgICB0aGlzLnNldHVwUmVzaXplSGFuZGxlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlJC5uZXh0KCk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHRyYWNrQnlOYW1lKGluZGV4LCBpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmFtZTtcbiAgfVxuXG4gIHJlc29sdmVDZWxsVmFsdWUocm93LCBwYXRoKSB7XG4gICAgcmV0dXJuIGZsb3coW1xuICAgICAgeCA9PiB0aGlzLmRhdGFTb3VyY2UucmVzb2x2ZVZhbHVlKHgsIHBhdGgpLFxuICAgICAgdGhpcy5kYXRhU291cmNlLnJlc29sdmVGdW5jdGlvbixcbiAgICAgIHRoaXMuZGF0YVNvdXJjZS5ub3JtYWxpemVOaWxcbiAgICBdKShyb3cpO1xuICB9XG5cbiAgY2hhbmdlU29ydE9yZGVyKGNvbHVtbk5hbWUpIHtcbiAgICBjb25zdCBjb2x1bW4gPSB0aGlzLmNvbHVtbnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09IGNvbHVtbk5hbWUpO1xuXG4gICAgaWYgKGNvbHVtbikge1xuICAgICAgY29uc3QgeyBzb3J0T3JkZXIgfSA9IGNvbHVtbjtcblxuICAgICAgaWYgKCFzb3J0T3JkZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTb3J0aW5nKFtjb2x1bW5OYW1lXSwgJ2FzYycpO1xuICAgICAgfSBlbHNlIGlmIChzb3J0T3JkZXIgPT09ICdhc2MnKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU29ydGluZyhbY29sdW1uTmFtZV0sICdkZXNjJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVNvcnRpbmcoW2NvbHVtbk5hbWVdLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlU29ydGluZyhjb2x1bW5OYW1lczogc3RyaW5nW10sIHNvcnRPcmRlcjogU29ydE9yZGVyKSB7XG4gICAgdGhpcy5jb2x1bW5zID0gdGhpcy5jb2x1bW5zLm1hcChcbiAgICAgIChjb2x1bW4pOiBDb2x1bW4gPT4ge1xuICAgICAgICBpZiAoY29sdW1uTmFtZXMuaW5jbHVkZXMoY29sdW1uLm5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHsgLi4uY29sdW1uLCBzb3J0T3JkZXIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmVtaXRDb25maWdDaGFuZ2UoKTtcbiAgICB0aGlzLnJlbG9hZCgpO1xuICB9XG5cbiAgYXBwbHlGaWx0ZXIoY29sdW1uTmFtZSwgZHJvcGRvd24sIGZpbHRlcmluZ01vZGlmaWVyKSB7XG4gICAgdGhpcy51cGRhdGVGaWx0ZXJpbmcoW2NvbHVtbk5hbWVdLCB7XG4gICAgICB0eXBlOiBGaWx0ZXJpbmdBY3Rpb25UeXBlLkFwcGx5RmlsdGVyLFxuICAgICAgcGF5bG9hZDogeyBmaWx0ZXJpbmdNb2RpZmllciB9XG4gICAgfSk7XG4gICAgZHJvcGRvd24uaGlkZSgpO1xuICAgIHRoaXMub25GaWx0ZXIuZW1pdCh7IGNvbHVtbk5hbWUsIGRyb3Bkb3duLCBmaWx0ZXJpbmdNb2RpZmllciB9KTtcbiAgfVxuXG4gIHJlc2V0RmlsdGVyKGNvbHVtbk5hbWUsIGRyb3Bkb3duKSB7XG4gICAgdGhpcy51cGRhdGVGaWx0ZXJpbmcoW2NvbHVtbk5hbWVdLCB7IHR5cGU6IEZpbHRlcmluZ0FjdGlvblR5cGUuUmVzZXRGaWx0ZXIgfSk7XG4gICAgZHJvcGRvd24uaGlkZSgpO1xuICB9XG5cbiAgY2xlYXJGaWx0ZXJzKCkge1xuICAgIHRoaXMudXBkYXRlRmlsdGVyaW5nKHRoaXMuY29sdW1ucy5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKSwge1xuICAgICAgdHlwZTogRmlsdGVyaW5nQWN0aW9uVHlwZS5SZXNldEZpbHRlclxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlRmlsdGVyaW5nKFxuICAgIGNvbHVtbk5hbWVzOiBzdHJpbmdbXSxcbiAgICBhY3Rpb246IHtcbiAgICAgIHR5cGU6IEZpbHRlcmluZ0FjdGlvblR5cGU7XG4gICAgICBwYXlsb2FkPzogeyBmaWx0ZXJpbmdNb2RpZmllcjogRmlsdGVyaW5nTW9kaWZpZXIgfTtcbiAgICB9XG4gICkge1xuICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuY29sdW1ucy5tYXAoY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW5OYW1lcy5pbmNsdWRlcyhjb2x1bW4ubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgLi4uKGFjdGlvbi50eXBlID09PSBGaWx0ZXJpbmdBY3Rpb25UeXBlLkFwcGx5RmlsdGVyXG4gICAgICAgICAgICA/IGFjdGlvbi5wYXlsb2FkLmZpbHRlcmluZ01vZGlmaWVyXG4gICAgICAgICAgICA6IHsgZmlsdGVyUHJlZGljYXRlOiB1bmRlZmluZWQsIGV4dGVybmFsRmlsdGVyUXVlcnk6IHVuZGVmaW5lZCB9KVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29sdW1uO1xuICAgIH0pO1xuXG4gICAgdGhpcy51cGRhdGVGaWx0ZXJpbmdBcHBsaWVkKCk7XG4gICAgdGhpcy5yZWxvYWQoKTtcbiAgfVxuXG4gIHVwZGF0ZUZpbHRlcmluZ0FwcGxpZWQoKSB7XG4gICAgdGhpcy5maWx0ZXJpbmdBcHBsaWVkID0gdGhpcy5jb2x1bW5zLnNvbWUodGhpcy5pc0NvbHVtbkZpbHRlcmluZ0FwcGxpZWQpO1xuICB9XG5cbiAgaXNDb2x1bW5GaWx0ZXJpbmdBcHBsaWVkKGNvbHVtbjogQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBmaWx0ZXJhYmxlLCBmaWx0ZXJQcmVkaWNhdGUsIGV4dGVybmFsRmlsdGVyUXVlcnkgfSA9IGNvbHVtbjtcblxuICAgIHJldHVybiAhIShmaWx0ZXJhYmxlICYmIChmaWx0ZXJQcmVkaWNhdGUgfHwgZXh0ZXJuYWxGaWx0ZXJRdWVyeSkpO1xuICB9XG5cbiAgdXBkYXRlUGFnaW5hdGlvbih7IGl0ZW1zUGVyUGFnZSwgcGFnZSB9KSB7XG4gICAgdGhpcy5wYWdpbmF0aW9uID0geyAuLi50aGlzLnBhZ2luYXRpb24sIHBhZ2VTaXplOiBpdGVtc1BlclBhZ2UsIGN1cnJlbnRQYWdlOiBwYWdlIH07XG4gICAgdGhpcy5sb2FkRGF0YSgpO1xuICAgIHRoaXMuZW1pdENvbmZpZ0NoYW5nZSgpO1xuICB9XG5cbiAgcmVsb2FkKCkge1xuICAgIHRoaXMucGFnaW5hdGlvbiA9IHsgLi4udGhpcy5wYWdpbmF0aW9uLCBjdXJyZW50UGFnZTogMSB9O1xuICAgIHRoaXMucmVjcmVhdGVMb2FkTW9yZUNvbXBvbmVudCA9IHRydWU7XG4gICAgdGhpcy5sb2FkRGF0YSh0cnVlKTtcbiAgICB0aGlzLnNjcm9sbFRvVG9wKCk7XG4gIH1cblxuICBsb2FkTmV4dFBhZ2UoKTogUHJvbWlzZTxJUmVzdWx0TGlzdDxvYmplY3Q+PiB7XG4gICAgdGhpcy5wYWdpbmF0aW9uID0geyAuLi50aGlzLnBhZ2luYXRpb24sIGN1cnJlbnRQYWdlOiB0aGlzLnBhZ2luYXRpb24ubmV4dFBhZ2UgfTtcblxuICAgIHRoaXMubG9hZERhdGEoKTtcblxuICAgIHJldHVybiB0aGlzLmRhdGFTb3VyY2UucmVzdWx0TGlzdCRcbiAgICAgIC5waXBlKHRha2UoMSkpIC8vIGluIG9yZGVyIGZvciBgdG9Qcm9taXNlYCB0byB3b3JrLCB0aGUgb2JzZXJ2YWJsZSBuZWVkcyB0byBjb21wbGV0ZVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICBwYWdpbmc6IHtcbiAgICAgICAgICAgIC4uLnJlc3VsdC5wYWdpbmcsXG4gICAgICAgICAgICBuZXh0OiB0aGlzLmxvYWROZXh0UGFnZS5iaW5kKHRoaXMpXG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIElSZXN1bHRMaXN0PG9iamVjdD47XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldENlbGxSZW5kZXJlclNwZWMoeyB2YWx1ZSwgcm93LCBjb2x1bW5OYW1lIH0pOiBDZWxsUmVuZGVyZXJTcGVjIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q2VsbFJlbmRlcmVyU3BlYyh7IHR5cGU6ICdDRUxMJywgdmFsdWUsIHJvdywgY29sdW1uTmFtZSB9KTtcbiAgfVxuXG4gIGdldEhlYWRlckNlbGxSZW5kZXJlclNwZWMoeyB2YWx1ZSwgY29sdW1uTmFtZSB9KTogQ2VsbFJlbmRlcmVyU3BlYyB7XG4gICAgcmV0dXJuIHRoaXMuX2dldENlbGxSZW5kZXJlclNwZWMoeyB0eXBlOiAnSEVBREVSJywgdmFsdWUsIHJvdzogdW5kZWZpbmVkLCBjb2x1bW5OYW1lIH0pO1xuICB9XG5cbiAgZ2V0RmlsdGVyaW5nRm9ybVJlbmRlcmVyU3BlYyh7IGNvbHVtbiwgZHJvcGRvd24gfSk6IEZpbHRlcmluZ0Zvcm1SZW5kZXJlclNwZWMge1xuICAgIHJldHVybiB7XG4gICAgICByZW5kZXJlcjpcbiAgICAgICAgZ2V0KHRoaXMuZ2V0Q29sdW1uUmVuZGVyZXIoY29sdW1uKSwgJ2ZpbHRlcmluZ0Zvcm1SZW5kZXJlckRlZi50ZW1wbGF0ZScpIHx8XG4gICAgICAgIGNvbHVtbi5maWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIHByb3BlcnR5OiBjb2x1bW4sXG4gICAgICAgIGFwcGx5RmlsdGVyOiB0aGlzLmFwcGx5RmlsdGVyLmJpbmQodGhpcywgY29sdW1uLm5hbWUsIGRyb3Bkb3duKSxcbiAgICAgICAgcmVzZXRGaWx0ZXI6IHRoaXMucmVzZXRGaWx0ZXIuYmluZCh0aGlzLCBjb2x1bW4ubmFtZSwgZHJvcGRvd24pXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHNldEFsbEl0ZW1zU2VsZWN0ZWQoc2VsZWN0ZWQpIHtcbiAgICB0aGlzLmRhdGFTb3VyY2Uuc2VsZWN0aW9uJFxuICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgIC5zdWJzY3JpYmUoKHsgZmlsdGVyZWREYXRhSWRzIH0pID0+IHRoaXMuc2V0SXRlbXNTZWxlY3RlZChmaWx0ZXJlZERhdGFJZHMsIHNlbGVjdGVkKSk7XG4gIH1cblxuICBzZXRBbGxJdGVtc0luQ3VycmVudFBhZ2VTZWxlY3RlZChzZWxlY3RlZCkge1xuICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhJC5waXBlKGZpcnN0KCkpLnN1YnNjcmliZShkYXRhID0+IHRoaXMuc2V0SXRlbXNTZWxlY3RlZChkYXRhLCBzZWxlY3RlZCkpO1xuICB9XG5cbiAgc2V0SXRlbXNTZWxlY3RlZChpdGVtczogYW55W10sIHNlbGVjdGVkKSB7XG4gICAgY29uc3QgaXRlbUlkcyA9IGl0ZW1zLm1hcCgoaXRlbTogb2JqZWN0IHwgc3RyaW5nKSA9PlxuICAgICAgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnID8gaXRlbVt0aGlzLnNlbGVjdGlvblByaW1hcnlLZXldIDogaXRlbVxuICAgICk7XG5cbiAgICB0aGlzLnNlbGVjdGVkSXRlbUlkcyA9IHNlbGVjdGVkXG4gICAgICA/IHVuaW9uKHRoaXMuc2VsZWN0ZWRJdGVtSWRzLCBpdGVtSWRzKVxuICAgICAgOiB3aXRob3V0KHRoaXMuc2VsZWN0ZWRJdGVtSWRzLCAuLi5pdGVtSWRzKTtcblxuICAgIHRoaXMuaXRlbXNTZWxlY3QuZW1pdCh0aGlzLnNlbGVjdGVkSXRlbUlkcyk7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW1JZHMgPSBbXTtcbiAgICB0aGlzLml0ZW1zU2VsZWN0LmVtaXQodGhpcy5zZWxlY3RlZEl0ZW1JZHMpO1xuICB9XG5cbiAgaXNJdGVtU2VsZWN0ZWQoaXRlbSkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbUlkcy5pbmNsdWRlcyhpdGVtW3RoaXMuc2VsZWN0aW9uUHJpbWFyeUtleV0pO1xuICB9XG5cbiAgb25Db2x1bW5Ecm9wKHsgcHJldmlvdXNJbmRleCwgY3VycmVudEluZGV4IH0pIHtcbiAgICBjb25zdCBkaWZmZXJlbnRJbmRleCA9IHByZXZpb3VzSW5kZXggIT09IGN1cnJlbnRJbmRleDtcblxuICAgIGlmIChkaWZmZXJlbnRJbmRleCkge1xuICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5jb2x1bW5zLnNwbGljZShwcmV2aW91c0luZGV4LCAxKTtcbiAgICAgIHRoaXMuY29sdW1ucy5zcGxpY2UoY3VycmVudEluZGV4LCAwLCBjb2x1bW5bMF0pO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlQ29sdW1uTmFtZXMoKTtcbiAgICB0aGlzLnVwZGF0ZUdyaWRDb2x1bW5zU2l6ZSgpO1xuICB9XG5cbiAgdXBkYXRlR3JpZENvbHVtbnNTaXplKCkge1xuICAgIHRoaXMuc3R5bGVzID0ge1xuICAgICAgLi4udGhpcy5zdHlsZXMsXG4gICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0U3R5bGUoXG4gICAgICAgIHRoaXMuY29sdW1uc1xuICAgICAgICAgIC5maWx0ZXIoY29sdW1uID0+IGNvbHVtbi52aXNpYmxlKVxuICAgICAgICAgIC5tYXAoKHsgZ3JpZFRyYWNrU2l6ZSB9KSA9PiBncmlkVHJhY2tTaXplKVxuICAgICAgICAgIC5qb2luKCcgJylcbiAgICAgICksXG4gICAgICBncmlkSW5maW5pdGVTY3JvbGxDb2x1bW46IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RTdHlsZShcbiAgICAgICAgYDEgLyBzcGFuICR7dGhpcy5jb2x1bW5zLmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnZpc2libGUpLmxlbmd0aH1gXG4gICAgICApXG4gICAgfTtcblxuICAgIHRoaXMuZW1pdENvbmZpZ0NoYW5nZSgpO1xuICB9XG5cbiAgbG9hZENoaWxkRGV2aWNlcygpIHtcbiAgICB0aGlzLnNob3dDaGlsZERldmljZXMudmFsdWUgPSAhdGhpcy5zaG93Q2hpbGREZXZpY2VzLnZhbHVlO1xuICAgIHRoaXMub25DaGlsZERldmljZXMuZW1pdCh0aGlzLnNob3dDaGlsZERldmljZXMudmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0Q29uZmlnQ2hhbmdlKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmNvbHVtbnMubWFwKCh7IHZpc2libGUsIHNvcnRPcmRlciwgbmFtZSB9KSA9PiAoe1xuICAgICAgdmlzaWJsZSxcbiAgICAgIHNvcnRPcmRlcixcbiAgICAgIG5hbWVcbiAgICB9KSk7XG4gICAgdGhpcy5vbkNvbmZpZ0NoYW5nZS5lbWl0KHsgY29sdW1ucywgcGFnaW5hdGlvbjogdGhpcy5wYWdpbmF0aW9uIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVDb2x1bW5zKCkge1xuICAgIGNvbnN0IHNwZWNpYWxDb2x1bW4gPSB7XG4gICAgICBncmlkVHJhY2tTaXplOiAnbWlubWF4KDQycHgsIDgycHgpJyxcbiAgICAgIHNvcnRhYmxlOiBmYWxzZSxcbiAgICAgIHBvc2l0aW9uRml4ZWQ6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3QgY29sdW1ucyA9IFtcbiAgICAgIHRoaXMuc2VsZWN0YWJsZSA/IHsgLi4uc3BlY2lhbENvbHVtbiwgbmFtZTogU3BlY2lhbENvbHVtbk5hbWUuQ2hlY2tib3ggfSA6IHVuZGVmaW5lZCxcbiAgICAgIC4uLnRoaXMuY29sdW1ucyxcbiAgICAgIHRoaXMuYWN0aW9uQ29udHJvbHMubGVuZ3RoID4gMFxuICAgICAgICA/IHsgLi4uc3BlY2lhbENvbHVtbiwgbmFtZTogU3BlY2lhbENvbHVtbk5hbWUuQWN0aW9ucyB9XG4gICAgICAgIDogdW5kZWZpbmVkXG4gICAgXVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLm1hcCh0aGlzLndpdGhDb2x1bW5EZWZhdWx0cyk7XG5cbiAgICB0aGlzLmNvbHVtbnMgPSB1bmlxQnkoY29sdW1ucywgJ25hbWUnKTtcbiAgICB0aGlzLnVwZGF0ZUNvbHVtbk5hbWVzKCk7XG4gICAgdGhpcy51cGRhdGVHcmlkQ29sdW1uc1NpemUoKTtcbiAgICB0aGlzLnVwZGF0ZUZpbHRlcmluZ0FwcGxpZWQoKTtcbiAgfVxuXG4gIHByaXZhdGUgd2l0aENvbHVtbkRlZmF1bHRzKGNvbHVtbik6IENvbHVtbiB7XG4gICAgY29uc3QgZGF0YVR5cGUgPSBjb2x1bW4uZGF0YVR5cGUgfHwgQ29sdW1uRGF0YVR5cGUuVGV4dFNob3J0O1xuICAgIGNvbnN0IHsgaGVhZGVyQ1NTQ2xhc3NOYW1lLCBjZWxsQ1NTQ2xhc3NOYW1lIH0gPSBjb2x1bW47XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuICAgICAgc29ydGFibGU6IHRydWUsXG4gICAgICBzb3J0T3JkZXI6ICcnLFxuICAgICAgZmlsdGVyYWJsZTogZmFsc2UsXG4gICAgICAuLi5jb2x1bW4sXG4gICAgICBkYXRhVHlwZSxcbiAgICAgIGdyaWRUcmFja1NpemU6XG4gICAgICAgIGNvbHVtbi5ncmlkVHJhY2tTaXplIHx8XG4gICAgICAgIGBtaW5tYXgoJHttaW5Db2x1bW5HcmlkVHJhY2tTaXplfXB4LCAke3JhdGlvc0J5Q29sdW1uVHlwZXNbZGF0YVR5cGVdfWZyKWAsXG4gICAgICBoZWFkZXJDU1NDbGFzc05hbWU6XG4gICAgICAgICh0eXBlb2YgaGVhZGVyQ1NTQ2xhc3NOYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gaGVhZGVyQ1NTQ2xhc3NOYW1lLnNwbGl0KCcgJylcbiAgICAgICAgICA6IGhlYWRlckNTU0NsYXNzTmFtZSkgfHwgW10sXG4gICAgICBjZWxsQ1NTQ2xhc3NOYW1lOlxuICAgICAgICAodHlwZW9mIGNlbGxDU1NDbGFzc05hbWUgPT09ICdzdHJpbmcnID8gY2VsbENTU0NsYXNzTmFtZS5zcGxpdCgnICcpIDogY2VsbENTU0NsYXNzTmFtZSkgfHxcbiAgICAgICAgW11cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVDb2x1bW5OYW1lcygpIHtcbiAgICB0aGlzLmNvbHVtbk5hbWVzID0gdGhpcy5jb2x1bW5zLm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cFJlc2l6ZUhhbmRsZSgpIHtcbiAgICBjb25zdCByZXNpemVIYW5kbGVEcmFnJCA9IHRoaXMucmVzaXplSGFuZGxlTW91c2VEb3duJC5waXBlKFxuICAgICAgdGFrZVVudGlsKHRoaXMudW5zdWJzY3JpYmUkKSxcbiAgICAgIHRhcCgoKSA9PiB0aGlzLmNsZWFyTW91c2VIaWdobGlnaHRzKCkpLFxuICAgICAgbWVyZ2VNYXAoKHsgZXZlbnQsIHRhcmdldENvbHVtbk5hbWUgfSkgPT4ge1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMubWFwKGNvbHVtbiA9PiB7XG4gICAgICAgICAgaWYgKGNvbHVtbi5uYW1lID09PSB0YXJnZXRDb2x1bW5OYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgICAgICAgIGhlYWRlckNTU0NsYXNzTmFtZTogdW5pb24oY29sdW1uLmhlYWRlckNTU0NsYXNzTmFtZSwgWydoZWFkZXItLWJlaW5nLXJlc2l6ZWQnXSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNvbHVtbjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5oZWFkZXJCZWluZ1Jlc2l6ZWQgPSB7XG4gICAgICAgICAgY29sdW1uTmFtZTogdGFyZ2V0Q29sdW1uTmFtZSxcbiAgICAgICAgICBlbDogZXZlbnQudGFyZ2V0LnBhcmVudE5vZGVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnN0eWxlcyA9IHtcbiAgICAgICAgICAuLi50aGlzLnN0eWxlcyxcbiAgICAgICAgICB0YWJsZUN1cnNvcjogJ2NvbC1yZXNpemUnXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVzaXplSGFuZGxlQ29udGFpbmVyTW91c2VNb3ZlJC5waXBlKFxuICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLmNsZWFyTW91c2VIaWdobGlnaHRzKCkpLFxuICAgICAgICAgIHRha2VVbnRpbCh0aGlzLnJlc2l6ZUhhbmRsZUNvbnRhaW5lck1vdXNlVXAkKVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgcmVzaXplSGFuZGxlRHJhZyQuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuY29sdW1ucy5tYXAoKGNvbHVtbiwgaSkgPT4ge1xuICAgICAgICAgIGlmIChjb2x1bW4ubmFtZSA9PT0gdGhpcy5oZWFkZXJCZWluZ1Jlc2l6ZWQuY29sdW1uTmFtZSkge1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuaG9zdFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgICAgICAvLyBSZWFkIHdyYXBwZXIncyBvZmZzZXQgbGVmdCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAgICBjb25zdCBob3Jpem9udGFsT2Zmc2V0ID0gd3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgd2l0aCB0aGUgd3JhcHBlciBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbi5cbiAgICAgICAgICAgIGNvbnN0IGhvcml6b250YWxTY3JvbGxPZmZzZXQgPSB3cmFwcGVyLnNjcm9sbExlZnQgLSBob3Jpem9udGFsT2Zmc2V0O1xuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRlc2lyZWQgd2lkdGguXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9XG4gICAgICAgICAgICAgIGhvcml6b250YWxTY3JvbGxPZmZzZXQgKyBldmVudC5jbGllbnRYIC0gKHRoaXMuaGVhZGVyQmVpbmdSZXNpemVkLmVsLm9mZnNldExlZnQgfHwgMCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmNvbHVtbixcbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjb2x1bW4gb2JqZWN0IHdpdGggdGhlIG5ldyBzaXplIHZhbHVlLCBlbmZvcmNlIG91ciBtaW5pbXVtIHNpemUuXG4gICAgICAgICAgICAgIGdyaWRUcmFja1NpemU6IGAke01hdGgubWF4KG1pbkNvbHVtbkdyaWRUcmFja1NpemUsIHdpZHRoKX1weGBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRm9yIHRoZSBvdGhlciBoZWFkZXJzIHdoaWNoIGRvbid0IGhhdmUgYSBzZXQgd2lkdGgsIGZpeCBpdCB0byB0aGVpciBjb21wdXRlZCB3aWR0aC5cbiAgICAgICAgICBpZiAoY29sdW1uLmdyaWRUcmFja1NpemUuc3RhcnRzV2l0aCgnbWlubWF4JykpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmNvbHVtbixcbiAgICAgICAgICAgICAgLy8gaXNuJ3QgZml4ZWQgeWV0IChpdCB3b3VsZCBiZSBhIHB4IHZhbHVlKVxuICAgICAgICAgICAgICBncmlkVHJhY2tTaXplOiBgJHtfcGFyc2VJbnQodGhpcy50aEVsc1tpXS5jbGllbnRXaWR0aCl9cHhgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFVwZGF0ZSB0aGUgY29sdW1uIHNpemVzLlxuICAgICAgICAgKiBOb3RlOiBncmlkLXRlbXBsYXRlLWNvbHVtbnMgc2V0cyB0aGUgd2lkdGggZm9yIGFsbCBjb2x1bW5zIGluIG9uZSB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXBkYXRlR3JpZENvbHVtbnNTaXplKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVzaXplSGFuZGxlQ29udGFpbmVyTW91c2VVcCQucGlwZSh0YWtlVW50aWwodGhpcy51bnN1YnNjcmliZSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaGVhZGVyQmVpbmdSZXNpemVkKSB7XG4gICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuY29sdW1ucy5tYXAoY29sdW1uID0+IHtcbiAgICAgICAgICBpZiAoY29sdW1uLm5hbWUgPT09IHRoaXMuaGVhZGVyQmVpbmdSZXNpemVkLmNvbHVtbk5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLmNvbHVtbixcbiAgICAgICAgICAgICAgaGVhZGVyQ1NTQ2xhc3NOYW1lOiB3aXRob3V0KGNvbHVtbi5oZWFkZXJDU1NDbGFzc05hbWUsICdoZWFkZXItLWJlaW5nLXJlc2l6ZWQnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29sdW1uO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oZWFkZXJCZWluZ1Jlc2l6ZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5zdHlsZXMgPSB7XG4gICAgICAgICAgLi4udGhpcy5zdHlsZXMsXG4gICAgICAgICAgdGFibGVDdXJzb3I6ICdhdXRvJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhck1vdXNlSGlnaGxpZ2h0cygpIHtcbiAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2dldENlbGxSZW5kZXJlclNwZWMoeyB0eXBlLCB2YWx1ZSwgcm93LCBjb2x1bW5OYW1lIH0pOiBDZWxsUmVuZGVyZXJTcGVjIHtcbiAgICBjb25zdCBjb2x1bW4gPSB0aGlzLmNvbHVtbnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUgPT09IGNvbHVtbk5hbWUpO1xuICAgIGNvbnN0IGNvbHVtblJlbmRlcmVyID0gdGhpcy5nZXRDb2x1bW5SZW5kZXJlcihjb2x1bW4pO1xuICAgIGNvbnN0IHJlbmRlcmVyVGVtcGxhdGUgPSBnZXQoXG4gICAgICBjb2x1bW5SZW5kZXJlcixcbiAgICAgIGAke3R5cGUgPT09ICdIRUFERVInID8gJ2hlYWRlckNlbGxSZW5kZXJlckRlZicgOiAnY2VsbFJlbmRlcmVyRGVmJ30udGVtcGxhdGVgXG4gICAgKTtcblxuICAgIGNvbnN0IHsgY2VsbFJlbmRlcmVyQ29tcG9uZW50LCBoZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgfSA9IGNvbHVtbjtcbiAgICBjb25zdCByZW5kZXJlckNvbXBvbmVudCA9XG4gICAgICB0eXBlID09PSAnSEVBREVSJyA/IGhlYWRlckNlbGxSZW5kZXJlckNvbXBvbmVudCA6IGNlbGxSZW5kZXJlckNvbXBvbmVudDtcblxuICAgIHJldHVybiB7XG4gICAgICByZW5kZXJlcjogcmVuZGVyZXJUZW1wbGF0ZSB8fCByZW5kZXJlckNvbXBvbmVudCxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGl0ZW06IHJvdyxcbiAgICAgICAgcHJvcGVydHk6IGNvbHVtblxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldENvbHVtblJlbmRlcmVyKGNvbHVtbik6IENvbHVtbkRpcmVjdGl2ZSB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uUmVuZGVyZXJzLnRvQXJyYXkoKS5maW5kKCh7IG5hbWUgfSkgPT4gbmFtZSA9PT0gY29sdW1uLm5hbWUpO1xuICB9XG5cbiAgQHRocm90dGxlKDUwMCwgeyB0cmFpbGluZzogdHJ1ZSwgbGVhZGluZzogZmFsc2UgfSlcbiAgcHJpdmF0ZSBsb2FkRGF0YShyZWxvYWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHJvd3MsXG4gICAgICBjb2x1bW5zLFxuICAgICAgcGFnaW5hdGlvbixcbiAgICAgIHNlYXJjaFRleHQsXG4gICAgICBzZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrLFxuICAgICAgc2VsZWN0YWJsZSxcbiAgICAgIHNlbGVjdGlvblByaW1hcnlLZXksXG4gICAgICBpbmZpbml0ZVNjcm9sbFxuICAgIH0gPSB0aGlzO1xuXG4gICAgdGhpcy5kYXRhU291cmNlLmxvYWREYXRhKHtcbiAgICAgIHJvd3MsXG4gICAgICBjb2x1bW5zLFxuICAgICAgcGFnaW5hdGlvbixcbiAgICAgIHNlYXJjaFRleHQsXG4gICAgICBzZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrLFxuICAgICAgc2VsZWN0YWJsZSxcbiAgICAgIHNlbGVjdGlvblByaW1hcnlLZXksXG4gICAgICBpbmZpbml0ZVNjcm9sbCxcbiAgICAgIHJlbG9hZFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVGaWx0ZXJpbmdMYWJlbHNQYXJhbXMoc3RhdHM6IERhdGFTb3VyY2VTdGF0cykge1xuICAgIHRoaXMuZmlsdGVyaW5nTGFiZWxzUGFyYW1zID0ge1xuICAgICAgZmlsdGVyZWRJdGVtc0NvdW50OiBzdGF0cy5maWx0ZXJlZFNpemUsXG4gICAgICBhbGxJdGVtc0NvdW50OiBzdGF0cy5zaXplXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUGFnaW5hdGlvbkxhYmVsUGFyYW1zKHN0YXRzOiBEYXRhU291cmNlU3RhdHMpIHtcbiAgICB0aGlzLnBhZ2luYXRpb24ubmV4dFBhZ2UgPSBzdGF0cy5uZXh0UGFnZTtcbiAgICBjb25zdCBwYWdlRmlyc3RJdGVtSWR4ID0gKHN0YXRzLmN1cnJlbnRQYWdlIC0gMSkgKiBzdGF0cy5maXJzdFBhZ2VTaXplICsgMTtcbiAgICB0aGlzLnBhZ2luYXRpb25MYWJlbFBhcmFtcyA9IHtcbiAgICAgIHBhZ2VGaXJzdEl0ZW1JZHgsXG4gICAgICBwYWdlTGFzdEl0ZW1JZHg6IHBhZ2VGaXJzdEl0ZW1JZHggKyAoc3RhdHMuY3VycmVudFBhZ2VTaXplIC0gMSksXG4gICAgICBpdGVtc1RvdGFsOiBzdGF0cy5maWx0ZXJlZFNpemVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVMb2FkTW9yZUNvbXBvbmVudChzdGF0czogRGF0YVNvdXJjZVN0YXRzKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5pbmZpbml0ZVNjcm9sbCAmJlxuICAgICAgc3RhdHMgJiZcbiAgICAgIHN0YXRzLm5leHRQYWdlICYmXG4gICAgICAoIXRoaXMubG9hZE1vcmVDb21wb25lbnQgfHwgdGhpcy5yZWNyZWF0ZUxvYWRNb3JlQ29tcG9uZW50KVxuICAgICkge1xuICAgICAgdGhpcy5yZWNyZWF0ZUxvYWRNb3JlQ29tcG9uZW50ID0gZmFsc2U7XG4gICAgICB0aGlzLmluZmluaXRlU2Nyb2xsQ29udGFpbmVyLmNsZWFyKCk7XG4gICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4gPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcbiAgICAgICAgTG9hZE1vcmVDb21wb25lbnRcbiAgICAgICk7XG4gICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmluZmluaXRlU2Nyb2xsQ29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5KTtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gY29tcG9uZW50UmVmLmluc3RhbmNlIGFzIExvYWRNb3JlQ29tcG9uZW50O1xuICAgICAgaW5zdGFuY2UudXNlSW50ZXJzZWN0aW9uID0gdGhpcy5pbmZpbml0ZVNjcm9sbCA9PT0gJ2F1dG8nIHx8IHRoaXMuaW5maW5pdGVTY3JvbGwgPT09ICdoaWRkZW4nO1xuICAgICAgaW5zdGFuY2UuaGlkZGVuID0gdGhpcy5pbmZpbml0ZVNjcm9sbCA9PT0gJ2hpZGRlbic7XG4gICAgICBpbnN0YW5jZS5wYWdpbmcgPSB7XG4gICAgICAgIG5leHRQYWdlOiBzdGF0cy5uZXh0UGFnZSxcbiAgICAgICAgbmV4dDogdGhpcy5sb2FkTmV4dFBhZ2UuYmluZCh0aGlzKVxuICAgICAgfSBhcyBQYWdpbmc8YW55PjtcbiAgICAgIGluc3RhbmNlLmxvYWROZXh0TGFiZWwgPSB0aGlzLmxvYWRNb3JlSXRlbXNMYWJlbDtcbiAgICAgIGluc3RhbmNlLmxvYWRpbmdMYWJlbCA9IHRoaXMubG9hZGluZ0l0ZW1zTGFiZWw7XG4gICAgICB0aGlzLmxvYWRNb3JlQ29tcG9uZW50ID0gaW5zdGFuY2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxvYWRNb3JlQ29tcG9uZW50ICYmICFzdGF0cy5uZXh0UGFnZSkge1xuICAgICAgdGhpcy5sb2FkTW9yZUNvbXBvbmVudC5wYWdpbmcgPSB7XG4gICAgICAgIG5leHRQYWdlOiBudWxsXG4gICAgICB9IGFzIFBhZ2luZzxhbnk+O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsVG9Ub3AoKSB7XG4gICAgaWYgKHRoaXMuaW5maW5pdGVTY3JvbGwpIHtcbiAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==