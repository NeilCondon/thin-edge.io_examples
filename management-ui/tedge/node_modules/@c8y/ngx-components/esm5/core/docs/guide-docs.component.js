import * as tslib_1 from "tslib";
import { Component, OnInit, ContentChildren, QueryList, ContentChild, AfterContentInit, ElementRef, Renderer2, OnDestroy } from '@angular/core';
import { GuideHrefDirective } from './guide-href.directive';
import { DocsService } from './docs.service';
import { C8yTranslateDirective } from '../i18n/c8y-translate.directive';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var GuideDocsComponent = /** @class */ (function () {
    function GuideDocsComponent(docs, el, renderer) {
        this.docs = docs;
        this.el = el;
        this.renderer = renderer;
        this.destroyed$ = new ReplaySubject(1);
    }
    GuideDocsComponent.prototype.ngOnInit = function () {
        this.baseUrl = this.docs.getBaseUrl();
    };
    /**
     * After content is initialized we subscribe for translation events, then we are able to modify
     * anchor just as C8yGuideHrefDirective does.
     */
    GuideDocsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.translateDirective) {
            this.translateDirective.htmlUpdateEvent
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.replaceAnchorAttributes();
            });
        }
        else {
            this.replaceAnchorAttributes();
        }
    };
    /**
     * Find and modify anchor elements
     */
    GuideDocsComponent.prototype.replaceAnchorAttributes = function () {
        var _this = this;
        var anchors = this.findGuideAnchors(this.el.nativeElement);
        anchors.forEach(function (a) {
            var guideHref = _this.baseUrl + "/" + a.getAttribute('c8y-guide-href');
            _this.renderer.setAttribute(a, 'href', guideHref);
            if (!a.hasAttribute('target')) {
                _this.renderer.setAttribute(a, 'target', '_blank');
            }
        });
    };
    /**
     * Recursive function, returns array of Anchor elements inside HTMLElement.
     */
    GuideDocsComponent.prototype.findGuideAnchors = function (el) {
        var _this = this;
        var isAnchor = function () { return el.nodeName === 'A'; };
        var hasGuideHrefAttr = function () { return !!el.attributes.getNamedItem('c8y-guide-href'); };
        var hasChildren = function () { return el.childNodes && el.childNodes.length > 0; };
        var result = [];
        if (isAnchor() && hasGuideHrefAttr()) {
            result.push(el);
        }
        else if (hasChildren()) {
            el.childNodes.forEach(function (node) {
                var searchResult = _this.findGuideAnchors(node);
                if (searchResult) {
                    result = tslib_1.__spread(result, searchResult);
                }
            });
        }
        return result;
    };
    GuideDocsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.links.forEach(function (guide) {
            guide.baseHref = _this.baseUrl;
        });
    };
    GuideDocsComponent.prototype.ngOnDestroy = function () {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    };
    GuideDocsComponent.ctorParameters = function () { return [
        { type: DocsService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        ContentChildren(GuideHrefDirective, { descendants: true })
    ], GuideDocsComponent.prototype, "links", void 0);
    tslib_1.__decorate([
        ContentChild(C8yTranslateDirective, { static: false })
    ], GuideDocsComponent.prototype, "translateDirective", void 0);
    GuideDocsComponent = tslib_1.__decorate([
        Component({
            selector: '[c8y-guide-docs]',
            template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
        })
    ], GuideDocsComponent);
    return GuideDocsComponent;
}());
export { GuideDocsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUtZG9jcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kb2NzL2d1aWRlLWRvY3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixlQUFlLEVBQ2YsU0FBUyxFQUNULFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLFNBQVMsRUFBRSxTQUFTLEVBQ3JCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU0zQztJQVlFLDRCQUFvQixJQUFpQixFQUFVLEVBQWMsRUFBVSxRQUFtQjtRQUF0RSxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGbEYsZUFBVSxHQUEyQixJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUyQixDQUFDO0lBRTlGLHFDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILCtDQUFrQixHQUFsQjtRQUFBLGlCQVVDO1FBVEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWU7aUJBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNoQyxTQUFTLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0wsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxvREFBdUIsR0FBdkI7UUFBQSxpQkFTQztRQVJDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ2YsSUFBTSxTQUFTLEdBQU0sS0FBSSxDQUFDLE9BQU8sU0FBSSxDQUFDLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFHLENBQUM7WUFDeEUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDN0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNuRDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNkNBQWdCLEdBQWhCLFVBQWlCLEVBQWU7UUFBaEMsaUJBa0JDO1FBakJDLElBQU0sUUFBUSxHQUFHLGNBQU0sT0FBQSxFQUFFLENBQUMsUUFBUSxLQUFLLEdBQUcsRUFBbkIsQ0FBbUIsQ0FBQztRQUMzQyxJQUFNLGdCQUFnQixHQUFHLGNBQU0sT0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQztRQUM5RSxJQUFNLFdBQVcsR0FBRyxjQUFNLE9BQUEsRUFBRSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQXpDLENBQXlDLENBQUM7UUFFcEUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWhCLElBQUksUUFBUSxFQUFFLElBQUksZ0JBQWdCLEVBQUUsRUFBRTtZQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pCO2FBQU0sSUFBSSxXQUFXLEVBQUUsRUFBRTtZQUN4QixFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQWlCO2dCQUN0QyxJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pELElBQUksWUFBWSxFQUFFO29CQUNoQixNQUFNLG9CQUFPLE1BQU0sRUFBSyxZQUFZLENBQUMsQ0FBQztpQkFDdkM7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELDRDQUFlLEdBQWY7UUFBQSxpQkFJQztRQUhDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSztZQUN0QixLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsd0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Z0JBcEV5QixXQUFXO2dCQUFjLFVBQVU7Z0JBQW9CLFNBQVM7O0lBVjlCO1FBQTNELGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQztxREFBc0M7SUFNekM7UUFBdkQsWUFBWSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO2tFQUFvQjtJQVJoRSxrQkFBa0I7UUFKOUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGtCQUFrQjtZQUM1Qiw4RkFBMEM7U0FDM0MsQ0FBQztPQUNXLGtCQUFrQixDQWlGOUI7SUFBRCx5QkFBQztDQUFBLEFBakZELElBaUZDO1NBakZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgQ29udGVudENoaWxkLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEd1aWRlSHJlZkRpcmVjdGl2ZSB9IGZyb20gJy4vZ3VpZGUtaHJlZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRG9jc1NlcnZpY2UgfSBmcm9tICcuL2RvY3Muc2VydmljZSc7XG5pbXBvcnQgeyBDOHlUcmFuc2xhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9pMThuL2M4eS10cmFuc2xhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW2M4eS1ndWlkZS1kb2NzXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9ndWlkZS1kb2NzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBHdWlkZURvY3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIGJhc2VVcmw6IHN0cmluZztcbiAgQENvbnRlbnRDaGlsZHJlbihHdWlkZUhyZWZEaXJlY3RpdmUsIHsgZGVzY2VuZGFudHM6IHRydWUgfSkgbGlua3M6IFF1ZXJ5TGlzdDxHdWlkZUhyZWZEaXJlY3RpdmU+O1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhY2Nlc3MgdG8gdHJhbnNsYXRlIGRpcmVjdGl2ZSwgc28gaXQgaXMgcG9zc2libGUgdG8gYWRqdXN0IGFuY2hvciBodG1sIHRhZ3MsIGFmdGVyXG4gICAqIGNvbnRlbnQgaXMgdHJhbnNsYXRlZC5cbiAgICovXG4gIEBDb250ZW50Q2hpbGQoQzh5VHJhbnNsYXRlRGlyZWN0aXZlLCB7IHN0YXRpYzogZmFsc2UgfSkgdHJhbnNsYXRlRGlyZWN0aXZlO1xuXG4gIHByaXZhdGUgZGVzdHJveWVkJDogUmVwbGF5U3ViamVjdDxib29sZWFuPiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jczogRG9jc1NlcnZpY2UsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmJhc2VVcmwgPSB0aGlzLmRvY3MuZ2V0QmFzZVVybCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFmdGVyIGNvbnRlbnQgaXMgaW5pdGlhbGl6ZWQgd2Ugc3Vic2NyaWJlIGZvciB0cmFuc2xhdGlvbiBldmVudHMsIHRoZW4gd2UgYXJlIGFibGUgdG8gbW9kaWZ5XG4gICAqIGFuY2hvciBqdXN0IGFzIEM4eUd1aWRlSHJlZkRpcmVjdGl2ZSBkb2VzLlxuICAgKi9cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLnRyYW5zbGF0ZURpcmVjdGl2ZSkge1xuICAgICAgdGhpcy50cmFuc2xhdGVEaXJlY3RpdmUuaHRtbFVwZGF0ZUV2ZW50XG4gICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VBbmNob3JBdHRyaWJ1dGVzKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlcGxhY2VBbmNob3JBdHRyaWJ1dGVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYW5kIG1vZGlmeSBhbmNob3IgZWxlbWVudHNcbiAgICovXG4gIHJlcGxhY2VBbmNob3JBdHRyaWJ1dGVzKCkge1xuICAgIGNvbnN0IGFuY2hvcnMgPSB0aGlzLmZpbmRHdWlkZUFuY2hvcnModGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICBhbmNob3JzLmZvckVhY2goYSA9PiB7XG4gICAgICBjb25zdCBndWlkZUhyZWYgPSBgJHt0aGlzLmJhc2VVcmx9LyR7YS5nZXRBdHRyaWJ1dGUoJ2M4eS1ndWlkZS1ocmVmJyl9YDtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGEsICdocmVmJywgZ3VpZGVIcmVmKTtcbiAgICAgIGlmICghYS5oYXNBdHRyaWJ1dGUoJ3RhcmdldCcpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGEsICd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVjdXJzaXZlIGZ1bmN0aW9uLCByZXR1cm5zIGFycmF5IG9mIEFuY2hvciBlbGVtZW50cyBpbnNpZGUgSFRNTEVsZW1lbnQuXG4gICAqL1xuICBmaW5kR3VpZGVBbmNob3JzKGVsOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50W10ge1xuICAgIGNvbnN0IGlzQW5jaG9yID0gKCkgPT4gZWwubm9kZU5hbWUgPT09ICdBJztcbiAgICBjb25zdCBoYXNHdWlkZUhyZWZBdHRyID0gKCkgPT4gISFlbC5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYzh5LWd1aWRlLWhyZWYnKTtcbiAgICBjb25zdCBoYXNDaGlsZHJlbiA9ICgpID0+IGVsLmNoaWxkTm9kZXMgJiYgZWwuY2hpbGROb2Rlcy5sZW5ndGggPiAwO1xuXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgaWYgKGlzQW5jaG9yKCkgJiYgaGFzR3VpZGVIcmVmQXR0cigpKSB7XG4gICAgICByZXN1bHQucHVzaChlbCk7XG4gICAgfSBlbHNlIGlmIChoYXNDaGlsZHJlbigpKSB7XG4gICAgICBlbC5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlYXJjaFJlc3VsdCA9IHRoaXMuZmluZEd1aWRlQW5jaG9ycyhub2RlKTtcbiAgICAgICAgaWYgKHNlYXJjaFJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IFsuLi5yZXN1bHQsIC4uLnNlYXJjaFJlc3VsdF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMubGlua3MuZm9yRWFjaChndWlkZSA9PiB7XG4gICAgICBndWlkZS5iYXNlSHJlZiA9IHRoaXMuYmFzZVVybDtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KHRydWUpO1xuICAgIHRoaXMuZGVzdHJveWVkJC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=