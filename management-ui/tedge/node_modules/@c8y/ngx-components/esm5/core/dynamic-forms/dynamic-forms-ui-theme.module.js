import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormlyModule, FORMLY_CONFIG } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { DropAreaModule } from '../drop-area/drop-area.module';
import { FormsModule } from '../forms/index';
import { C8yTranslateModule } from './../i18n/c8y-translate.module';
import { ArrayTypeComponent } from './array/array.type.component';
import { FieldCheckbox } from './checkbox/checkbox.type.component';
import { FieldFile } from './file/file.type.component';
import { WrapperFormField } from './form-field/form-field.wrapper.component';
import { FieldInput } from './input/input.type.component';
import { ObjectTypeComponent } from './object/object.type.component';
import { FieldRadio } from './radio/radio.type.component';
export var FIELD_TYPES = [
    FieldCheckbox,
    ArrayTypeComponent,
    WrapperFormField,
    FieldFile,
    FieldInput,
    FieldRadio,
    ObjectTypeComponent
];
export function fieldTypeFactory() {
    // tslint:disable-next-line:no-string-literal
    return FIELD_TYPES.map(function (type) { return type['CONFIG']; }).reduce(function (formlyConfig, typeConfig) {
        return (tslib_1.__assign({}, formlyConfig, { types: tslib_1.__spread(formlyConfig.types, (typeConfig.types || [])), wrappers: tslib_1.__spread(formlyConfig.wrappers, (typeConfig.wrappers || [])) }));
    }, { types: [], wrappers: [] });
}
/**
 * This module declares field type components for dynamic forms that match C8Y styleguide.
 *
 * @dynamic
 */
var DynamicFormsUIThemeModule = /** @class */ (function () {
    function DynamicFormsUIThemeModule() {
    }
    DynamicFormsUIThemeModule = tslib_1.__decorate([
        NgModule({
            declarations: tslib_1.__spread(FIELD_TYPES),
            entryComponents: tslib_1.__spread(FIELD_TYPES),
            imports: [
                CommonModule,
                PopoverModule,
                ReactiveFormsModule,
                C8yTranslateModule,
                DropAreaModule,
                FormsModule,
                FormlyModule,
                FormlySelectModule
            ],
            providers: [
                {
                    provide: FORMLY_CONFIG,
                    useFactory: fieldTypeFactory,
                    multi: true
                }
            ]
        })
    ], DynamicFormsUIThemeModule);
    return DynamicFormsUIThemeModule;
}());
export { DynamicFormsUIThemeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3Jtcy11aS10aGVtZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9keW5hbWljLWZvcm1zL2R5bmFtaWMtZm9ybXMtdWktdGhlbWUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQTJCLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN4RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFMUQsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUEyQjtJQUNqRCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixtQkFBbUI7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsNkNBQTZDO0lBQzdDLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBZCxDQUFjLENBQUMsQ0FBQyxNQUFNLENBQ25ELFVBQUMsWUFBMEIsRUFBRSxVQUF3QjtRQUNuRCxPQUFBLENBQUMscUJBQ0ksWUFBWSxJQUNmLEtBQUssbUJBQU0sWUFBWSxDQUFDLEtBQUssRUFBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQzFELFFBQVEsbUJBQU0sWUFBWSxDQUFDLFFBQVEsRUFBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLElBQ25ELENBQUE7SUFKbEIsQ0FJa0IsRUFDcEIsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FDNUIsQ0FBQztBQUNKLENBQUM7QUFFRDs7OztHQUlHO0FBc0JIO0lBQUE7SUFBd0MsQ0FBQztJQUE1Qix5QkFBeUI7UUFyQnJDLFFBQVEsQ0FBQztZQUNSLFlBQVksbUJBQU0sV0FBVyxDQUFDO1lBQzlCLGVBQWUsbUJBQU0sV0FBVyxDQUFDO1lBQ2pDLE9BQU8sRUFBRTtnQkFDUCxZQUFZO2dCQUNaLGFBQWE7Z0JBQ2IsbUJBQW1CO2dCQUNuQixrQkFBa0I7Z0JBQ2xCLGNBQWM7Z0JBQ2QsV0FBVztnQkFDWCxZQUFZO2dCQUNaLGtCQUFrQjthQUNuQjtZQUNELFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsYUFBYTtvQkFDdEIsVUFBVSxFQUFFLGdCQUFnQjtvQkFDNUIsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7T0FDVyx5QkFBeUIsQ0FBRztJQUFELGdDQUFDO0NBQUEsQUFBekMsSUFBeUM7U0FBNUIseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29uZmlnT3B0aW9uLCBGaWVsZFR5cGUsIEZvcm1seU1vZHVsZSwgRk9STUxZX0NPTkZJRyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5U2VsZWN0TW9kdWxlIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZS9zZWxlY3QnO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBEcm9wQXJlYU1vZHVsZSB9IGZyb20gJy4uL2Ryb3AtYXJlYS9kcm9wLWFyZWEubW9kdWxlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnLi4vZm9ybXMvaW5kZXgnO1xuaW1wb3J0IHsgQzh5VHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnLi8uLi9pMThuL2M4eS10cmFuc2xhdGUubW9kdWxlJztcbmltcG9ydCB7IEFycmF5VHlwZUNvbXBvbmVudCB9IGZyb20gJy4vYXJyYXkvYXJyYXkudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRDaGVja2JveCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3gudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRGaWxlIH0gZnJvbSAnLi9maWxlL2ZpbGUudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgV3JhcHBlckZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZC9mb3JtLWZpZWxkLndyYXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEZpZWxkSW5wdXQgfSBmcm9tICcuL2lucHV0L2lucHV0LnR5cGUuY29tcG9uZW50JztcbmltcG9ydCB7IE9iamVjdFR5cGVDb21wb25lbnQgfSBmcm9tICcuL29iamVjdC9vYmplY3QudHlwZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmllbGRSYWRpbyB9IGZyb20gJy4vcmFkaW8vcmFkaW8udHlwZS5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgRklFTERfVFlQRVM6IEFycmF5PFR5cGU8RmllbGRUeXBlPj4gPSBbXG4gIEZpZWxkQ2hlY2tib3gsXG4gIEFycmF5VHlwZUNvbXBvbmVudCxcbiAgV3JhcHBlckZvcm1GaWVsZCxcbiAgRmllbGRGaWxlLFxuICBGaWVsZElucHV0LFxuICBGaWVsZFJhZGlvLFxuICBPYmplY3RUeXBlQ29tcG9uZW50XG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gZmllbGRUeXBlRmFjdG9yeSgpIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gIHJldHVybiBGSUVMRF9UWVBFUy5tYXAodHlwZSA9PiB0eXBlWydDT05GSUcnXSkucmVkdWNlKFxuICAgIChmb3JtbHlDb25maWc6IENvbmZpZ09wdGlvbiwgdHlwZUNvbmZpZzogQ29uZmlnT3B0aW9uKSA9PlxuICAgICAgKHtcbiAgICAgICAgLi4uZm9ybWx5Q29uZmlnLFxuICAgICAgICB0eXBlczogWy4uLmZvcm1seUNvbmZpZy50eXBlcywgLi4uKHR5cGVDb25maWcudHlwZXMgfHwgW10pXSxcbiAgICAgICAgd3JhcHBlcnM6IFsuLi5mb3JtbHlDb25maWcud3JhcHBlcnMsIC4uLih0eXBlQ29uZmlnLndyYXBwZXJzIHx8IFtdKV1cbiAgICAgIH0gYXMgQ29uZmlnT3B0aW9uKSxcbiAgICB7IHR5cGVzOiBbXSwgd3JhcHBlcnM6IFtdIH1cbiAgKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWNsYXJlcyBmaWVsZCB0eXBlIGNvbXBvbmVudHMgZm9yIGR5bmFtaWMgZm9ybXMgdGhhdCBtYXRjaCBDOFkgc3R5bGVndWlkZS5cbiAqXG4gKiBAZHluYW1pY1xuICovXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsuLi5GSUVMRF9UWVBFU10sXG4gIGVudHJ5Q29tcG9uZW50czogWy4uLkZJRUxEX1RZUEVTXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBQb3BvdmVyTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgQzh5VHJhbnNsYXRlTW9kdWxlLFxuICAgIERyb3BBcmVhTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIEZvcm1seU1vZHVsZSxcbiAgICBGb3JtbHlTZWxlY3RNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogRk9STUxZX0NPTkZJRyxcbiAgICAgIHVzZUZhY3Rvcnk6IGZpZWxkVHlwZUZhY3RvcnksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybXNVSVRoZW1lTW9kdWxlIHt9XG4iXX0=