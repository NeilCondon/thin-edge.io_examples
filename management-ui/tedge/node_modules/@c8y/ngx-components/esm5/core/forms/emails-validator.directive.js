import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { FormControl, NG_VALIDATORS, Validators } from '@angular/forms';
/**
 * A directive that adds the `emails` validator to controls marked with the
 * `emails` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * **Example**
 *
 * ```html
 * <input type="text" name="emails" ngModel emails>
 * <input type="text" name="emails" ngModel emails="true">
 * <input type="text" name="emails" ngModel [emails]="true">
 * ```
 */
var EmailsValidatorDirective = /** @class */ (function () {
    function EmailsValidatorDirective() {
        this._enabled = false;
        this.separator = ',';
    }
    EmailsValidatorDirective_1 = EmailsValidatorDirective;
    Object.defineProperty(EmailsValidatorDirective.prototype, "emails", {
        /**
         * Tracks changes to the emails attribute bound to this directive.
         */
        set: function (value) {
            this._enabled = value === '' || value === true || value === 'true';
            if (this._onChange) {
                this._onChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method that validates whether email addresses are valid.
     * Returns the validation result if enabled, otherwise null.
     */
    EmailsValidatorDirective.prototype.validate = function (control) {
        if (!this._enabled) {
            return null;
        }
        var value = control.value || '';
        var emails = value.split(this.separator).map(function (email) { return email.trim(); });
        var invalid = emails.some(function (email) { return Validators.email(new FormControl(email)); });
        return invalid ? { emails: true } : null;
    };
    /**
     * Registers a callback function to call when the validator inputs change.
     */
    EmailsValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this._onChange = fn;
    };
    var EmailsValidatorDirective_1;
    tslib_1.__decorate([
        Input()
    ], EmailsValidatorDirective.prototype, "emails", null);
    EmailsValidatorDirective = EmailsValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[emails][formControlName],[emails][formControl],[emails][ngModel]',
            providers: [{ provide: NG_VALIDATORS, useExisting: EmailsValidatorDirective_1, multi: true }]
        })
    ], EmailsValidatorDirective);
    return EmailsValidatorDirective;
}());
export { EmailsValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWxzLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9mb3Jtcy9lbWFpbHMtdmFsaWRhdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUNMLFdBQVcsRUFFWCxhQUFhLEVBR2IsVUFBVSxFQUNYLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7Ozs7Ozs7Ozs7O0dBV0c7QUFLSDtJQUpBO1FBS1UsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixjQUFTLEdBQVcsR0FBRyxDQUFDO0lBa0NsQyxDQUFDO2lDQXJDWSx3QkFBd0I7SUFTbkMsc0JBQUksNENBQU07UUFKVjs7V0FFRzthQUVILFVBQVcsS0FBdUI7WUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sQ0FBQztZQUNuRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQjtRQUNILENBQUM7OztPQUFBO0lBRUQ7OztPQUdHO0lBQ0gsMkNBQVEsR0FBUixVQUFTLE9BQXdCO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQVosQ0FBWSxDQUFDLENBQUM7UUFDdEUsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNILDREQUF5QixHQUF6QixVQUEwQixFQUFjO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7O0lBM0JEO1FBREMsS0FBSyxFQUFFOzBEQU1QO0lBZFUsd0JBQXdCO1FBSnBDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtRUFBbUU7WUFDN0UsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSwwQkFBd0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDNUYsQ0FBQztPQUNXLHdCQUF3QixDQXFDcEM7SUFBRCwrQkFBQztDQUFBLEFBckNELElBcUNDO1NBckNZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEZvcm1Db250cm9sLFxuICBBYnN0cmFjdENvbnRyb2wsXG4gIE5HX1ZBTElEQVRPUlMsXG4gIFZhbGlkYXRpb25FcnJvcnMsXG4gIFZhbGlkYXRvcixcbiAgVmFsaWRhdG9yc1xufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBhZGRzIHRoZSBgZW1haWxzYCB2YWxpZGF0b3IgdG8gY29udHJvbHMgbWFya2VkIHdpdGggdGhlXG4gKiBgZW1haWxzYCBhdHRyaWJ1dGUuIFRoZSBkaXJlY3RpdmUgaXMgcHJvdmlkZWQgd2l0aCB0aGUgYE5HX1ZBTElEQVRPUlNgIG11bHRpLXByb3ZpZGVyIGxpc3QuXG4gKlxuICogKipFeGFtcGxlKipcbiAqXG4gKiBgYGBodG1sXG4gKiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiZW1haWxzXCIgbmdNb2RlbCBlbWFpbHM+XG4gKiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiZW1haWxzXCIgbmdNb2RlbCBlbWFpbHM9XCJ0cnVlXCI+XG4gKiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiZW1haWxzXCIgbmdNb2RlbCBbZW1haWxzXT1cInRydWVcIj5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZW1haWxzXVtmb3JtQ29udHJvbE5hbWVdLFtlbWFpbHNdW2Zvcm1Db250cm9sXSxbZW1haWxzXVtuZ01vZGVsXScsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IEVtYWlsc1ZhbGlkYXRvckRpcmVjdGl2ZSwgbXVsdGk6IHRydWUgfV1cbn0pXG5leHBvcnQgY2xhc3MgRW1haWxzVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgcHJpdmF0ZSBfZW5hYmxlZCA9IGZhbHNlO1xuICBwcml2YXRlIF9vbkNoYW5nZT86ICgpID0+IHZvaWQ7XG4gIHByaXZhdGUgc2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBjaGFuZ2VzIHRvIHRoZSBlbWFpbHMgYXR0cmlidXRlIGJvdW5kIHRvIHRoaXMgZGlyZWN0aXZlLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGVtYWlscyh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX2VuYWJsZWQgPSB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJztcbiAgICBpZiAodGhpcy5fb25DaGFuZ2UpIHtcbiAgICAgIHRoaXMuX29uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0aGF0IHZhbGlkYXRlcyB3aGV0aGVyIGVtYWlsIGFkZHJlc3NlcyBhcmUgdmFsaWQuXG4gICAqIFJldHVybnMgdGhlIHZhbGlkYXRpb24gcmVzdWx0IGlmIGVuYWJsZWQsIG90aGVyd2lzZSBudWxsLlxuICAgKi9cbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlIHx8ICcnO1xuICAgIGNvbnN0IGVtYWlscyA9IHZhbHVlLnNwbGl0KHRoaXMuc2VwYXJhdG9yKS5tYXAoZW1haWwgPT4gZW1haWwudHJpbSgpKTtcbiAgICBjb25zdCBpbnZhbGlkID0gZW1haWxzLnNvbWUoZW1haWwgPT4gVmFsaWRhdG9ycy5lbWFpbChuZXcgRm9ybUNvbnRyb2woZW1haWwpKSk7XG4gICAgcmV0dXJuIGludmFsaWQgPyB7IGVtYWlsczogdHJ1ZSB9IDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHZhbGlkYXRvciBpbnB1dHMgY2hhbmdlLlxuICAgKi9cbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XG4gIH1cbn1cbiJdfQ==