// tslint:disable: max-line-length
import { gettext } from '../i18n/gettext';
// @dynamic
var ValidationPattern = /** @class */ (function () {
    function ValidationPattern() {
    }
    ValidationPattern.get = function (key) {
        var pattern = this.rules[key];
        return pattern;
    };
    ValidationPattern.messages = {
        deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
        domain: gettext('Only lowercase letters, digits and hyphens allowed in the first part of the URI. ' +
            'Must start with a letter; hyphens only allowed in the middle. Must be a valid URI.'),
        email: gettext('Invalid email address.'),
        emails: gettext('Invalid email addresses.'),
        internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
        loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
        max: gettext('Max value: {{ value }}'),
        min: gettext('Min value: {{ value }}'),
        opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
        password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
        passwordConfirm: gettext('Passwords do not match.'),
        passwordStrength: gettext('Password not good enough, password must be stronger (green).'),
        phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
        required: gettext('This field is required.'),
        tenantId: gettext('May contain lowercase letters, digits, and hyphens. ' +
            'Must start with a letter; hyphens only allowed in the middle; minimum 2 characters.'),
        urlSegment: gettext('Slash, single or double dots and white space not allowed.'),
        user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
    };
    ValidationPattern.rules = {
        deviceId: {
            pattern: /^[^\s/]*$/
        },
        domain: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+\.{1}.+$/
        },
        groupName: {
            maxLength: 254
        },
        hostname: {
            pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
        },
        ip: {
            pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        opcuaBrowsePath: {
            pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
        },
        password: {
            pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
        },
        phoneNumber: {
            pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
        },
        tenantId: {
            pattern: /^[a-z]+[a-z0-9-]*[a-z0-9]+$/
        },
        user: {
            pattern: /^[^\\/\s$:+]*$/
        },
        urlSegment: {
            pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
        },
        loginAlias: {
            pattern: /^[^\\/$:+]*$/
        }
    };
    return ValidationPattern;
}());
export { ValidationPattern };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1wYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvdmFsaWRhdGlvbi1wYXR0ZXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFTMUMsV0FBVztBQUNYO0lBQUE7SUFnRkEsQ0FBQztJQUpRLHFCQUFHLEdBQVYsVUFBVyxHQUFXO1FBQ3BCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxPQUEwQixDQUFDO0lBQ3BDLENBQUM7SUE5RWUsMEJBQVEsR0FBRztRQUN6QixRQUFRLEVBQUUsT0FBTyxDQUFDLHFEQUFxRCxDQUFDO1FBQ3hFLE1BQU0sRUFBRSxPQUFPLENBQ2IsbUZBQW1GO1lBQ2pGLG9GQUFvRixDQUN2RjtRQUNELEtBQUssRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7UUFDeEMsTUFBTSxFQUFFLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztRQUMzQyx3QkFBd0IsRUFBRSxPQUFPLENBQy9CLHVFQUF1RSxDQUN4RTtRQUNELFVBQVUsRUFBRSxPQUFPLENBQ2pCLGlGQUFpRixDQUNsRjtRQUNELEdBQUcsRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7UUFDdEMsR0FBRyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztRQUN0QyxlQUFlLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO1FBQy9DLFFBQVEsRUFBRSxPQUFPLENBQ2YsOEpBQThKLENBQy9KO1FBQ0QsZUFBZSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUNuRCxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsOERBQThELENBQUM7UUFDekYsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsMkZBQTJGLENBQzVGO1FBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUM1QyxRQUFRLEVBQUUsT0FBTyxDQUNmLHNEQUFzRDtZQUNwRCxxRkFBcUYsQ0FDeEY7UUFDRCxVQUFVLEVBQUUsT0FBTyxDQUFDLDJEQUEyRCxDQUFDO1FBQ2hGLElBQUksRUFBRSxPQUFPLENBQ1gseUZBQXlGLENBQzFGO0tBQ0YsQ0FBQztJQUVjLHVCQUFLLEdBQUc7UUFDdEIsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLFdBQVc7U0FDckI7UUFDRCxNQUFNLEVBQUU7WUFDTixPQUFPLEVBQUUsb0NBQW9DO1NBQzlDO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsU0FBUyxFQUFFLEdBQUc7U0FDZjtRQUNELFFBQVEsRUFBRTtZQUNSLE9BQU8sRUFBRSwyR0FBMkc7U0FDckg7UUFDRCxFQUFFLEVBQUU7WUFDRixPQUFPLEVBQUUsNkZBQTZGO1NBQ3ZHO1FBQ0QsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLG1DQUFtQztTQUM3QztRQUNELFFBQVEsRUFBRTtZQUNSLE9BQU8sRUFBRSx3REFBd0Q7U0FDbEU7UUFDRCxXQUFXLEVBQUU7WUFDWCxPQUFPLEVBQUUsOEJBQThCO1NBQ3hDO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLDZCQUE2QjtTQUN2QztRQUNELElBQUksRUFBRTtZQUNKLE9BQU8sRUFBRSxnQkFBZ0I7U0FDMUI7UUFDRCxVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsMkVBQTJFO1NBQ3JGO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLGNBQWM7U0FDeEI7S0FDRixDQUFDO0lBTUosd0JBQUM7Q0FBQSxBQWhGRCxJQWdGQztTQWhGWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWxpbmUtbGVuZ3RoXG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUnVsZXMge1xuICBwYXR0ZXJuPzogUmVnRXhwO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gIG1pbkxlbmd0aD86IG51bWJlcjtcbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uUGF0dGVybiB7XG4gIHN0YXRpYyByZWFkb25seSBtZXNzYWdlcyA9IHtcbiAgICBkZXZpY2VJZDogZ2V0dGV4dCgnRGV2aWNlIElEIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG9yIHNsYXNoZXMgKFwiL1wiKS4nKSxcbiAgICBkb21haW46IGdldHRleHQoXG4gICAgICAnT25seSBsb3dlcmNhc2UgbGV0dGVycywgZGlnaXRzIGFuZCBoeXBoZW5zIGFsbG93ZWQgaW4gdGhlIGZpcnN0IHBhcnQgb2YgdGhlIFVSSS4gJyArXG4gICAgICAgICdNdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXI7IGh5cGhlbnMgb25seSBhbGxvd2VkIGluIHRoZSBtaWRkbGUuIE11c3QgYmUgYSB2YWxpZCBVUkkuJ1xuICAgICksXG4gICAgZW1haWw6IGdldHRleHQoJ0ludmFsaWQgZW1haWwgYWRkcmVzcy4nKSxcbiAgICBlbWFpbHM6IGdldHRleHQoJ0ludmFsaWQgZW1haWwgYWRkcmVzc2VzLicpLFxuICAgIGludGVybmF0aW9uYWxQaG9uZU51bWJlcjogZ2V0dGV4dChcbiAgICAgICdJbnRlcm5hdGlvbmFsIHBob25lIG51bWJlciByZXF1aXJlZCwgaW4gdGhlIGZvcm1hdCArNDkgOSA4NzYgNTQzIDIxMC4nXG4gICAgKSxcbiAgICBsb2dpbkFsaWFzOiBnZXR0ZXh0KFxuICAgICAgJ0xvZ2luIGFsaWFzIG11c3Qgbm90IGNvbnRhaW4gc2xhc2hlcyAoXCIvXCIsIFwiXFxcXFwiKSBub3IgKFwiK1wiKSwgKFwiOlwiKSwgKFwiJFwiKSBzaWducy4nXG4gICAgKSxcbiAgICBtYXg6IGdldHRleHQoJ01heCB2YWx1ZToge3sgdmFsdWUgfX0nKSxcbiAgICBtaW46IGdldHRleHQoJ01pbiB2YWx1ZToge3sgdmFsdWUgfX0nKSxcbiAgICBvcGN1YUJyb3dzZVBhdGg6IGdldHRleHQoJ0ludmFsaWQgT1BDIFVBIFVSSS4nKSxcbiAgICBwYXNzd29yZDogZ2V0dGV4dChcbiAgICAgICdQYXNzd29yZCBtdXN0IGhhdmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGFuZCBubyBtb3JlIHRoYW4gMzIgYW5kIGNhbiBvbmx5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycyBhbmQgZm9sbG93aW5nIHN5bWJvbHM6IGB+IUAjJCVeJiooKV98Ky09Pzs6XFwnXCIsLjw+e31bXVxcXFwvJ1xuICAgICksXG4gICAgcGFzc3dvcmRDb25maXJtOiBnZXR0ZXh0KCdQYXNzd29yZHMgZG8gbm90IG1hdGNoLicpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IGdldHRleHQoJ1Bhc3N3b3JkIG5vdCBnb29kIGVub3VnaCwgcGFzc3dvcmQgbXVzdCBiZSBzdHJvbmdlciAoZ3JlZW4pLicpLFxuICAgIHBob25lTnVtYmVyOiBnZXR0ZXh0KFxuICAgICAgJ0ludmFsaWQgcGhvbmUgbnVtYmVyIGZvcm1hdC4gT25seSBkaWdpdHMsIHNwYWNlcywgc2xhc2hlcyAoXCIvXCIpIGFuZCBkYXNoZXMgKFwiLVwiKSBhbGxvd2VkLidcbiAgICApLFxuICAgIHJlcXVpcmVkOiBnZXR0ZXh0KCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkLicpLFxuICAgIHRlbmFudElkOiBnZXR0ZXh0KFxuICAgICAgJ01heSBjb250YWluIGxvd2VyY2FzZSBsZXR0ZXJzLCBkaWdpdHMsIGFuZCBoeXBoZW5zLiAnICtcbiAgICAgICAgJ011c3Qgc3RhcnQgd2l0aCBhIGxldHRlcjsgaHlwaGVucyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZTsgbWluaW11bSAyIGNoYXJhY3RlcnMuJ1xuICAgICksXG4gICAgdXJsU2VnbWVudDogZ2V0dGV4dCgnU2xhc2gsIHNpbmdsZSBvciBkb3VibGUgZG90cyBhbmQgd2hpdGUgc3BhY2Ugbm90IGFsbG93ZWQuJyksXG4gICAgdXNlcjogZ2V0dGV4dChcbiAgICAgICdVc2VybmFtZSBtdXN0IG5vdCBjb250YWluIHNwYWNlcyBub3Igc2xhc2hlcyAoXCIvXCIsIFwiXFxcXFwiKSBub3IgKFwiK1wiKSwgKFwiOlwiKSwgKFwiJFwiKSBzaWducy4nXG4gICAgKVxuICB9O1xuXG4gIHN0YXRpYyByZWFkb25seSBydWxlcyA9IHtcbiAgICBkZXZpY2VJZDoge1xuICAgICAgcGF0dGVybjogL15bXlxccy9dKiQvXG4gICAgfSxcbiAgICBkb21haW46IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOS1dKlthLXowLTldK1xcLnsxfS4rJC9cbiAgICB9LFxuICAgIGdyb3VwTmFtZToge1xuICAgICAgbWF4TGVuZ3RoOiAyNTRcbiAgICB9LFxuICAgIGhvc3RuYW1lOiB7XG4gICAgICBwYXR0ZXJuOiAvXigoW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05LV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05LV0qW0EtWmEtejAtOV0pJC9cbiAgICB9LFxuICAgIGlwOiB7XG4gICAgICBwYXR0ZXJuOiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvXG4gICAgfSxcbiAgICBvcGN1YUJyb3dzZVBhdGg6IHtcbiAgICAgIHBhdHRlcm46IC9eKG9wYy50Y3B8aHR0cHxodHRwcyk6XFwvXFwvW14gXCJdKyQvXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgcGF0dGVybjogL15bYS16QS1aMC05YH4hQCMkJV4mKigpX3wrXFwtPT87OidcIiwuPD57fVtcXF1cXFxcL117OCwzMn0kL1xuICAgIH0sXG4gICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eJHxeKFxcK3wwezJ9KVtcXGRcXHMvLV17MSwzMH0kL1xuICAgIH0sXG4gICAgdGVuYW50SWQ6IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOS1dKlthLXowLTldKyQvXG4gICAgfSxcbiAgICB1c2VyOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxcXC9cXHMkOitdKiQvXG4gICAgfSxcbiAgICB1cmxTZWdtZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvXigoWy5dezEsMn0pfChbL10pK3woKFsvXSopKFsuXXsxLDJ9KShbL10qKSl8KCguKikoWy9dfFsgXSspKC4qKSl8KFxccyspKSQvXG4gICAgfSxcbiAgICBsb2dpbkFsaWFzOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxcXC8kOitdKiQvXG4gICAgfVxuICB9O1xuXG4gIHN0YXRpYyBnZXQoa2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5ydWxlc1trZXldO1xuICAgIHJldHVybiBwYXR0ZXJuIGFzIFZhbGlkYXRpb25SdWxlcztcbiAgfVxufVxuIl19