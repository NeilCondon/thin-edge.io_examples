import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { find, keys, get, assign, isEmpty } from 'lodash-es';
import { OptionsService } from '../../common/options.service';
var AppIconComponent = /** @class */ (function () {
    function AppIconComponent(options) {
        this.options = options;
        this.name = '';
        this.model = {
            appIcon: '',
            showIcon: true,
            iconClass: ['c8y-icon'],
            appNameAbbr: '',
            iconStyle: {}
        };
        this.c8yAppIconsList = {
            analyticsbuilder: 'analytics-builder',
            'analytics-builder': 'analytics-builder',
            cockpit: 'cockpit',
            devicemanagement: 'device-management',
            administration: 'administration',
            apamaepl: 'apama-epl'
        };
        this.white = false;
        this.defaultIconStyle = {
            'background-repeat': 'no-repeat',
            'background-size': 'contain',
            height: '36px',
            width: '36px'
        };
    }
    AppIconComponent.prototype.ngOnInit = function () {
        this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
        var iconUrl = this.iconUrlFromAppDefinition();
        if (iconUrl) {
            this.model.iconStyle = assign(this.defaultIconStyle, {
                'background-image': iconUrl
            });
        }
        this.model.showIcon = !!this.model.appIcon || !isEmpty(this.model.iconStyle);
        this.model.iconClass = [
            'c8y-icon',
            this.mapFontAwesomeToDelightIcons(this.model.appIcon),
            this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
        ].filter(function (c) { return !!c; });
        this.model.appNameAbbr = this.name.substr(0, 2);
    };
    AppIconComponent.prototype.findStaticIcon = function () {
        var contextPath = this.contextPath || this.name;
        var appContextPathNormalized = find(keys(this.c8yAppIconsList), function (cp) {
            return contextPath.indexOf(cp) > -1;
        });
        var appIcon = this.c8yAppIconsList[appContextPathNormalized];
        return appIcon ? "c8y-icon-" + appIcon : undefined;
    };
    AppIconComponent.prototype.iconFromAppDefinition = function () {
        var app = this.app || this.options;
        var iconClassProperty = ['icon', 'class'];
        var iconClass = get(app, iconClassProperty) || get(app, tslib_1.__spread(['manifest'], iconClassProperty));
        return iconClass;
    };
    AppIconComponent.prototype.iconUrlFromAppDefinition = function () {
        var app = this.app || this.options;
        var iconUrlProperty = ['icon', 'url'];
        var iconUrl = get(app, iconUrlProperty) || get(app, tslib_1.__spread(['manifest'], iconUrlProperty));
        return iconUrl;
    };
    AppIconComponent.prototype.mapFontAwesomeToDelightIcons = function (iconClasses) {
        if (!iconClasses) {
            return;
        }
        var regex = /fa-/gi;
        return iconClasses.replace(regex, 'dlt-c8y-icon-');
    };
    AppIconComponent.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], AppIconComponent.prototype, "contextPath", void 0);
    tslib_1.__decorate([
        Input()
    ], AppIconComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input()
    ], AppIconComponent.prototype, "app", void 0);
    AppIconComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-app-icon',
            template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
            host: { class: 'c8y-app-icon' }
        })
    ], AppIconComponent);
    return AppIconComponent;
}());
export { AppIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvaGVhZGVyL2FwcGxpY2F0aW9uL2FwcC1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBTzlEO0lBK0JFLDBCQUFvQixPQUF1QjtRQUF2QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTdCbEMsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUczQixVQUFLLEdBQUc7WUFDTixPQUFPLEVBQUUsRUFBRTtZQUNYLFFBQVEsRUFBRSxJQUFJO1lBQ2QsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ3ZCLFdBQVcsRUFBRSxFQUFFO1lBQ2YsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBRU0sb0JBQWUsR0FBRztZQUN4QixnQkFBZ0IsRUFBRSxtQkFBbUI7WUFDckMsbUJBQW1CLEVBQUUsbUJBQW1CO1lBQ3hDLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLGdCQUFnQixFQUFFLG1CQUFtQjtZQUNyQyxjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7UUFFTSxVQUFLLEdBQVksS0FBSyxDQUFDO1FBRXZCLHFCQUFnQixHQUFHO1lBQ3pCLG1CQUFtQixFQUFFLFdBQVc7WUFDaEMsaUJBQWlCLEVBQUUsU0FBUztZQUM1QixNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQztJQUU0QyxDQUFDO0lBRS9DLG1DQUFRLEdBQVI7UUFDRSxJ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LENBQUM7O2dCQWhENEIsY0FBYzs7SUE5QmxDO1FBQVIsS0FBSyxFQUFFO3lEQUFxQjtJQUNwQjtRQUFSLEtBQUssRUFBRTtrREFBbUI7SUFDbEI7UUFBUixLQUFLLEVBQUU7aURBQVU7SUFIUCxnQkFBZ0I7UUFMNUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIsOExBQXdDO1lBQ3hDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUU7U0FDaEMsQ0FBQztPQUNXLGdCQUFnQixDQWdGNUI7SUFBRCx1QkFBQztDQUFBLEFBaEZELElBZ0ZDO1NBaEZZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmluZCwga2V5cywgZ2V0LCBhc3NpZ24sIGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFwcC1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FwcC1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgaG9zdDogeyBjbGFzczogJ2M4eS1hcHAtaWNvbicgfVxufSlcbmV4cG9ydCBjbGFzcyBBcHBJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29udGV4dFBhdGg6IHN0cmluZztcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIGFwcDogYW55O1xuXG4gIG1vZGVsID0ge1xuICAgIGFwcEljb246ICcnLFxuICAgIHNob3dJY29uOiB0cnVlLFxuICAgIGljb25DbGFzczogWydjOHktaWNvbiddLFxuICAgIGFwcE5hbWVBYmJyOiAnJyxcbiAgICBpY29uU3R5bGU6IHt9XG4gIH07XG5cbiAgcHJpdmF0ZSBjOHlBcHBJY29uc0xpc3QgPSB7XG4gICAgYW5hbHl0aWNzYnVpbGRlcjogJ2FuYWx5dGljcy1idWlsZGVyJyxcbiAgICAnYW5hbHl0aWNzLWJ1aWxkZXInOiAnYW5hbHl0aWNzLWJ1aWxkZXInLFxuICAgIGNvY2twaXQ6ICdjb2NrcGl0JyxcbiAgICBkZXZpY2VtYW5hZ2VtZW50OiAnZGV2aWNlLW1hbmFnZW1lbnQnLFxuICAgIGFkbWluaXN0cmF0aW9uOiAnYWRtaW5pc3RyYXRpb24nLFxuICAgIGFwYW1hZXBsOiAnYXBhbWEtZXBsJ1xuICB9O1xuXG4gIHByaXZhdGUgd2hpdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIGRlZmF1bHRJY29uU3R5bGUgPSB7XG4gICAgJ2JhY2tncm91bmQtcmVwZWF0JzogJ25vLXJlcGVhdCcsXG4gICAgJ2JhY2tncm91bmQtc2l6ZSc6ICdjb250YWluJyxcbiAgICBoZWlnaHQ6ICczNnB4JyxcbiAgICB3aWR0aDogJzM2cHgnXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm1vZGVsLmFwcEljb24gPSB0aGlzLmljb25Gcm9tQXBwRGVmaW5pdGlvbigpIHx8IHRoaXMuZmluZFN0YXRpY0ljb24oKTtcbiAgICBjb25zdCBpY29uVXJsID0gdGhpcy5pY29uVXJsRnJvbUFwcERlZmluaXRpb24oKTtcbiAgICBpZiAoaWNvblVybCkge1xuICAgICAgdGhpcy5tb2RlbC5pY29uU3R5bGUgPSBhc3NpZ24odGhpcy5kZWZhdWx0SWNvblN0eWxlLCB7XG4gICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogaWNvblVybFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwuc2hvd0ljb24gPSAhIXRoaXMubW9kZWwuYXBwSWNvbiB8fCAhaXNFbXB0eSh0aGlzLm1vZGVsLmljb25TdHlsZSk7XG4gICAgdGhpcy5tb2RlbC5pY29uQ2xhc3MgPSBbXG4gICAgICAnYzh5LWljb24nLFxuICAgICAgdGhpcy5tYXBGb250QXdlc29tZVRvRGVsaWdodEljb25zKHRoaXMubW9kZWwuYXBwSWNvbiksXG4gICAgICB0aGlzLndoaXRlID8gJ2M4eS1pY29uLXdoaXRlJyA6ICdjOHktaWNvbi1kdW9jb2xvcidcbiAgICBdLmZpbHRlcihjID0+ICEhYyk7XG4gICAgdGhpcy5tb2RlbC5hcHBOYW1lQWJiciA9IHRoaXMubmFtZS5zdWJzdHIoMCwgMik7XG4gIH1cblxuICBwcml2YXRlIGZpbmRTdGF0aWNJY29uKCkge1xuICAgIGNvbnN0IGNvbnRleHRQYXRoID0gdGhpcy5jb250ZXh0UGF0aCB8fCB0aGlzLm5hbWU7XG4gICAgY29uc3QgYXBwQ29udGV4dFBhdGhOb3JtYWxpemVkID0gZmluZChrZXlzKHRoaXMuYzh5QXBwSWNvbnNMaXN0KSwgY3AgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHRQYXRoLmluZGV4T2YoY3ApID4gLTE7XG4gICAgfSk7XG4gICAgY29uc3QgYXBwSWNvbiA9IHRoaXMuYzh5QXBwSWNvbnNMaXN0W2FwcENvbnRleHRQYXRoTm9ybWFsaXplZF07XG4gICAgcmV0dXJuIGFwcEljb24gPyBgYzh5LWljb24tJHthcHBJY29ufWAgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGljb25Gcm9tQXBwRGVmaW5pdGlvbigpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLmFwcCB8fCB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaWNvbkNsYXNzUHJvcGVydHkgPSBbJ2ljb24nLCAnY2xhc3MnXTtcbiAgICBjb25zdCBpY29uQ2xhc3MgPSBnZXQoYXBwLCBpY29uQ2xhc3NQcm9wZXJ0eSkgfHwgZ2V0KGFwcCwgWydtYW5pZmVzdCcsIC4uLmljb25DbGFzc1Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIGljb25DbGFzcztcbiAgfVxuXG4gIHByaXZhdGUgaWNvblVybEZyb21BcHBEZWZpbml0aW9uKCkge1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwIHx8IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpY29uVXJsUHJvcGVydHkgPSBbJ2ljb24nLCAndXJsJ107XG4gICAgY29uc3QgaWNvblVybCA9IGdldChhcHAsIGljb25VcmxQcm9wZXJ0eSkgfHwgZ2V0KGFwcCwgWydtYW5pZmVzdCcsIC4uLmljb25VcmxQcm9wZXJ0eV0pO1xuICAgIHJldHVybiBpY29uVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBGb250QXdlc29tZVRvRGVsaWdodEljb25zKGljb25DbGFzc2VzOiBzdHJpbmcpIHtcbiAgICBpZiAoIWljb25DbGFzc2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlZ2V4ID0gL2ZhLS9naTtcbiAgICByZXR1cm4gaWNvbkNsYXNzZXMucmVwbGFjZShyZWdleCwgJ2RsdC1jOHktaWNvbi0nKTtcbiAgfVxufVxuIl19