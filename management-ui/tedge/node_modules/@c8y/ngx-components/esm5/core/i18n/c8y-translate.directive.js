import * as tslib_1 from "tslib";
import { TranslateDirective, TranslateService } from '@ngx-translate/core';
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter } from '@angular/core';
var C8yTranslateDirective = /** @class */ (function (_super) {
    tslib_1.__extends(C8yTranslateDirective, _super);
    function C8yTranslateDirective(translateService, element, _ref) {
        var _this = _super.call(this, translateService, element, _ref) || this;
        /**
         * Used to trigger events when html is replaced by directive.
         */
        _this.htmlUpdateEvent = new EventEmitter();
        return _this;
    }
    Object.defineProperty(C8yTranslateDirective.prototype, "_elementRef", {
        /**
         * Used to get private element property from TranslateDirective, so it doesn't throw tsErrors
         */
        get: function () {
            return this.element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(C8yTranslateDirective.prototype, "_translateService", {
        /**
         * Used to get private translateService property from TranslateDirective, so it doesn't throw tsErrors
         */
        get: function () {
            return this.translateService;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Overridden method from original directive.
     * For simple text nodes, it just invokes the base method.
     * For complex nodes, it builds translation key from whole inner HTML
     * and replaces it with its translation.
     * This prevents splitting HTML into pieces and attempting to translate each one separately
     * which doesn't work, because we extract strings in whole.
     */
    C8yTranslateDirective.prototype.checkNodes = function (forceUpdate, translations) {
        if (forceUpdate === void 0) { forceUpdate = false; }
        if (this.isElementSimpleTextType() || this.isElementInnerHtmlEmpty()) {
            /**
             * If element does not contain complex html, then fallBack to default logic.
             */
            _super.prototype.checkNodes.call(this, forceUpdate, translations);
        }
        else {
            if (this.isLookupKeyMissing()) {
                this._elementRef.nativeElement.lookupKey = this.getLookupKey();
            }
            this.translateAndUpdateHtmlContent();
            this.htmlUpdateEvent.emit();
        }
    };
    C8yTranslateDirective.prototype.ngOnDestroy = function () {
        this.htmlUpdateEvent.complete();
        _super.prototype.ngOnDestroy.call(this);
    };
    /**
     * Builds lookup key from innerHTML, removes comments (that might be added by Angular) and trims it.
     */
    C8yTranslateDirective.prototype.getLookupKey = function () {
        return this._elementRef.nativeElement.innerHTML.replace(/<!--.*?-->/gs, '').trim();
    };
    C8yTranslateDirective.prototype.isElementSimpleTextType = function () {
        return this._elementRef.nativeElement.childNodes.length === 1 && this._elementRef.nativeElement.childNodes[0].nodeType === 3;
    };
    C8yTranslateDirective.prototype.isElementInnerHtmlEmpty = function () {
        return !this._elementRef.nativeElement.innerHTML;
    };
    C8yTranslateDirective.prototype.isLookupKeyMissing = function () {
        return !this._elementRef.nativeElement.lookupKey;
    };
    C8yTranslateDirective.prototype.lookupKeyExist = function () {
        return this._elementRef.nativeElement.lookupKey;
    };
    C8yTranslateDirective.prototype.translateAndUpdateHtmlContent = function () {
        if (this.lookupKeyExist()) {
            this._elementRef.nativeElement.innerHTML = this._translateService.instant(this._elementRef.nativeElement.lookupKey, this.currentParams || {});
        }
    };
    C8yTranslateDirective.ctorParameters = function () { return [
        { type: TranslateService },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    C8yTranslateDirective = tslib_1.__decorate([
        Directive({
            selector: '[translate],[ngx-translate]'
        })
    ], C8yTranslateDirective);
    return C8yTranslateDirective;
}(TranslateDirective));
export { C8yTranslateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYzh5LXRyYW5zbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9pMThuL2M4eS10cmFuc2xhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLdkY7SUFBMkMsaURBQWtCO0lBb0IzRCwrQkFDRSxnQkFBa0MsRUFDbEMsT0FBbUIsRUFDbkIsSUFBdUI7UUFIekIsWUFJRSxrQkFBTSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQ3ZDO1FBVkQ7O1dBRUc7UUFDSCxxQkFBZSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDOztJQU8vRCxDQUFDO0lBckJELHNCQUFZLDhDQUFXO1FBSHZCOztXQUVHO2FBQ0g7WUFDRSxPQUFRLElBQVksQ0FBQyxPQUFPLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFLRCxzQkFBWSxvREFBaUI7UUFIN0I7O1dBRUc7YUFDSDtZQUNFLE9BQVEsSUFBWSxDQUFDLGdCQUFnQixDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBY0Q7Ozs7Ozs7T0FPRztJQUNILDBDQUFVLEdBQVYsVUFBVyxXQUFtQixFQUFFLFlBQWtCO1FBQXZDLDRCQUFBLEVBQUEsbUJBQW1CO1FBQzVCLElBQ0UsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFLEVBQ2hFO1lBQ0E7O2VBRUc7WUFDSCxpQkFBTSxVQUFVLFlBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDTCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFO2dCQUM3QixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ2hFO1lBQ0QsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxpQkFBTSxXQUFXLFdBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSyw0Q0FBWSxHQUFwQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckYsQ0FBQztJQUVPLHVEQUF1QixHQUEvQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7SUFDL0gsQ0FBQztJQUVPLHVEQUF1QixHQUEvQjtRQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDbkQsQ0FBQztJQUVPLGtEQUFrQixHQUExQjtRQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDbkQsQ0FBQztJQUVPLDhDQUFjLEdBQXRCO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDbEQsQ0FBQztJQUVPLDZEQUE2QixHQUFyQztRQUNFLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUN2RSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQ3hDLElBQUksQ0FBQyxhQUFhLElBQUksRUFBRSxDQUN6QixDQUFDO1NBQ0g7SUFDSCxDQUFDOztnQkFsRW1CLGdCQUFnQjtnQkFDekIsVUFBVTtnQkFDYixpQkFBaUI7O0lBdkJkLHFCQUFxQjtRQUhqQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsNkJBQTZCO1NBQ3hDLENBQUM7T0FDVyxxQkFBcUIsQ0F3RmpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhGRCxDQUEyQyxrQkFBa0IsR0F3RjVEO1NBeEZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0ZURpcmVjdGl2ZSwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0cmFuc2xhdGVdLFtuZ3gtdHJhbnNsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgQzh5VHJhbnNsYXRlRGlyZWN0aXZlIGV4dGVuZHMgVHJhbnNsYXRlRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIFVzZWQgdG8gZ2V0IHByaXZhdGUgZWxlbWVudCBwcm9wZXJ0eSBmcm9tIFRyYW5zbGF0ZURpcmVjdGl2ZSwgc28gaXQgZG9lc24ndCB0aHJvdyB0c0Vycm9yc1xuICAgKi9cbiAgcHJpdmF0ZSBnZXQgX2VsZW1lbnRSZWYoKTogRWxlbWVudFJlZiB7XG4gICAgcmV0dXJuICh0aGlzIGFzIGFueSkuZWxlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGdldCBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2UgcHJvcGVydHkgZnJvbSBUcmFuc2xhdGVEaXJlY3RpdmUsIHNvIGl0IGRvZXNuJ3QgdGhyb3cgdHNFcnJvcnNcbiAgICovXG4gIHByaXZhdGUgZ2V0IF90cmFuc2xhdGVTZXJ2aWNlKCk6IFRyYW5zbGF0ZVNlcnZpY2Uge1xuICAgIHJldHVybiAodGhpcyBhcyBhbnkpLnRyYW5zbGF0ZVNlcnZpY2U7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byB0cmlnZ2VyIGV2ZW50cyB3aGVuIGh0bWwgaXMgcmVwbGFjZWQgYnkgZGlyZWN0aXZlLlxuICAgKi9cbiAgaHRtbFVwZGF0ZUV2ZW50OiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIF9yZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIodHJhbnNsYXRlU2VydmljZSwgZWxlbWVudCwgX3JlZik7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGRlbiBtZXRob2QgZnJvbSBvcmlnaW5hbCBkaXJlY3RpdmUuXG4gICAqIEZvciBzaW1wbGUgdGV4dCBub2RlcywgaXQganVzdCBpbnZva2VzIHRoZSBiYXNlIG1ldGhvZC5cbiAgICogRm9yIGNvbXBsZXggbm9kZXMsIGl0IGJ1aWxkcyB0cmFuc2xhdGlvbiBrZXkgZnJvbSB3aG9sZSBpbm5lciBIVE1MXG4gICAqIGFuZCByZXBsYWNlcyBpdCB3aXRoIGl0cyB0cmFuc2xhdGlvbi5cbiAgICogVGhpcyBwcmV2ZW50cyBzcGxpdHRpbmcgSFRNTCBpbnRvIHBpZWNlcyBhbmQgYXR0ZW1wdGluZyB0byB0cmFuc2xhdGUgZWFjaCBvbmUgc2VwYXJhdGVseVxuICAgKiB3aGljaCBkb2Vzbid0IHdvcmssIGJlY2F1c2Ugd2UgZXh0cmFjdCBzdHJpbmdzIGluIHdob2xlLlxuICAgKi9cbiAgY2hlY2tOb2Rlcyhmb3JjZVVwZGF0ZSA9IGZhbHNlLCB0cmFuc2xhdGlvbnM/OiBhbnkpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzRWxlbWVudFNpbXBsZVRleHRUeXBlKCkgfHwgdGhpcy5pc0VsZW1lbnRJbm5lckh0bWxFbXB0eSgpXG4gICAgKSB7XG4gICAgICAvKipcbiAgICAgICAqIElmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBjb21wbGV4IGh0bWwsIHRoZW4gZmFsbEJhY2sgdG8gZGVmYXVsdCBsb2dpYy5cbiAgICAgICAqL1xuICAgICAgc3VwZXIuY2hlY2tOb2Rlcyhmb3JjZVVwZGF0ZSwgdHJhbnNsYXRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNMb29rdXBLZXlNaXNzaW5nKCkpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lmxvb2t1cEtleSA9IHRoaXMuZ2V0TG9va3VwS2V5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyYW5zbGF0ZUFuZFVwZGF0ZUh0bWxDb250ZW50KCk7XG4gICAgICB0aGlzLmh0bWxVcGRhdGVFdmVudC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5odG1sVXBkYXRlRXZlbnQuY29tcGxldGUoKTtcbiAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBsb29rdXAga2V5IGZyb20gaW5uZXJIVE1MLCByZW1vdmVzIGNvbW1lbnRzICh0aGF0IG1pZ2h0IGJlIGFkZGVkIGJ5IEFuZ3VsYXIpIGFuZCB0cmltcyBpdC5cbiAgICovXG4gIHByaXZhdGUgZ2V0TG9va3VwS2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MLnJlcGxhY2UoLzwhLS0uKj8tLT4vZ3MsICcnKS50cmltKCk7XG4gIH1cblxuICBwcml2YXRlIGlzRWxlbWVudFNpbXBsZVRleHRUeXBlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUgPT09IDM7XG4gIH1cblxuICBwcml2YXRlIGlzRWxlbWVudElubmVySHRtbEVtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcbiAgfVxuXG4gIHByaXZhdGUgaXNMb29rdXBLZXlNaXNzaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lmxvb2t1cEtleTtcbiAgfVxuXG4gIHByaXZhdGUgbG9va3VwS2V5RXhpc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5sb29rdXBLZXk7XG4gIH1cblxuICBwcml2YXRlIHRyYW5zbGF0ZUFuZFVwZGF0ZUh0bWxDb250ZW50KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmxvb2t1cEtleUV4aXN0KCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl90cmFuc2xhdGVTZXJ2aWNlLmluc3RhbnQoXG4gICAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5sb29rdXBLZXksXG4gICAgICAgIHRoaXMuY3VycmVudFBhcmFtcyB8fCB7fVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==