import * as tslib_1 from "tslib";
import { registerLocaleData } from '@angular/common';
import { Injectable } from '@angular/core';
import { TranslateService as NgxTranslateService } from '@ngx-translate/core';
import { isString, keys } from 'lodash-es';
import { OptionsService } from '../common/options.service';
import { AppStateService } from '../common/ui-state.service';
import { getAngularLocalesLanguageString } from './i18n.module';
import { loadLocale } from './load-locale';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../common/ui-state.service";
import * as i3 from "../common/options.service";
/**
 * A service to manage the language of the application.
 */
var TranslateService = /** @class */ (function () {
    function TranslateService(ngxTranslate, ui, options) {
        var _this = this;
        this.ngxTranslate = ngxTranslate;
        this.ui = ui;
        this.options = options;
        this.langsDetail = this.options.get('languages', {});
        this.langs = keys(this.langsDetail).filter(function (k) { return _this.langsDetail[k]; });
        this.DEFAULT_SEPARATOR = '_';
        var queryStringLang = this.queryStringLang();
        if (queryStringLang) {
            this.saveInLocalStorage(queryStringLang);
        }
    }
    TranslateService_1 = TranslateService;
    TranslateService.defaultLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Switches to given language.
     * @param lang The language as two-letter code.
     */
    TranslateService.prototype.switchToLanguage = function (lang) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var moduleLang, e_1, lessSpecificModuleLang;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        moduleLang = lang.replace('_', '-');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 7]);
                        return [4 /*yield*/, this.loadLocales(moduleLang)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 3:
                        e_1 = _a.sent();
                        lessSpecificModuleLang = moduleLang.split('-').shift();
                        if (!(lessSpecificModuleLang !== moduleLang)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.loadLocales(lessSpecificModuleLang)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5: throw e_1;
                    case 6: return [3 /*break*/, 7];
                    case 7:
                        this.setLanguage(lang);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.loadLocales = function (moduleLang) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var module;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, loadLocale(getAngularLocalesLanguageString(moduleLang))];
                    case 1:
                        module = _a.sent();
                        registerLocaleData(module.default);
                        return [2 /*return*/];
                }
            });
        });
    };
    TranslateService.prototype.setLanguage = function (lang) {
        var _this = this;
        this.ngxTranslate.setDefaultLang(this.options.get('defaultLanguage', 'en'));
        this.ngxTranslate.use(lang).subscribe(function () {
            _this.ui.state$.next(tslib_1.__assign({}, _this.ui.state, { lang: lang }));
        });
    };
    /**
     * Finds the first supported language
     */
    TranslateService.prototype.firstSupportedLanguage = function () {
        var _this = this;
        var languages = [this.queryStringLang(), this.localStorageLang()]
            .concat([this.options.get('defaultLanguage')])
            .concat(this.browserLangs())
            .concat(['en'])
            .filter(Boolean)
            .map(function (lang) { return lang.toLowerCase(); });
        var preferredLanguage = languages.find(function (lang) { return _this.getSupported(lang); });
        return this.getSupported(preferredLanguage);
    };
    /**
     * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
     * @param lang The iso language code.
     */
    TranslateService.prototype.convertToLanguageCodePO = function (lang) {
        var sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
        var _a = tslib_1.__read(lang.split(sep), 2), langMain = _a[0], langSpecific = _a[1];
        var langLast = langSpecific ? "" + this.DEFAULT_SEPARATOR + langSpecific : '';
        return "" + langMain + langLast;
    };
    /**
     * Returns the language in the native language.
     * @param lang The language two-letter code.
     * @return The native name.
     */
    TranslateService.prototype.getNativeLanguage = function (lang) {
        var langData = (this.langsDetail || {})[lang] || {};
        return langData.nativeName || lang;
    };
    TranslateService.prototype.saveInLocalStorage = function (lang) {
        window.localStorage.setItem(TranslateService_1.SAVE_LANGUAGE_KEY, lang);
    };
    TranslateService.prototype.getSupported = function (lang) {
        var _this = this;
        var exact = this.langs.find(function (l) { return l.toLowerCase() === lang; });
        if (exact) {
            return exact;
        }
        return this.langs.find(function (l) {
            return _this.getLessSpecific(l.toLowerCase()) === _this.getLessSpecific(lang) || l.startsWith(lang);
        });
    };
    /**
     * Gets the language from the query parameter.
     * @return The language two-letter code.
     */
    TranslateService.prototype.queryStringLang = function () {
        return this.getQueryParameter('lang');
    };
    TranslateService.prototype.getLessSpecific = function (lang) {
        return isString(lang)
            ? lang.replace('-', this.DEFAULT_SEPARATOR).split(this.DEFAULT_SEPARATOR)[0]
            : '';
    };
    /**
     * Gets the language from local storage.
     * @return The language two-letter code.
     */
    TranslateService.prototype.localStorageLang = function () {
        return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
    };
    /**
     * Determines which language is set in the browser.
     * @return The languages the browser supports as string array.
     */
    TranslateService.prototype.browserLangs = function () {
        var navigator = window.navigator;
        var browserLanguagePropertyKeys = [
            'languages',
            'language',
            'browserLanguage',
            'systemLanguage',
            'userLanguage'
        ];
        return browserLanguagePropertyKeys.reduce(function (languages, property) {
            var propertyLanguages = navigator[property];
            if (typeof propertyLanguages === 'string') {
                languages.push(propertyLanguages);
            }
            else if (Array.isArray(propertyLanguages)) {
                languages = languages.concat(propertyLanguages);
            }
            return languages;
        }, []);
    };
    TranslateService.prototype.getQueryParameter = function (queryKey) {
        // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
        var query = window.location.search.substring(1);
        var result;
        query.split('&').find(function (pair) {
            var _a = tslib_1.__read(pair.split('='), 2), key = _a[0], value = _a[1];
            if (key === queryKey) {
                result = value;
            }
            return result;
        });
        return result;
    };
    var TranslateService_1;
    TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
    TranslateService.ctorParameters = function () { return [
        { type: NgxTranslateService },
        { type: AppStateService },
        { type: OptionsService }
    ]; };
    TranslateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i3.OptionsService)); }, token: TranslateService, providedIn: "root" });
    TranslateService = TranslateService_1 = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], TranslateService);
    return TranslateService;
}());
export { TranslateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9pMThuL3RyYW5zbGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsSUFBSSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFXLE1BQU0sV0FBVyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBRTNDOztHQUVHO0FBSUg7SUFRRSwwQkFDVSxZQUFpQyxFQUNqQyxFQUFtQixFQUNuQixPQUF1QjtRQUhqQyxpQkFTQztRQVJTLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxPQUFFLEdBQUYsRUFBRSxDQUFpQjtRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQU5qQyxnQkFBVyxHQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyRCxVQUFLLEdBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7UUFDN0Qsc0JBQWlCLEdBQUcsR0FBRyxD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Q0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVPLDRDQUFpQixHQUF6QixVQUEwQixRQUFRO1FBQ2hDLDJFQUEyRTtRQUMzRSxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxNQUFNLENBQUM7UUFDWCxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7WUFDbEIsSUFBQSx1Q0FBOEIsRUFBN0IsV0FBRyxFQUFFLGFBQXdCLENBQUM7WUFDckMsSUFBSSxHQUFHLEtBQUssUUFBUSxFQUFFO2dCQUNwQixNQUFNLEdBQUcsS0FBSyxDQUFDO2FBQ2hCO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztJQWhLTSxrQ0FBaUIsR0FBRyxjQUFjLENBQUM7O2dCQVFsQixtQkFBbUI7Z0JBQzdCLGVBQWU7Z0JBQ1YsY0FBYzs7O0lBWHRCLGdCQUFnQjtRQUg1QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csZ0JBQWdCLENBa0s1QjsyQkFqTEQ7Q0FpTEMsQUFsS0QsSUFrS0M7U0FsS1ksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXJMb2NhbGVEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgYXMgTmd4VHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGtleXMsIHRvTG93ZXIgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi91aS1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IGdldEFuZ3VsYXJMb2NhbGVzTGFuZ3VhZ2VTdHJpbmcgfSBmcm9tICcuL2kxOG4ubW9kdWxlJztcbmltcG9ydCB7IGxvYWRMb2NhbGUgfSBmcm9tICcuL2xvYWQtbG9jYWxlJztcblxuLyoqXG4gKiBBIHNlcnZpY2UgdG8gbWFuYWdlIHRoZSBsYW5ndWFnZSBvZiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZVNlcnZpY2Uge1xuICBzdGF0aWMgU0FWRV9MQU5HVUFHRV9LRVkgPSAnYzh5X2xhbmd1YWdlJztcbiAgc3RhdGljIGRlZmF1bHRMYW5nKCkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oVHJhbnNsYXRlU2VydmljZS5TQVZFX0xBTkdVQUdFX0tFWSk7XG4gIH1cbiAgbGFuZ3NEZXRhaWw6IGFueSA9IHRoaXMub3B0aW9ucy5nZXQoJ2xhbmd1YWdlcycsIHt9KTtcbiAgbGFuZ3M6IGFueSA9IGtleXModGhpcy5sYW5nc0RldGFpbCkuZmlsdGVyKGsgPT4gdGhpcy5sYW5nc0RldGFpbFtrXSk7XG4gIHByaXZhdGUgREVGQVVMVF9TRVBBUkFUT1IgPSAnXyc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmd4VHJhbnNsYXRlOiBOZ3hUcmFuc2xhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIG9wdGlvbnM6IE9wdGlvbnNTZXJ2aWNlXG4gICkge1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nTGFuZyA9IHRoaXMucXVlcnlTdHJpbmdMYW5nKCk7XG4gICAgaWYgKHF1ZXJ5U3RyaW5nTGFuZykge1xuICAgICAgdGhpcy5zYXZlSW5Mb2NhbFN0b3JhZ2UocXVlcnlTdHJpbmdMYW5nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gZ2l2ZW4gbGFuZ3VhZ2UuXG4gICAqIEBwYXJhbSBsYW5nIFRoZSBsYW5ndWFnZSBhcyB0d28tbGV0dGVyIGNvZGUuXG4gICAqL1xuICBhc3luYyBzd2l0Y2hUb0xhbmd1YWdlKGxhbmc6IHN0cmluZykge1xuICAgIGNvbnN0IG1vZHVsZUxhbmcgPSBsYW5nLnJlcGxhY2UoJ18nLCAnLScpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZExvY2FsZXMobW9kdWxlTGFuZyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgbGVzc1NwZWNpZmljTW9kdWxlTGFuZyA9IG1vZHVsZUxhbmcuc3BsaXQoJy0nKS5zaGlmdCgpO1xuICAgICAgaWYgKGxlc3NTcGVjaWZpY01vZHVsZUxhbmcgIT09IG1vZHVsZUxhbmcpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTG9jYWxlcyhsZXNzU3BlY2lmaWNNb2R1bGVMYW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRMYW5ndWFnZShsYW5nKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRMb2NhbGVzKG1vZHVsZUxhbmcpIHtcbiAgICBjb25zdCBtb2R1bGU6IGFueSA9IGF3YWl0IGxvYWRMb2NhbGUoZ2V0QW5ndWxhckxvY2FsZXNMYW5ndWFnZVN0cmluZyhtb2R1bGVMYW5nKSk7XG4gICAgcmVnaXN0ZXJMb2NhbGVEYXRhKG1vZHVsZS5kZWZhdWx0KTtcbiAgfVxuXG4gIHNldExhbmd1YWdlKGxhbmc6IHN0cmluZykge1xuICAgIHRoaXMubmd4VHJhbnNsYXRlLnNldERlZmF1bHRMYW5nKHRoaXMub3B0aW9ucy5nZXQoJ2RlZmF1bHRMYW5ndWFnZScsICdlbicpKTtcbiAgICB0aGlzLm5neFRyYW5zbGF0ZS51c2UobGFuZykuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMudWkuc3RhdGUkLm5leHQoeyAuLi50aGlzLnVpLnN0YXRlLCBsYW5nIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBmaXJzdCBzdXBwb3J0ZWQgbGFuZ3VhZ2VcbiAgICovXG4gIGZpcnN0U3VwcG9ydGVkTGFuZ3VhZ2UoKSB7XG4gICAgY29uc3QgbGFuZ3VhZ2VzID0gW3RoaXMucXVlcnlTdHJpbmdMYW5nKCksIHRoaXMubG9jYWxTdG9yYWdlTGFuZygpXVxuICAgICAgLmNvbmNhdChbdGhpcy5vcHRpb25zLmdldCgnZGVmYXVsdExhbmd1YWdlJyldKVxuICAgICAgLmNvbmNhdCh0aGlzLmJyb3dzZXJMYW5ncygpKVxuICAgICAgLmNvbmNhdChbJ2VuJ10pXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAubWFwKGxhbmcgPT4gbGFuZy50b0xvd2VyQ2FzZSgpKTtcblxuICAgIGNvbnN0IHByZWZlcnJlZExhbmd1YWdlID0gbGFuZ3VhZ2VzLmZpbmQobGFuZyA9PiB0aGlzLmdldFN1cHBvcnRlZChsYW5nKSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3VwcG9ydGVkKHByZWZlcnJlZExhbmd1YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIGlzbyBsYW5ndWFnZSBjb2RlIHRvIGEgUE8gbGFuZ3VhZ2UgY29kZSAoZS5nLiBkZS1kZSBnZXRzIGRlX2RlKS5cbiAgICogQHBhcmFtIGxhbmcgVGhlIGlzbyBsYW5ndWFnZSBjb2RlLlxuICAgKi9cbiAgY29udmVydFRvTGFuZ3VhZ2VDb2RlUE8obGFuZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzZXAgPSBsYW5nLmluZGV4T2YoJy0nKSA+IC0xID8gJy0nIDogdGhpcy5ERUZBVUxUX1NFUEFSQVRPUjtcbiAgICBjb25zdCBbbGFuZ01haW4sIGxhbmdTcGVjaWZpY10gPSBsYW5nLnNwbGl0KHNlcCk7XG4gICAgY29uc3QgbGFuZ0xhc3QgPSBsYW5nU3BlY2lmaWMgPyBgJHt0aGlzLkRFRkFVTFRfU0VQQVJBVE9SfSR7bGFuZ1NwZWNpZmljfWAgOiAnJztcbiAgICByZXR1cm4gYCR7bGFuZ01haW59JHtsYW5nTGFzdH1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGluIHRoZSBuYXRpdmUgbGFuZ3VhZ2UuXG4gICAqIEBwYXJhbSBsYW5nIFRoZSBsYW5ndWFnZSB0d28tbGV0dGVyIGNvZGUuXG4gICAqIEByZXR1cm4gVGhlIG5hdGl2ZSBuYW1lLlxuICAgKi9cbiAgZ2V0TmF0aXZlTGFuZ3VhZ2UobGFuZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5nRGF0YSA9ICh0aGlzLmxhbmdzRGV0YWlsIHx8IHt9KVtsYW5nXSB8fCB7fTtcbiAgICByZXR1cm4gbGFuZ0RhdGEubmF0aXZlTmFtZSB8fCBsYW5nO1xuICB9XG5cbiAgc2F2ZUluTG9jYWxTdG9yYWdlKGxhbmc6IHN0cmluZykge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShUcmFuc2xhdGVTZXJ2aWNlLlNBVkVfTEFOR1VBR0VfS0VZLCBsYW5nKTtcbiAgfVxuXG4gIGdldFN1cHBvcnRlZChsYW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBleGFjdCA9IHRoaXMubGFuZ3MuZmluZChsID0+IGwudG9Mb3dlckNhc2UoKSA9PT0gbGFuZyk7XG4gICAgaWYgKGV4YWN0KSB7XG4gICAgICByZXR1cm4gZXhhY3Q7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxhbmdzLmZpbmQoXG4gICAgICBsID0+XG4gICAgICAgIHRoaXMuZ2V0TGVzc1NwZWNpZmljKGwudG9Mb3dlckNhc2UoKSkgPT09IHRoaXMuZ2V0TGVzc1NwZWNpZmljKGxhbmcpIHx8IGwuc3RhcnRzV2l0aChsYW5nKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGFuZ3VhZ2UgZnJvbSB0aGUgcXVlcnkgcGFyYW1ldGVyLlxuICAgKiBAcmV0dXJuIFRoZSBsYW5ndWFnZSB0d28tbGV0dGVyIGNvZGUuXG4gICAqL1xuICBxdWVyeVN0cmluZ0xhbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnlQYXJhbWV0ZXIoJ2xhbmcnKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGVzc1NwZWNpZmljKGxhbmcpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcobGFuZylcbiAgICAgID8gbGFuZy5yZXBsYWNlKCctJywgdGhpcy5ERUZBVUxUX1NFUEFSQVRPUikuc3BsaXQodGhpcy5ERUZBVUxUX1NFUEFSQVRPUilbMF1cbiAgICAgIDogJyc7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGFuZ3VhZ2UgZnJvbSBsb2NhbCBzdG9yYWdlLlxuICAgKiBAcmV0dXJuIFRoZSBsYW5ndWFnZSB0d28tbGV0dGVyIGNvZGUuXG4gICAqL1xuICBwcml2YXRlIGxvY2FsU3RvcmFnZUxhbmcoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShUcmFuc2xhdGVTZXJ2aWNlLlNBVkVfTEFOR1VBR0VfS0VZKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoaWNoIGxhbmd1YWdlIGlzIHNldCBpbiB0aGUgYnJvd3Nlci5cbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2VzIHRoZSBicm93c2VyIHN1cHBvcnRzIGFzIHN0cmluZyBhcnJheS5cbiAgICovXG4gIHByaXZhdGUgYnJvd3NlckxhbmdzKCkge1xuICAgIGNvbnN0IHsgbmF2aWdhdG9yIH0gPSB3aW5kb3c7XG4gICAgY29uc3QgYnJvd3Nlckxhbmd1YWdlUHJvcGVydHlLZXlzID0gW1xuICAgICAgJ2xhbmd1YWdlcycsXG4gICAgICAnbGFuZ3VhZ2UnLFxuICAgICAgJ2Jyb3dzZXJMYW5ndWFnZScsXG4gICAgICAnc3lzdGVtTGFuZ3VhZ2UnLFxuICAgICAgJ3VzZXJMYW5ndWFnZSdcbiAgICBdO1xuICAgIHJldHVybiBicm93c2VyTGFuZ3VhZ2VQcm9wZXJ0eUtleXMucmVkdWNlKChsYW5ndWFnZXMsIHByb3BlcnR5KSA9PiB7XG4gICAgICBjb25zdCBwcm9wZXJ0eUxhbmd1YWdlcyA9IG5hdmlnYXRvcltwcm9wZXJ0eV07XG4gICAgICBpZiAodHlwZW9mIHByb3BlcnR5TGFuZ3VhZ2VzID09PSAnc3RyaW5nJykge1xuICAgICAgICBsYW5ndWFnZXMucHVzaChwcm9wZXJ0eUxhbmd1YWdlcyk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHlMYW5ndWFnZXMpKSB7XG4gICAgICAgIGxhbmd1YWdlcyA9IGxhbmd1YWdlcy5jb25jYXQocHJvcGVydHlMYW5ndWFnZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhbmd1YWdlcztcbiAgICB9LCBbXSk7XG4gIH1cblxuICBwcml2YXRlIGdldFF1ZXJ5UGFyYW1ldGVyKHF1ZXJ5S2V5KSB7XG4gICAgLy8gVE9ETzogcmVwbGFjZSB0aGlzIHdpdGggVVJMU2VhcmNoUGFyYW1zLCBpZSAxMSBzdGlsbCBkb2Vzbid0IHN1cHBvcnQgOigpXG4gICAgY29uc3QgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHF1ZXJ5LnNwbGl0KCcmJykuZmluZChwYWlyID0+IHtcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXIuc3BsaXQoJz0nKTtcbiAgICAgIGlmIChrZXkgPT09IHF1ZXJ5S2V5KSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=