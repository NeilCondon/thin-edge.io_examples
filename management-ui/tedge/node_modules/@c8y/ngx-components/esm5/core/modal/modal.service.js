import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { ConfirmModalComponent } from './modal-confirm.component';
import { Status } from '../common/status.model';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/modal";
/**
 * Service to show a modal.
 */
var ModalService = /** @class */ (function () {
    function ModalService(modalService) {
        this.modalService = modalService;
    }
    /**
     * Shows a quick confirm message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
     */
    ModalService.prototype.confirm = function (title, body, status, labels) {
        if (status === void 0) { status = Status.INFO; }
        if (labels === void 0) { labels = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modalLabels, modalRef;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
                        modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: modalLabels, status: status } });
                        return [4 /*yield*/, modalRef.content.result];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Shows a quick acknowledge message modal.
     * @param title The title of that modal.
     * @param body The text body to display.
     * @param status The status.
     * @param acknowledgeLabel The label to use.
     */
    ModalService.prototype.acknowledge = function (title, body, status, acknowledgeLabel) {
        if (status === void 0) { status = Status.INFO; }
        if (acknowledgeLabel === void 0) { acknowledgeLabel = gettext('Confirm'); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var labels, modalRef;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        labels = { ok: acknowledgeLabel, cancel: null };
                        modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: labels, status: status } });
                        return [4 /*yield*/, modalRef.content.result];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModalService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    ModalService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.BsModalService)); }, token: ModalService, providedIn: "root" });
    ModalService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ModalService);
    return ModalService;
}());
export { ModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL21vZGFsL21vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUUxQzs7R0FFRztBQUlIO0lBRUUsc0JBQW9CLFlBQTRCO1FBQTVCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUFHLENBQUM7SUFFcEQ7Ozs7OztPQU1HO0lBQ0csOEJBQU8sR0FBYixVQUFjLEtBQWEsRUFBRSxJQUFZLEVBQUUsTUFBZ0MsRUFBRyxNQUFnQjtRQUFuRCx1QkFBQSxFQUFBLFNBQXFCLE1BQU0sQ0FBQyxJQUFJO1FBQUcsdUJBQUEsRUFBQSxXQUFnQjs7Ozs7O3dCQUN0RixXQUFXLEdBQUcsRUFBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUM7d0JBQ2hHLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFDLFlBQVksRUFBRSxFQUFDLEtBQUssT0FBQSxFQUFFLElBQUksTUFBQSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFBLEVBQUMsRUFBQyxDQUFDLENBQUM7d0JBQ3BILHFCQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFBOzRCQUFwQyxzQkFBTyxTQUE2QixFQUFDOzs7O0tBQ3RDO0lBRUQ7Ozs7OztPQU1HO0lBQ0csa0NBQVcsR0FBakIsVUFBa0IsS0FBYSxFQUFFLElBQVksRUFBRSxNQUFnQyxFQUFFLGdCQUE2QztRQUEvRSx1QkFBQSxFQUFBLFNBQXFCLE1BQU0sQ0FBQyxJQUFJO1FBQUUsaUNBQUEsRUFBQSxtQkFBMkIsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7Ozs7O3dCQUN0SCxNQUFNLEdBQUcsRUFBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDO3dCQUM5QyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLE9BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxNQUFNLFFBQUEsRUFBQyxFQUFDLENBQUMsQ0FBQzt3QkFDdkcscUJBQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUE7NEJBQXBDLHNCQUFPLFNBQTZCLEVBQUM7Ozs7S0FDdEM7O2dCQTFCaUMsY0FBYzs7O0lBRnJDLFlBQVk7UUFIeEIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLFlBQVksQ0E2QnhCO3VCQXpDRDtDQXlDQyxBQTdCRCxJQTZCQztTQTdCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IENvbmZpcm1Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vbW9kYWwtY29uZmlybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3RhdHVzVHlwZSwgU3RhdHVzIH0gZnJvbSAnLi4vY29tbW9uL3N0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHNob3cgYSBtb2RhbC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgY29uZmlybSBtZXNzYWdlIG1vZGFsLlxuICAgKiBAcGFyYW0gdGl0bGUgVGhlIHRpdGxlIG9mIHRoYXQgbW9kYWwuXG4gICAqIEBwYXJhbSBib2R5IFRoZSB0ZXh0IGJvZHkgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHN0YXR1cyBUaGUgc3RhdHVzLlxuICAgKiBAcGFyYW0gbGFiZWxzIFRoZSBsYWJlbHMgdG8gdXNlLiBEZWZhdWx0OiB7IG9rOiAnQ29uZmlybScsIGNhbmNlbDogJ0NhbmNlbCd9XG4gICAqL1xuICBhc3luYyBjb25maXJtKHRpdGxlOiBzdHJpbmcsIGJvZHk6IHN0cmluZywgc3RhdHVzOiBTdGF0dXNUeXBlID0gU3RhdHVzLklORk8sICBsYWJlbHM6IGFueSA9IHt9KSB7XG4gICAgY29uc3QgbW9kYWxMYWJlbHMgPSB7b2s6IGxhYmVscy5vayB8fCBnZXR0ZXh0KCdDb25maXJtJyksIGNhbmNlbDogbGFiZWxzLmNhbmNlbCB8fCBnZXR0ZXh0KCdDYW5jZWwnKX07XG4gICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KENvbmZpcm1Nb2RhbENvbXBvbmVudCwge2luaXRpYWxTdGF0ZToge3RpdGxlLCBib2R5LCBsYWJlbHM6IG1vZGFsTGFiZWxzLCBzdGF0dXN9fSk7XG4gICAgcmV0dXJuIGF3YWl0IG1vZGFsUmVmLmNvbnRlbnQucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcXVpY2sgYWNrbm93bGVkZ2UgbWVzc2FnZSBtb2RhbC5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSB0aXRsZSBvZiB0aGF0IG1vZGFsLlxuICAgKiBAcGFyYW0gYm9keSBUaGUgdGV4dCBib2R5IHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSBzdGF0dXMgVGhlIHN0YXR1cy5cbiAgICogQHBhcmFtIGFja25vd2xlZGdlTGFiZWwgVGhlIGxhYmVsIHRvIHVzZS5cbiAgICovXG4gIGFzeW5jIGFja25vd2xlZGdlKHRpdGxlOiBzdHJpbmcsIGJvZHk6IHN0cmluZywgc3RhdHVzOiBTdGF0dXNUeXBlID0gU3RhdHVzLklORk8sIGFja25vd2xlZGdlTGFiZWw6IHN0cmluZyA9IGdldHRleHQoJ0NvbmZpcm0nKSApIHtcbiAgICBjb25zdCBsYWJlbHMgPSB7b2s6IGFja25vd2xlZGdlTGFiZWwsIGNhbmNlbDogbnVsbH07XG4gICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KENvbmZpcm1Nb2RhbENvbXBvbmVudCwge2luaXRpYWxTdGF0ZToge3RpdGxlLCBib2R5LCBsYWJlbHMsIHN0YXR1c319KTtcbiAgICByZXR1cm4gYXdhaXQgbW9kYWxSZWYuY29udGVudC5yZXN1bHQ7XG4gIH1cbn1cbiJdfQ==