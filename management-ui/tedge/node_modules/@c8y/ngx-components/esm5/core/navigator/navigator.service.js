import * as tslib_1 from "tslib";
import { Injectable, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { fromTrigger, sortByPriority, stateToFactory } from '../common/extension-hooks';
import { StateService } from '../common/state-service.abstract';
import { NavigatorNodeRoot } from './navigator-node-root';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * A hook to use for Multi Provider extension.
 */
export var HOOK_NAVIGATOR_NODES = new InjectionToken('NavigatorNodesFactory');
/**
 * A service which defines the navigator.
 */
var NavigatorService = /** @class */ (function (_super) {
    tslib_1.__extends(NavigatorService, _super);
    function NavigatorService(injector, router) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.router = router;
        /**
         * Refresh the extension factories subject.
         * @readonly
         */
        _this.refreshTrigger = new Subject();
        /**
         * @ignore
         */
        _this.state$ = new BehaviorSubject(new Set());
        /**
         * Indicates whether the menu entry associated with the given URL should be expanded.
         */
        _this.firstUrl = true;
        var rootNode = new NavigatorNodeRoot();
        _this.items$ = fromTrigger(router, _this.refreshTrigger, [
            function () { return _this.injector.get(HOOK_NAVIGATOR_NODES, []); },
            stateToFactory(_this.state$)
        ]).pipe(map(function (nodes) {
            var noParent = nodes.filter(function (node) { return !node.parent; });
            var withParent = nodes.filter(function (node) { return node.parent; });
            // Based on the sortedNodes array, the nodes are sequentially created.
            // Nodes sorting is done in two steps to have the top-level nodes first.
            // This way, by the time we are adding a child node, the parent node is already present.
            var sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
            rootNode.empty();
            sortedNodes.forEach(function (node) { return rootNode.addRoot(node); });
            return rootNode.children;
        }), shareReplay(1));
        return _this;
    }
    /**
     * Checks whenever a navigator entry associated with the given URL should be expanded.
     * @param {NavigatorNode} node Navigator node.
     */
    NavigatorService.prototype.openOnFirstUrl = function (node) {
        if (this.firstUrl && !!node.path) {
            return (this.router.isActive(node.path, node.routerLinkExact) || node.openOnStart(this.router.url));
        }
        return false;
    };
    Object.defineProperty(NavigatorService.prototype, "state", {
        /**
         * Returns the current state.
         * @readonly
         * @returns The current set of actions.
         */
        get: function () {
            return this.state$.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Refresh the extension factories.
     */
    NavigatorService.prototype.refresh = function () {
        this.refreshTrigger.next(1);
    };
    /**
     * Adds a new node to the navigator.
     * @param {NavigatorNode} node Navigator node to add.
     */
    NavigatorService.prototype.add = function (node) {
        this.state.add(node);
        this.emitNewState();
    };
    /**
     * Removes a node from the navigator.
     * @param {NavigatorNode} node Navigator node to remove.
     */
    NavigatorService.prototype.remove = function (node) {
        this.state.delete(node);
        this.emitNewState();
    };
    NavigatorService.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    NavigatorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NavigatorService_Factory() { return new NavigatorService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Router)); }, token: NavigatorService, providedIn: "root" });
    NavigatorService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NavigatorService);
    return NavigatorService;
}(StateService));
export { NavigatorService };
//# sourceMappingURL=data:application/json;base64,