import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { combineLatest, fromEvent, BehaviorSubject } from 'rxjs';
import { filter, delay, map, take } from 'rxjs/operators';
import { AppStateService } from '../common/ui-state.service';
import { OptionsService } from '../common/options.service';
import { TranslateService } from '../i18n/translate.service';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/ui-state.service";
import * as i2 from "../common/options.service";
import * as i3 from "../bootstrap/cookie-banner/cookie-banner.service";
import * as i4 from "../common/user-preferences/user-preferences.service";
/**
 * A service to manage the Gainsight integration. It allows to load the
 * tag and
 */
var GainsightService = /** @class */ (function () {
    function GainsightService(appState, options, cookieBannerService, userPreferencesService) {
        this.appState = appState;
        this.options = options;
        this.cookieBannerService = cookieBannerService;
        this.userPreferencesService = userPreferencesService;
        /**
         * A subject that emits the tag function as soon as a new tag is set.
         */
        this.tagFunction$ = new BehaviorSubject(null);
        this.USER_PREFERENCES_KEY = 'gainsightEnabled';
        this.GAINSIGHT_URL = 'web-sdk.aptrinsic.com/api/aptrinsic.js?a=';
        this.GAINSIGHT_GLOBAL_SCOPE = 'aptrinsic';
        this.SCRIPT_EXECUTION_WAIT_TIME = 500;
        this.OPTIONS_KEY_CATEGORY = 'gainsight';
        this.OPTIONS_KEY_NAME = 'api.key';
        this.isScriptLoaded = false;
    }
    GainsightService.prototype.isGainsightDisabledInUserPreferences = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userGainsightPref;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userPreferencesService
                            .get(this.USER_PREFERENCES_KEY)
                            .toPromise()];
                    case 1:
                        userGainsightPref = _a.sent();
                        return [2 /*return*/, userGainsightPref === false];
                }
            });
        });
    };
    GainsightService.prototype.setFunctionalCookie = function (value) {
        var cookies = this.cookieBannerService.getUserCookiePreferences();
        if (cookies) {
            Object.keys(cookies).forEach(function (cookieName) {
                if (cookieName === 'functional') {
                    cookies[cookieName] = value;
                    return;
                }
            });
            localStorage.setItem('acceptCookieNotice', JSON.stringify(cookies));
        }
    };
    GainsightService.prototype.getGainsightKey = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this;
                        _b = this.options.gainsightKey;
                        if (_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.options.getSystemOption(this.OPTIONS_KEY_CATEGORY, this.OPTIONS_KEY_NAME)];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        _a.gainsightKey = _b;
                        return [2 /*return*/, this.gainsightKey];
                }
            });
        });
    };
    Object.defineProperty(GainsightService.prototype, "tagFunction", {
        /**
         * Returns the tag global function which can be used to identify user
         * or add special events.
         */
        get: function () {
            return window[this.GAINSIGHT_GLOBAL_SCOPE];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Load the script tag and calls the identify function to start the tracking.
     * @param currentTenant The current tenant.
     * @param identify If set to false, only the tag is loaded.
     */
    GainsightService.prototype.loadTag = function (currentTenant, identify) {
        if (identify === void 0) { identify = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var scriptTag, key;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        scriptTag = document.createElement('script');
                        return [4 /*yield*/, this.getGainsightKey()];
                    case 1:
                        key = _a.sent();
                        if (key && !this.isScriptLoaded) {
                            this.loadScriptTag(scriptTag, key);
                            combineLatest(this.appState.currentUser, fromEvent(scriptTag, 'load'), this.appState.state$.pipe(filter(function (_a) {
                                var versions = _a.versions;
                                return versions.backend;
                            }), map(function (_a) {
                                var versions = _a.versions;
                                return versions;
                            }), take(1)))
                                .pipe(delay(this.SCRIPT_EXECUTION_WAIT_TIME), filter(function (_a) {
                                var _b = tslib_1.__read(_a, 2), user = _b[0], scriptEvent = _b[1];
                                return !!(scriptEvent && user);
                            }))
                                .subscribe(function (_a) {
                                var _b = tslib_1.__read(_a, 3), user = _b[0], scriptEvent = _b[1], versions = _b[2];
                                var instanceId = _this.getInstanceIdFromUrl();
                                if (identify) {
                                    _this.identify(user, currentTenant, instanceId, versions.ui.ngx, versions.backend);
                                }
                                _this.isScriptLoaded = true;
                                _this.tagFunction$.next(_this.tagFunction);
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Identifies the user/account at Gainsight.
     * @param user The user which is given to Gainsight.
     * @param tenant The tenant which is given to Gainsight.
     * @param versionUI The UI version used.
     * @param versionBE The BE version used.
     */
    GainsightService.prototype.identify = function (user, tenant, instanceId, versionUI, versionBE) {
        var windowRef = window;
        var userId = user.id, email = user.email, userName = user.userName, firstName = user.firstName, lastName = user.lastName;
        var name = tenant.name, customProperties = tenant.customProperties;
        var externalReference = customProperties && customProperties.externalReference;
        windowRef[this.GAINSIGHT_GLOBAL_SCOPE]('identify', {
            id: userId + "_" + name + "_" + instanceId,
            email: email,
            userName: userName,
            firstName: firstName,
            lastName: lastName,
            versionUI: versionUI,
            versionBE: versionBE,
            userLanguage: TranslateService.defaultLang(),
            instanceId: instanceId,
            externalReference: externalReference
        }, {
            id: name + "_" + instanceId,
            instanceId: instanceId
        });
    };
    GainsightService.prototype.triggerEvent = function (eventName, props) {
        if (this.tagFunction && eventName) {
            eventName = eventName.replace(/ /g, '_');
            this.tagFunction('track', eventName, props);
        }
    };
    /**
     * Checks if the Gainsight's tag should be loaded.
     * The decision to load Gainsight will depend on custom properties and functional cookies.
     * @param customProperties Tenant's customProperties.
     */
    GainsightService.prototype.shouldLoadGainsightTag = function (customProperties) {
        return (this.cookieBannerService.isConfigCookiePreferencesDefined() &&
            this.cookieBannerService.isFunctionalCookieEnabled() &&
            !this.isGainsightDisabled(customProperties));
    };
    GainsightService.prototype.canEditProductExperienceSettings = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentTenant, customProperties, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        currentTenant = this.appState.currentTenant.value;
                        customProperties = currentTenant.customProperties;
                        _a = !!this.gainsightKey;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getGainsightKey()];
                    case 1:
                        _a = ((_b.sent()) &&
                            this.cookieBannerService.isConfigCookiePreferencesDefined() &&
                            !this.isGainsightDisabled(customProperties) &&
                            !!this.cookieBannerService.getUserCookiePreferences());
                        _b.label = 2;
                    case 2: return [2 /*return*/, (_a)];
                }
            });
        });
    };
    GainsightService.prototype.isGainsightDisabled = function (customProperties) {
        var gainsightEnabled = customProperties && customProperties.gainsightEnabled;
        return gainsightEnabled === false;
    };
    GainsightService.prototype.loadScriptTag = function (scriptTag, key) {
        try {
            var windowRef_1 = window;
            var firstTag = document.getElementsByTagName('script')[0];
            var protocol = location.protocol;
            var gainsightGlobalScope_1 = this.GAINSIGHT_GLOBAL_SCOPE;
            scriptTag.src = protocol + "//" + this.GAINSIGHT_URL + key;
            (windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] =
                windowRef_1[this.GAINSIGHT_GLOBAL_SCOPE] ||
                    // tslint:disable-next-line:only-arrow-functions
                    function () {
                        (windowRef_1[gainsightGlobalScope_1].q = windowRef_1[gainsightGlobalScope_1].q || []).push(arguments);
                    }),
                (windowRef_1[gainsightGlobalScope_1].p = key);
            scriptTag.async = true;
            firstTag.parentNode.insertBefore(scriptTag, firstTag);
        }
        catch (ex) {
            console.warn('Failed to load Gainsight PX', ex);
        }
    };
    GainsightService.prototype.getInstanceIdFromUrl = function () {
        var hostName = location.hostname;
        return hostName.substring(hostName.indexOf('.') + 1);
    };
    GainsightService.ctorParameters = function () { return [
        { type: AppStateService },
        { type: OptionsService },
        { type: CookieBannerService },
        { type: UserPreferencesService }
    ]; };
    GainsightService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function GainsightService_Factory() { return new GainsightService(i0.ɵɵinject(i1.AppStateService), i0.ɵɵinject(i2.OptionsService), i0.ɵɵinject(i3.CookieBannerService), i0.ɵɵinject(i4.UserPreferencesService)); }, token: GainsightService, providedIn: "root" });
    GainsightService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], GainsightService);
    return GainsightService;
}());
export { GainsightService };
//# sourceMappingURL=data:application/json;base64,