import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { CookieBannerService } from '../bootstrap/cookie-banner/cookie-banner.service';
import { AppStateService } from '../common/ui-state.service';
import { GainsightService } from './gainsight.service';
import { ProductExperienceDirective } from './product-experience.directive';
/**
 * This module enables an tenant to activate the product experience
 * software [Gainsight](https://www.gainsight.com/product-experience/) to help
 * and track user actions. Gainsight is only activated, if the tenant custom
 * property `gainsightEnabled` is set to true.
 */
var ProductExperienceModule = /** @class */ (function () {
    function ProductExperienceModule(appState, gainsightService, cookieBannerService) {
        var _this = this;
        this.appState = appState;
        this.gainsightService = gainsightService;
        this.cookieBannerService = cookieBannerService;
        combineLatest([
            this.appState.currentTenant.pipe(filter(Boolean)),
            this.cookieBannerService.isCookieBannerShowed$
        ]).subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 2), currentTenant = _b[0], isCookieBannerShowed = _b[1];
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var customProperties, name, _c;
                return tslib_1.__generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (isCookieBannerShowed) {
                                return [2 /*return*/];
                            }
                            customProperties = currentTenant.customProperties, name = currentTenant.name;
                            _c = this.gainsightService.shouldLoadGainsightTag(customProperties);
                            if (!_c) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.gainsightService.isGainsightDisabledInUserPreferences()];
                        case 1:
                            _c = !(_d.sent());
                            _d.label = 2;
                        case 2:
                            if (_c) {
                                this.gainsightService.loadTag(currentTenant);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        });
    }
    ProductExperienceModule.ctorParameters = function () { return [
        { type: AppStateService },
        { type: GainsightService },
        { type: CookieBannerService }
    ]; };
    ProductExperienceModule = tslib_1.__decorate([
        NgModule({
            declarations: [ProductExperienceDirective],
            exports: [ProductExperienceDirective],
            providers: [GainsightService]
        })
    ], ProductExperienceModule);
    return ProductExperienceModule;
}());
export { ProductExperienceModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1leHBlcmllbmNlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3Byb2R1Y3QtZXhwZXJpZW5jZS9wcm9kdWN0LWV4cGVyaWVuY2UubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RTs7Ozs7R0FLRztBQU1IO0lBQ0UsaUNBQ1UsUUFBeUIsRUFDekIsZ0JBQWtDLEVBQ2xDLG1CQUF3QztRQUhsRCxpQkFvQkM7UUFuQlMsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBRWhELGFBQWEsQ0FBQztZQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQWlCLE9BQU8sQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUI7U0FDL0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFPLEVBQXFDO2dCQUFyQywwQkFBcUMsRUFBcEMscUJBQWEsRUFBRSw0QkFBb0I7Ozs7Ozs0QkFDdEQsSUFBSSxvQkFBb0IsRUFBRTtnQ0FDeEIsc0JBQU87NkJBQ1I7NEJBQ08sZ0JBQWdCLEdBQVcsYUFBYSxpQkFBeEIsRUFBRSxJQUFJLEdBQUssYUFBYSxLQUFsQixDQUFtQjs0QkFFL0MsS0FBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtxQ0FBOUQsd0JBQThEOzRCQUM1RCxxQkFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0NBQW9DLEVBQUUsRUFBQTs7NEJBQXBFLEtBQUEsQ0FBQyxDQUFDLFNBQWtFLENBQUMsQ0FBQTs7OzRCQUZ2RSxRQUdFO2dDQUNBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7NkJBQzlDOzs7OztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQW5CbUIsZUFBZTtnQkFDUCxnQkFBZ0I7Z0JBQ2IsbUJBQW1COztJQUp2Qyx1QkFBdUI7UUFMbkMsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7WUFDMUMsT0FBTyxFQUFFLENBQUMsMEJBQTBCLENBQUM7WUFDckMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDOUIsQ0FBQztPQUNXLHVCQUF1QixDQXNCbkM7SUFBRCw4QkFBQztDQUFBLEFBdEJELElBc0JDO1NBdEJZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQ3VycmVudFRlbmFudCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvb2tpZUJhbm5lclNlcnZpY2UgfSBmcm9tICcuLi9ib290c3RyYXAvY29va2llLWJhbm5lci9jb29raWUtYmFubmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2FpbnNpZ2h0U2VydmljZSB9IGZyb20gJy4vZ2FpbnNpZ2h0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmUgfSBmcm9tICcuL3Byb2R1Y3QtZXhwZXJpZW5jZS5kaXJlY3RpdmUnO1xuLyoqXG4gKiBUaGlzIG1vZHVsZSBlbmFibGVzIGFuIHRlbmFudCB0byBhY3RpdmF0ZSB0aGUgcHJvZHVjdCBleHBlcmllbmNlXG4gKiBzb2Z0d2FyZSBbR2FpbnNpZ2h0XShodHRwczovL3d3dy5nYWluc2lnaHQuY29tL3Byb2R1Y3QtZXhwZXJpZW5jZS8pIHRvIGhlbHBcbiAqIGFuZCB0cmFjayB1c2VyIGFjdGlvbnMuIEdhaW5zaWdodCBpcyBvbmx5IGFjdGl2YXRlZCwgaWYgdGhlIHRlbmFudCBjdXN0b21cbiAqIHByb3BlcnR5IGBnYWluc2lnaHRFbmFibGVkYCBpcyBzZXQgdG8gdHJ1ZS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbUHJvZHVjdEV4cGVyaWVuY2VEaXJlY3RpdmVdLFxuICBwcm92aWRlcnM6IFtHYWluc2lnaHRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0RXhwZXJpZW5jZU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGdhaW5zaWdodFNlcnZpY2U6IEdhaW5zaWdodFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjb29raWVCYW5uZXJTZXJ2aWNlOiBDb29raWVCYW5uZXJTZXJ2aWNlXG4gICkge1xuICAgIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VGVuYW50LnBpcGUoZmlsdGVyPElDdXJyZW50VGVuYW50PihCb29sZWFuKSksXG4gICAgICB0aGlzLmNvb2tpZUJhbm5lclNlcnZpY2UuaXNDb29raWVCYW5uZXJTaG93ZWQkXG4gICAgXSkuc3Vic2NyaWJlKGFzeW5jIChbY3VycmVudFRlbmFudCwgaXNDb29raWVCYW5uZXJTaG93ZWRdKSA9PiB7XG4gICAgICBpZiAoaXNDb29raWVCYW5uZXJTaG93ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBjdXN0b21Qcm9wZXJ0aWVzLCBuYW1lIH0gPSBjdXJyZW50VGVuYW50O1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2Uuc2hvdWxkTG9hZEdhaW5zaWdodFRhZyhjdXN0b21Qcm9wZXJ0aWVzKSAmJlxuICAgICAgICAhKGF3YWl0IHRoaXMuZ2FpbnNpZ2h0U2VydmljZS5pc0dhaW5zaWdodERpc2FibGVkSW5Vc2VyUHJlZmVyZW5jZXMoKSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UubG9hZFRhZyhjdXJyZW50VGVuYW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19