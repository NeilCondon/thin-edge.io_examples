import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { flatten } from 'lodash-es';
import { forkJoin, from, isObservable, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { HOOK_DYNAMIC_PROVIDER_CONFIG } from './provider-configuration-hook';
var ProviderConfigurationTabFactory = /** @class */ (function () {
    function ProviderConfigurationTabFactory(config, router, injector) {
        this.router = router;
        this.injector = injector;
        this.config = flatten(config);
    }
    ProviderConfigurationTabFactory.prototype.get = function () {
        var _this = this;
        if (!this.config || !this.config.length) {
            return;
        }
        var configForRoute = this.config.find(function (c) {
            return c.tab
                ? _this.router.url === '/' + _this.getNodeTabPath(c.navigation.path, c.tab.path) ||
                    _this.router.url.startsWith('/' + c.navigation.path.replace(/^\/|\/$/g, ''))
                : false;
        });
        var filteredRoutes = configForRoute
            ? this.config.filter(function (c) {
                return c.navigation.path.replace(/^\/|\/$/g, '') ===
                    configForRoute.navigation.path.replace(/^\/|\/$/g, '') && c.tab;
            })
            : [];
        var canActivate = filteredRoutes
            .map(function (c) {
            return c.tab.canActivate && c.tab.canActivate.length
                ? c.tab.canActivate.map(function (ca) { return _this.injector.get(ca); })
                : undefined;
        })
            .map(this.checkCanActivate.bind(this));
        return canActivate.length > 0
            ? forkJoin(canActivate).pipe(map(function (canActivateResult) {
                return filteredRoutes
                    .map(function (c, index) {
                    var tab = tslib_1.__assign({}, c.tab, { path: _this.getNodeTabPath(c.navigation.path, c.tab.path) });
                    return canActivateResult[index] ? tab : undefined;
                })
                    .filter(function (el) { return !!el; });
            }))
            : [];
    };
    ProviderConfigurationTabFactory.prototype.checkCanActivate = function (ca) {
        if (!!ca && ca.length) {
            var canActivateResult = ca
                .map(function (canActivate) { return canActivate.canActivate(undefined, undefined); })
                .map(this.wrapIntoObservable.bind(this));
            return forkJoin(canActivateResult).pipe(map(function (caResult) { return caResult.reduce(function (acc, curr) { return acc && curr; }); }));
        }
        return of(true);
    };
    ProviderConfigurationTabFactory.prototype.isPromise = function (obj) {
        return !!obj && typeof obj.then === 'function';
    };
    ProviderConfigurationTabFactory.prototype.wrapIntoObservable = function (value) {
        if (isObservable(value)) {
            return value;
        }
        if (this.isPromise(value)) {
            return from(value);
        }
        return of(value);
    };
    ProviderConfigurationTabFactory.prototype.getNodeTabPath = function (nodePath, tabPath) {
        return nodePath.replace(/^\/|\/$/g, '') + "/" + tabPath.replace(/^\/|\/$/g, '');
    };
    ProviderConfigurationTabFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DYNAMIC_PROVIDER_CONFIG,] }] },
        { type: Router },
        { type: Injector }
    ]; };
    ProviderConfigurationTabFactory = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(0, Optional()),
        tslib_1.__param(0, Inject(HOOK_DYNAMIC_PROVIDER_CONFIG))
    ], ProviderConfigurationTabFactory);
    return ProviderConfigurationTabFactory;
}());
export { ProviderConfigurationTabFactory };
//# sourceMappingURL=data:application/json;base64,