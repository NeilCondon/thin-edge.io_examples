import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ɵdefineHiddenProp } from '@ngx-formly/core';
import { find, get, mapValues, pick } from 'lodash-es';
import { BehaviorSubject, combineLatest, from, merge, of, Subject } from 'rxjs';
import { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { AlertService } from '../alert/alert.service';
import { Permissions, Status } from '../common/index';
import { C8yJSONSchema } from '../dynamic-forms/json-schema/c8y-json-schema.service';
import { ModalService } from '../modal/modal.service';
import { ProviderConfigurationService } from './service/provider-configuration.service';
import { ProviderDefinitionsService } from './service/provider-definitions.service';
var ProviderConfigurationComponent = /** @class */ (function () {
    function ProviderConfigurationComponent(permissions, activatedRoute, modalService, alertService, providerDefinitionsService, providerConfigurationService, jsonschema) {
        var _this = this;
        this.permissions = permissions;
        this.activatedRoute = activatedRoute;
        this.modalService = modalService;
        this.alertService = alertService;
        this.providerDefinitionsService = providerDefinitionsService;
        this.providerConfigurationService = providerConfigurationService;
        this.jsonschema = jsonschema;
        this.layout$ = this.activatedRoute.data.pipe(map(function (config) { return config.layout; }), tap(function (layout) { return (_this.layout = layout); }), tap(function (layout) {
            _this.options.formState.disabled = !_this.permissions.hasAllRoles(layout.saveRoles);
            _this.beforeSaveHook = layout.beforeSaveHook;
        }));
        this.allRoles$ = this.layout$.pipe(map(function (layout) { return tslib_1.__spread((layout.deleteRoles || []), (layout.saveRoles || [])); }));
        this.changeProvider$ = new BehaviorSubject(null);
        this.providerInput$ = new BehaviorSubject('');
        this.form = new FormGroup({});
        this.fields = [];
        this.options = {
            formState: {
                disabled: false
            }
        };
        this.reload$ = new BehaviorSubject(null);
        this.updatedConfiguration$ = new Subject();
    }
    ProviderConfigurationComponent.prototype.ngOnInit = function () {
        var _this = this;
        var allProviders$ = from(this.providerDefinitionsService.list()).pipe(map(function (result) { return result.data; }), shareReplay(1));
        this.providers$ = combineLatest(allProviders$, this.providerInput$).pipe(map(function (_a) {
            var _b = tslib_1.__read(_a, 2), providers = _b[0], input = _b[1];
            return input
                ? providers.filter(function (el) { return el.displayName.toLowerCase().indexOf(input.toLowerCase()) >= 0; })
                : providers;
        }), shareReplay(1));
        this.configuration$ = merge(this.updatedConfiguration$, this.reload$.pipe(switchMap(function () {
            return from(_this.providerConfigurationService.detail()).pipe(catchError(function () { return of({}); }));
        }), map(function (result) { return result.data; }))).pipe(map(this.removeEncryptedValues), shareReplay(1));
        this.selectedProvider$ = combineLatest(allProviders$, this.configuration$, this.changeProvider$).pipe(tap(function (_a) {
            var _b = tslib_1.__read(_a, 3), _ = _b[0], configuration = _b[1], newProvider = _b[2];
            return (_this.model = newProvider
                ? pick(_this.model, 'sms.senderName', 'sms.senderAddress')
                : configuration);
        }), map(function (_a) {
            var _b = tslib_1.__read(_a, 3), providers = _b[0], configuration = _b[1], newProvider = _b[2];
            return newProvider ||
                find(providers, function (provider) {
                    return _this.matchProvider(provider, configuration);
                });
        }), tap(function (provider) {
            if (provider) {
                var config = _this.jsonschema.toFieldConfig(get(provider, 'schema'));
                if (config.fieldGroup) {
                    config.fieldGroup.forEach(function (fieldConfig) {
                        ɵdefineHiddenProp(fieldConfig, '_keyPath', {
                            key: fieldConfig.key,
                            path: [fieldConfig.key]
                        });
                        fieldConfig.expressionProperties = {
                            'templateOptions.disabled': 'formState.disabled'
                        };
                    });
                }
                _this.fields = [config];
                _this.form = new FormGroup({});
            }
        }), shareReplay(1));
    };
    ProviderConfigurationComponent.prototype.saveProviderConfiguration = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modelToSave, _a, res, err_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!!this.beforeSaveHook) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.beforeSaveHook(this.model, this.fields)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a = this.model;
                        _b.label = 3;
                    case 3:
                        modelToSave = _a;
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.providerConfigurationService.update(modelToSave)];
                    case 5:
                        res = _b.sent();
                        this.changeProvider$.next(null);
                        this.updatedConfiguration$.next(res.data);
                        this.alertService.success(this.layout.configurationUpdatedSuccessMsg);
                        this.form.markAsPristine();
                        return [3 /*break*/, 7];
                    case 6:
                        err_1 = _b.sent();
                        this.alertService.addServerFailure(err_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    ProviderConfigurationComponent.prototype.deleteProviderConfiguration = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var err_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.modalService.confirm(this.layout.deleteConfigurationModalTitle, this.layout.deleteConfigurationModalBody, Status.DANGER, {
                                ok: this.layout.deleteConfigurationModalOkBtnLabel,
                                cancel: this.layout.deleteConfigurationModalCancelBtnLabel
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.providerConfigurationService.delete()];
                    case 2:
                        _a.sent();
                        this.reload$.next();
                        this.alertService.success(this.layout.configurationDeletedSuccessMsg);
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        if (err_2) {
                            this.alertService.addServerFailure(err_2);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProviderConfigurationComponent.prototype.removeEncryptedValues = function (configuration) {
        return mapValues(configuration, function (value) { return (value === '<<Encrypted>>' ? undefined : value); });
    };
    ProviderConfigurationComponent.prototype.matchProvider = function (provider, configuration) {
        return (get(configuration, 'provider') === provider.id ||
            get(configuration, 'providerName') === provider.id);
    };
    ProviderConfigurationComponent.ctorParameters = function () { return [
        { type: Permissions },
        { type: ActivatedRoute },
        { type: ModalService },
        { type: AlertService },
        { type: ProviderDefinitionsService },
        { type: ProviderConfigurationService },
        { type: C8yJSONSchema }
    ]; };
    ProviderConfigurationComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-sms-gateway',
            template: "<c8y-title>\n  {{ (layout$ | async).pageTitle | translate }}\n</c8y-title>\n\n<div class=\"row\">\n  <div class=\"col-md-8 col-xs-12\">\n    <form class=\"card card--fullpage\" (ngSubmit)=\"saveProviderConfiguration()\">\n      <div class=\"card-header separator\">\n        <h4 class=\"card-title\">\n          {{ (layout$ | async).cardTitle | translate }}\n        </h4>\n      </div>\n      <div class=\"inner-scroll\">\n        <div class=\"card-block\">\n          <p *ngIf=\"!!(layout$ | async).description\" class=\"m-b-8\">\n            {{ (layout$ | async).description | translate }}\n          </p>\n          <c8y-form-group>\n            <label for=\"providerName\">{{ (layout$ | async).providerName | translate }}</label>\n            <c8y-typeahead\n              [disabled]=\"!permissions.hasAllRoles((layout$ | async).saveRoles)\"\n              [ngModel]=\"selectedProvider$ | async\"\n              [displayProperty]=\"'displayName'\"\n              name=\"providerName\"\n              placeholder=\"{{ (layout$ | async).providerNamePlaceholder | translate }}\"\n              (onSearch)=\"providerInput$.next($event)\"\n              [allowFreeEntries]=\"false\"\n              [required]=\"true\"\n              [container]=\"'body'\"\n            >\n              <c8y-li\n                *ngFor=\"let provider of providers$ | async\"\n                class=\"p-l-8 p-r-8 c8y-list__item--link\"\n                (click)=\"changeProvider$.next(provider); providerInput$.next('')\"\n                [active]=\"(selectedProvider$ | async) === provider\"\n              >\n                <c8y-highlight\n                  [text]=\"provider.displayName || '--'\"\n                  [pattern]=\"providerInput$ | async\"\n                ></c8y-highlight>\n              </c8y-li>\n            </c8y-typeahead>\n            <c8y-messages\n              ><c8y-message\n                name=\"notExisting\"\n                [text]=\"(layout$ | async).providerNameNoMatchesHint | translate\"\n              ></c8y-message>\n            </c8y-messages>\n          </c8y-form-group>\n          <formly-form\n            *ngIf=\"selectedProvider$ | async\"\n            [form]=\"form\"\n            [fields]=\"fields\"\n            [model]=\"model\"\n            [options]=\"options\"\n          ></formly-form>\n        </div>\n      </div>\n      <div class=\"card-footer separator\" *c8yIfAllowed=\"allRoles$ | async; allowAny\">\n        <button\n          *c8yIfAllowed=\"(layout$ | async).deleteRoles\"\n          class=\"btn btn-default\"\n          type=\"button\"\n          (click)=\"deleteProviderConfiguration()\"\n          [disabled]=\"\n            !(configuration$ | async)?.provider && !(configuration$ | async)?.providerName\n          \"\n          title=\"{{ (layout$ | async).deleteBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).deleteBtnLabel | translate }}\n        </button>\n        <button\n          *c8yIfAllowed=\"(layout$ | async).saveRoles\"\n          class=\"btn btn-primary\"\n          type=\"submit\"\n          [disabled]=\"form.invalid || form.pristine\"\n          title=\"{{ (layout$ | async).saveBtnLabel | translate }}\"\n        >\n          {{ (layout$ | async).saveBtnLabel | translate }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n",
            providers: [ProviderConfigurationService, ProviderDefinitionsService]
        })
    ], ProviderConfigurationComponent);
    return ProviderConfigurationComponent;
}());
export { ProviderConfigurationComponent };
//# sourceMappingURL=data:application/json;base64,