import * as tslib_1 from "tslib";
import { Component, Input, HostBinding } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var RangeDisplayComponent = /** @class */ (function () {
    function RangeDisplayComponent(sanitizer) {
        this.sanitizer = sanitizer;
        this.config = {};
    }
    Object.defineProperty(RangeDisplayComponent.prototype, "inlineStyle", {
        get: function () {
            this.config = this.config || {};
            if (!this.config.min) {
                this.config.min = 0;
            }
            if (!this.config.max) {
                this.config.max = 100;
            }
            if (this.config.fractionSize) {
                this.config.current = parseFloat(this.config.current.toFixed(this.config.fractionSize));
            }
            return this.sanitizer.bypassSecurityTrustStyle("\n          --range-min: " + this.config.min + ";\n          --range-max: " + this.config.max + ";\n          --full-range: " + (this.config.max - this.config.min) + ";\n          --measurement-target: " + ((this.config.target - this.config.min) * 100) /
                (this.config.max - this.config.min) + "%;\n          --measurement-current: " + ((this.config.current - this.config.min) * 100) /
                (this.config.max - this.config.min) + "%;\n          --range-y-min: " + ((this.config.yellowRangeMin - this.config.min) * 100) /
                (this.config.max - this.config.min) + "%;\n          --range-y-max: " + ((this.config.yellowRangeMax - this.config.min) /
                (this.config.max - this.config.min)) *
                100 + "%;\n          --range-r-min: " + ((this.config.redRangeMin - this.config.min) * 100) /
                (this.config.max - this.config.min) + "%;\n          --range-r-max: " + ((this.config.redRangeMax - this.config.min) /
                (this.config.max - this.config.min)) *
                100 + "%;\n        ");
        },
        enumerable: true,
        configurable: true
    });
    RangeDisplayComponent.prototype.checkTarget = function () {
        return (this.config.target !== undefined &&
            (this.config.target >= this.config.min && this.config.target <= this.config.max));
    };
    RangeDisplayComponent.prototype.rulerCalc = function (index) {
        var num = this.config.min + ((this.config.max - this.config.min) / 10) * index;
        if (this.config.fractionSize) {
            return parseFloat(num.toFixed(this.config.fractionSize));
        }
        return parseFloat(num.toFixed(2));
    };
    RangeDisplayComponent.prototype.trackByIndex = function (index, el) {
        return index;
    };
    RangeDisplayComponent.prototype.isRedRangeDisplayed = function () {
        var _a = this.config, redRangeMin = _a.redRangeMin, redRangeMax = _a.redRangeMax;
        return this.isRangeDisplayed(redRangeMin, redRangeMax);
    };
    RangeDisplayComponent.prototype.isYellowRangeDisplayed = function () {
        var _a = this.config, yellowRangeMin = _a.yellowRangeMin, yellowRangeMax = _a.yellowRangeMax;
        return this.isRangeDisplayed(yellowRangeMin, yellowRangeMax);
    };
    RangeDisplayComponent.prototype.isRangeDisplayed = function (rangeMin, rangeMax) {
        return rangeMin === 0 || rangeMax === 0 || rangeMin && rangeMax;
    };
    RangeDisplayComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    tslib_1.__decorate([
        Input()
    ], RangeDisplayComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        HostBinding('attr.style')
    ], RangeDisplayComponent.prototype, "inlineStyle", null);
    RangeDisplayComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-range-display',
            template: "<div [ngClass]=\"{ 'range-display--vertical': config.orientation === 'vertical' }\">\n  <div class=\"range-display\">\n    <div class=\"range-display__range\">\n      <div class=\"range-display__range__unit\">\n        {{ config.unit }}\n      </div>\n      <div *ngIf=\"isRedRangeDisplayed()\" class=\"range-display__range__max\"></div>\n      <div\n        *ngIf=\"isYellowRangeDisplayed()\"\n        class=\"range-display__range__min\"\n      ></div>\n      <div\n        *ngIf=\"checkTarget()\"\n        class=\"range-display__range__target\"\n        attr.data-label=\"{{ config.target }} {{ config.unit }}\"\n        title=\"{{ 'Target' | translate }}: {{ config.target }} {{ config.unit }}\"\n      ></div>\n      <div\n        *ngIf=\"\n          config.current != undefined &&\n          config.current >= config.min &&\n          config.current <= config.max\n        \"\n        class=\"range-display__range__current\"\n        attr.data-label=\"{{ config.current }} {{ config.unit }} &#xa; {{ config.time | c8yDate }}\"\n        title=\"{{ 'Current' | translate }}: {{ config.current }} {{ config.unit }} | {{ config.time | c8yDate }}\"\n      ></div>\n    </div>\n    <div class=\"range-display__ruler\">\n      <div\n        *ngFor=\"let x of [].constructor(10); let index = index; trackBy: trackByIndex\"\n        attr.data-label=\"{{rulerCalc(index)}}\"\n        class=\"range-display__tick\"\n      ></div>\n      <div attr.data-label=\"{{ config.max || 100 | number }}\" class=\"range-display__tick\"></div>\n    </div>\n  </div>\n</div>"
        })
    ], RangeDisplayComponent);
    return RangeDisplayComponent;
}());
export { RangeDisplayComponent };
//# sourceMappingURL=data:application/json;base64,