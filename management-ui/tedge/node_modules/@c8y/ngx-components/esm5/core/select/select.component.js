import * as tslib_1 from "tslib";
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { gettext } from '../i18n/gettext';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild, ContentChildren } from '@angular/core';
import { ListItemComponent } from '../list-group/list-item.component';
var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
        this.placeholder = gettext('Select item');
        this.applyLabel = gettext('Apply');
        this.disableApplyOnNoSelection = false;
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.searchFilter = null;
        this.sizeToShowFilter = 5;
        this.labelsForSelectAll = {
            all: gettext('All'),
            allFiltered: gettext('All filtered')
        };
        this.showAllLabel = false;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    SelectComponent.prototype.preventClick = function (evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    };
    SelectComponent.prototype.isOpenChange = function (isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
            this.searchFilter = null;
        }
        else {
            this.stopClicks = false;
        }
    };
    SelectComponent.prototype.outterSelected = function (item) {
        var selected = this.selected;
        var isSelected = function () { return false; };
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = function (i) { return selected.indexOf(i) > -1; };
        }
        return isSelected(item);
    };
    SelectComponent.prototype.isSelected = function (item) {
        return this.itemsSelected.has(item);
    };
    SelectComponent.prototype.isAllItemsSelected = function () {
        return this.itemsSelected.size === this.items.length;
    };
    SelectComponent.prototype.isAllFilteredSelected = function () {
        return this.itemsSelected.size === this.filteredItems.length;
    };
    SelectComponent.prototype.isNoItemSelected = function () {
        return !this.itemsSelected.size;
    };
    SelectComponent.prototype.applyChanges = function () {
        var selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    };
    SelectComponent.prototype.selectAll = function (checked) {
        var _this = this;
        this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
    };
    SelectComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.updateItems) {
            this.updateItems.subscribe(function () {
                _this.updateSelected();
                _this.updateLabel();
                _this.showAllLabel = _this.isAllItemsSelected();
            });
        }
    };
    SelectComponent.prototype.onChangeItem = function (checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    };
    SelectComponent.prototype.updateFiltered = function (term) {
        if (term) {
            var search_1 = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(function (_a) {
                var name = _a.name;
                return search_1.test(name);
            });
        }
        else {
            this.filteredItems = this.items;
        }
    };
    SelectComponent.prototype.getSelectAllToggleStatus = function () {
        var label = this.getLabel();
        var checked = this.isAllSelected();
        var indeterminate = !checked && this.itemsSelected.size > 0;
        return { label: label, checked: checked, indeterminate: indeterminate };
    };
    SelectComponent.prototype.ngOnChanges = function (changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
            this.showAllLabel = this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.ngOnDestroy = function () {
        if (this.updateItems && !this.updateItems.closed) {
            this.updateItems.unsubscribe();
        }
    };
    SelectComponent.prototype.updateLabel = function () {
        var _this = this;
        var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(function (_a) {
                var name = _a.name;
                return name;
            }).join(', ');
        }
    };
    SelectComponent.prototype.updateSelected = function () {
        var _this = this;
        var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
        itemsSelected.clear();
        items.forEach(function (item) {
            if (_this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    };
    SelectComponent.prototype.isAllSelected = function () {
        if (this.getLabel() === this.labelsForSelectAll.allFiltered) {
            return this.isAllFilteredSelected();
        }
        else {
            return this.isAllItemsSelected();
        }
    };
    SelectComponent.prototype.getLabel = function () {
        return this.searchFilter ? this.labelsForSelectAll.allFiltered : this.labelsForSelectAll.all;
    };
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selectedLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "applyLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "updateItems", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "disableApplyOnNoSelection", void 0);
    tslib_1.__decorate([
        Output()
    ], SelectComponent.prototype, "onChange", void 0);
    tslib_1.__decorate([
        ViewChild(BsDropdownDirective, { static: false })
    ], SelectComponent.prototype, "dropdown", void 0);
    tslib_1.__decorate([
        ContentChildren(ListItemComponent)
    ], SelectComponent.prototype, "liChildren", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event'])
    ], SelectComponent.prototype, "preventClick", null);
    SelectComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-select',
            template: "<div\n  class=\"c8y-child-assets-selector dropdown fit-w\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">\n      <ng-container *ngIf=\"showAllLabel\">{{ 'All' | translate }}</ng-container>\n      <ng-container *ngIf=\"!showAllLabel\">{{ labelText | translate }}</ng-container>\n    </span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">\n      {{ placeholder | translate }}\n    </span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <ng-content select=\"c8y-li\"></ng-content>\n    <ng-container *ngIf=\"liChildren.length === 0\">\n      <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n        <div class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Filter' | translate }}\u2026\"\n            (keyup)=\"updateFiltered($event.target.value)\"\n            [(ngModel)]=\"searchFilter\"\n          />\n          <span class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"!textFilter\"></i>\n            <i c8yIcon=\"times\" class=\"text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n          </span>\n        </div>\n      </li>\n\n      <li class=\"multiselect-item\">\n        <label\n          [title]=\"getSelectAllToggleStatus().label\"\n          class=\"c8y-checkbox input-sm\"\n          ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n        >\n          <input\n            type=\"checkbox\"\n            [checked]=\"getSelectAllToggleStatus().checked\"\n            (change)=\"selectAll($event.target.checked)\"\n            [indeterminate]=\"getSelectAllToggleStatus().indeterminate\"\n            class=\"m-t-0\"\n          />\n          <span></span>\n          <span class=\"label-text\">\n            {{ getSelectAllToggleStatus().label }}\n          </span>\n        </label>\n      </li>\n\n      <li class=\"multiselect-item-container\">\n        <ul class=\"list-unstyled\">\n          <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n            <label title=\"{{ item.name | translate }}\" class=\"c8y-checkbox input-sm text-truncate\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isSelected(item)\"\n                (change)=\"onChangeItem($event.target.checked, item)\"\n                class=\"m-t-0\"\n              />\n              <span></span>\n              <span class=\"label-text\">\n                {{ item.name | translate }}\n              </span>\n            </label>\n          </li>\n        </ul>\n      </li>\n      <li class=\"divider\"></li>\n      <li class=\"bg-white\">\n        <button\n          title=\"{{ applyLabel | translate }}\"\n          class=\"btn btn-primary btn-block\"\n          [disabled]=\"disableApplyOnNoSelection && isNoItemSelected()\"\n          (click)=\"applyChanges()\"\n        >\n          {{ applyLabel | translate }}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
        })
    ], SelectComponent);
    return SelectComponent;
}());
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,