import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { ModelCellRendererComponent } from './model.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
var ModelDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(ModelDeviceGridColumn, _super);
    function ModelDeviceGridColumn(initialColumnConfig) {
        var _this = _super.call(this, initialColumnConfig) || this;
        var hardwareModelPath = 'c8y_Hardware.model';
        var vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
        _this.name = 'model';
        _this.header = gettext('Model');
        _this.cellRendererComponent = ModelCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    models: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'models',
                    title: gettext('Show devices with model'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'models[]',
                            notitle: true,
                            placeholder: gettext('e.g. ModelName, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.models.length) {
                    filter.__or = (_a = {},
                        _a[hardwareModelPath] = { __in: model.models },
                        _a[vendingModelPath] = { __in: model.models },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
        };
        return _this;
    }
    return ModelDeviceGridColumn;
}(BaseDeviceGridColumn));
export { ModelDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuZGV2aWNlLWdyaWQtY29sdW1uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZC8iLCJzb3VyY2VzIjpbImNvbHVtbnMvbW9kZWwuZGV2aWNlLWdyaWQtY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBRTVEO0lBQTJDLGlEQUFvQjtJQUM3RCwrQkFBWSxtQkFBa0M7UUFBOUMsWUFDRSxrQkFBTSxtQkFBbUIsQ0FBQyxTQXNEM0I7UUFwREMsSUFBTSxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQztRQUMvQyxJQUFNLGdCQUFnQixHQUFHLGdFQUFnRSxDQUFDO1FBRTFGLEtBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ3BCLEtBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLEtBQUksQ0FBQyxxQkFBcUIsR0FBRywwQkFBMEIsQ0FBQztRQUV4RCxLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixLQUFJLENBQUMsZUFBZSxHQUFHO1lBQ3JCLE1BQU0sRUFBRTtnQkFDTixJQUFJLEVBQUUsUUFBUTtnQkFDZCxVQUFVLEVBQUU7b0JBQ1YsTUFBTSxFQUFFO3dCQUNOLElBQUksRUFBRSxPQUFPO3dCQUNiLEtBQUssRUFBRTs0QkFDTCxJQUFJLEVBQUUsUUFBUTt5QkFDZjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKO29CQUNFLEdBQUcsRUFBRSxRQUFRO29CQUNiLEtBQUssRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7b0JBQ3pDLEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNsQixLQUFLLEVBQUU7d0JBQ0w7NEJBQ0UsR0FBRyxFQUFFLFVBQVU7NEJBQ2YsT0FBTyxFQUFFLElBQUk7NEJBQ2IsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsbUVBQW1FLENBQ3BFO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxTQUFTLEVBQVQsVUFBVSxLQUFVOztnQkFDbEIsSUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO29CQUN2QixNQUFNLENBQUMsSUFBSTt3QkFDVCxHQUFDLGlCQUFpQixJQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUU7d0JBQzNDLEdBQUMsZ0JBQWdCLElBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRTsyQkFDM0MsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLENBQUM7U0FDOUUsQ0FBQzs7SUFDSixDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBekRELENBQTJDLG9CQUFvQixHQXlEOUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vYmFzZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL21vZGVsLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IGdldHRleHQsIENvbHVtbkNvbmZpZyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY2xhc3MgTW9kZWxEZXZpY2VHcmlkQ29sdW1uIGV4dGVuZHMgQmFzZURldmljZUdyaWRDb2x1bW4ge1xuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29sdW1uQ29uZmlnPzogQ29sdW1uQ29uZmlnKSB7XG4gICAgc3VwZXIoaW5pdGlhbENvbHVtbkNvbmZpZyk7XG5cbiAgICBjb25zdCBoYXJkd2FyZU1vZGVsUGF0aCA9ICdjOHlfSGFyZHdhcmUubW9kZWwnO1xuICAgIGNvbnN0IHZlbmRpbmdNb2RlbFBhdGggPSAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8ubW9kZWwnO1xuXG4gICAgdGhpcy5uYW1lID0gJ21vZGVsJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ01vZGVsJyk7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudDtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBzY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBtb2RlbHM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZvcm06IFtcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ21vZGVscycsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1Nob3cgZGV2aWNlcyB3aXRoIG1vZGVsJyksXG4gICAgICAgICAgYWRkOiBnZXR0ZXh0KCdPcicpLFxuICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGtleTogJ21vZGVsc1tdJyxcbiAgICAgICAgICAgICAgbm90aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGdldHRleHQoXG4gICAgICAgICAgICAgICAgJ2UuZy4gTW9kZWxOYW1lLCB5b3UgY2FuIHVzZSBhbiBhc3RlcmlzayAoKikgYXMgd2lsZGNhcmQgY2hhcmFjdGVyJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyKG1vZGVsOiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBpZiAobW9kZWwubW9kZWxzLmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgW2hhcmR3YXJlTW9kZWxQYXRoXTogeyBfX2luOiBtb2RlbC5tb2RlbHMgfSxcbiAgICAgICAgICAgIFt2ZW5kaW5nTW9kZWxQYXRoXTogeyBfX2luOiBtb2RlbC5tb2RlbHMgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiBoYXJkd2FyZU1vZGVsUGF0aCB9LCB7IHBhdGg6IHZlbmRpbmdNb2RlbFBhdGggfV1cbiAgICB9O1xuICB9XG59XG4iXX0=