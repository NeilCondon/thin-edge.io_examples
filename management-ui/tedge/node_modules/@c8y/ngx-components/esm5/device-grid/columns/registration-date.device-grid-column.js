import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { RegistrationDateCellRendererComponent } from './registration-date.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
var RegistrationDateDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(RegistrationDateDeviceGridColumn, _super);
    function RegistrationDateDeviceGridColumn(initialColumnConfig) {
        var _this = _super.call(this, initialColumnConfig) || this;
        var self = _this;
        _this.path = 'creationTime';
        _this.name = 'registrationDate';
        _this.header = gettext('Registration date');
        _this.cellRendererComponent = RegistrationDateCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    registrationDate: {
                        type: 'object',
                        properties: {
                            after: {
                                type: 'string',
                                format: 'datetime'
                            },
                            before: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            form: [
                {
                    key: 'registrationDate.after',
                    title: gettext('Show devices registered after'),
                    maxDateKey: 'registrationDate.before'
                },
                {
                    key: 'registrationDate.before',
                    title: gettext('And before`date`'),
                    minDateKey: 'registrationDate.after'
                }
            ],
            getFilter: function (model) {
                var _a, _b;
                var filter = {};
                var dates = model && model.registrationDate;
                if (dates && (dates.after || dates.before)) {
                    filter.__and = [];
                    if (dates.after) {
                        var after = self.formatDate(dates.after);
                        filter.__and.push({
                            __or: (_a = {},
                                _a[self.path] = { __gt: after },
                                _a[self.path + ".date"] = { __gt: after },
                                _a)
                        });
                    }
                    if (dates.before) {
                        var before = self.formatDate(dates.before);
                        filter.__and.push({
                            __or: (_b = {},
                                _b[self.path] = { __lt: before },
                                _b[self.path + ".date"] = { __lt: before },
                                _b)
                        });
                    }
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path + ".date" }, { path: _this.path }]
        };
        return _this;
    }
    RegistrationDateDeviceGridColumn.prototype.formatDate = function (dateToFormat) {
        return new Date(dateToFormat).toISOString();
    };
    return RegistrationDateDeviceGridColumn;
}(BaseDeviceGridColumn));
export { RegistrationDateDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cmF0aW9uLWRhdGUuZGV2aWNlLWdyaWQtY29sdW1uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy9kZXZpY2UtZ3JpZC8iLCJzb3VyY2VzIjpbImNvbHVtbnMvcmVnaXN0cmF0aW9uLWRhdGUuZGV2aWNlLWdyaWQtY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNwRyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLHFCQUFxQixDQUFDO0FBRTVEO0lBQXNELDREQUFvQjtJQUN4RSwwQ0FBWSxtQkFBa0M7UUFBOUMsWUFDRSxrQkFBTSxtQkFBbUIsQ0FBQyxTQXlFM0I7UUF2RUMsSUFBTSxJQUFJLEdBQUcsS0FBSSxDQUFDO1FBRWxCLEtBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1FBQzNCLEtBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUM7UUFDL0IsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMzQyxLQUFJLENBQUMscUJBQXFCLEdBQUcscUNBQXFDLENBQUM7UUFFbkUsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLGdCQUFnQixFQUFFO3dCQUNoQixJQUFJLEVBQUUsUUFBUTt3QkFDZCxVQUFVLEVBQUU7NEJBQ1YsS0FBSyxFQUFFO2dDQUNMLElBQUksRUFBRSxRQUFRO2dDQUNkLE1BQU0sRUFBRSxVQUFVOzZCQUNuQjs0QkFDRCxNQUFNLEVBQUU7Z0NBQ04sSUFBSSxFQUFFLFFBQVE7Z0NBQ2QsTUFBTSxFQUFFLFVBQVU7NkJBQ25CO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsR0FBRyxFQUFFLHdCQUF3QjtvQkFDN0IsS0FBSyxFQUFFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztvQkFDL0MsVUFBVSxFQUFFLHlCQUF5QjtpQkFDdEM7Z0JBQ0Q7b0JBQ0UsR0FBRyxFQUFFLHlCQUF5QjtvQkFDOUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztvQkFDbEMsVUFBVSxFQUFFLHdCQUF3QjtpQkFDckM7YUFDRjtZQUNELFNBQVMsRUFBVCxVQUFVLEtBQUs7O2dCQUNiLElBQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztnQkFDdkIsSUFBTSxLQUFLLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDOUMsSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDMUMsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7b0JBQ2xCLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTt3QkFDZixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLElBQUk7Z0NBQ0YsR0FBQyxJQUFJLENBQUMsSUFBSSxJQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtnQ0FDNUIsR0FBSSxJQUFJLENBQUMsSUFBSSxVQUFPLElBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFO21DQUN2Qzt5QkFDRixDQUFDLENBQUM7cUJBQ0o7b0JBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO3dCQUNoQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLElBQUk7Z0NBQ0YsR0FBQyxJQUFJLENBQUMsSUFBSSxJQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtnQ0FDN0IsR0FBSSxJQUFJLENBQUMsSUFBSSxVQUFPLElBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO21DQUN4Qzt5QkFDRixDQUFDLENBQUM7cUJBQ0o7aUJBQ0Y7Z0JBQ0QsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQztTQUNGLENBQUM7UUFFRixLQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixLQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLGtCQUFrQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUssS0FBSSxDQUFDLElBQUksVUFBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pFLENBQUM7O0lBQ0osQ0FBQztJQUVTLHFEQUFVLEdBQXBCLFVBQXFCLFlBQW9CO1FBQ3ZDLE9BQU8sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUNILHVDQUFDO0FBQUQsQ0FBQyxBQWhGRCxDQUFzRCxvQkFBb0IsR0FnRnpFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2Jhc2UuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL3JlZ2lzdHJhdGlvbi1kYXRlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IGdldHRleHQsIENvbHVtbkNvbmZpZyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY2xhc3MgUmVnaXN0cmF0aW9uRGF0ZURldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxDb2x1bW5Db25maWc/OiBDb2x1bW5Db25maWcpIHtcbiAgICBzdXBlcihpbml0aWFsQ29sdW1uQ29uZmlnKTtcblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5wYXRoID0gJ2NyZWF0aW9uVGltZSc7XG4gICAgdGhpcy5uYW1lID0gJ3JlZ2lzdHJhdGlvbkRhdGUnO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnUmVnaXN0cmF0aW9uIGRhdGUnKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgcmVnaXN0cmF0aW9uRGF0ZToge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIGFmdGVyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnZGF0ZXRpbWUnXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJlZm9yZToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogJ2RhdGV0aW1lJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZm9ybTogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAncmVnaXN0cmF0aW9uRGF0ZS5hZnRlcicsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1Nob3cgZGV2aWNlcyByZWdpc3RlcmVkIGFmdGVyJyksXG4gICAgICAgICAgbWF4RGF0ZUtleTogJ3JlZ2lzdHJhdGlvbkRhdGUuYmVmb3JlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAncmVnaXN0cmF0aW9uRGF0ZS5iZWZvcmUnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdBbmQgYmVmb3JlYGRhdGVgJyksXG4gICAgICAgICAgbWluRGF0ZUtleTogJ3JlZ2lzdHJhdGlvbkRhdGUuYWZ0ZXInXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWwpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgY29uc3QgZGF0ZXMgPSBtb2RlbCAmJiBtb2RlbC5yZWdpc3RyYXRpb25EYXRlO1xuICAgICAgICBpZiAoZGF0ZXMgJiYgKGRhdGVzLmFmdGVyIHx8IGRhdGVzLmJlZm9yZSkpIHtcbiAgICAgICAgICBmaWx0ZXIuX19hbmQgPSBbXTtcbiAgICAgICAgICBpZiAoZGF0ZXMuYWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gc2VsZi5mb3JtYXREYXRlKGRhdGVzLmFmdGVyKTtcbiAgICAgICAgICAgIGZpbHRlci5fX2FuZC5wdXNoKHtcbiAgICAgICAgICAgICAgX19vcjoge1xuICAgICAgICAgICAgICAgIFtzZWxmLnBhdGhdOiB7IF9fZ3Q6IGFmdGVyIH0sXG4gICAgICAgICAgICAgICAgW2Ake3NlbGYucGF0aH0uZGF0ZWBdOiB7IF9fZ3Q6IGFmdGVyIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRlcy5iZWZvcmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IHNlbGYuZm9ybWF0RGF0ZShkYXRlcy5iZWZvcmUpO1xuICAgICAgICAgICAgZmlsdGVyLl9fYW5kLnB1c2goe1xuICAgICAgICAgICAgICBfX29yOiB7XG4gICAgICAgICAgICAgICAgW3NlbGYucGF0aF06IHsgX19sdDogYmVmb3JlIH0sXG4gICAgICAgICAgICAgICAgW2Ake3NlbGYucGF0aH0uZGF0ZWBdOiB7IF9fbHQ6IGJlZm9yZSB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IGAke3RoaXMucGF0aH0uZGF0ZWAgfSwgeyBwYXRoOiB0aGlzLnBhdGggfV1cbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGZvcm1hdERhdGUoZGF0ZVRvRm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlVG9Gb3JtYXQpLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn1cbiJdfQ==