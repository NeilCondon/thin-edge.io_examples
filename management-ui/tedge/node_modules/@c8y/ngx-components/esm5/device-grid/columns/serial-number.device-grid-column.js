import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';
import { gettext } from '@c8y/ngx-components';
var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(SerialNumberDeviceGridColumn, _super);
    function SerialNumberDeviceGridColumn(initialColumnConfig) {
        var _this = _super.call(this, initialColumnConfig) || this;
        var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        _this.name = 'serialNumber';
        _this.header = gettext('Serial number');
        _this.cellRendererComponent = SerialNumberCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'serialNumbers',
                    title: gettext('Show devices with serial number'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = (_a = {},
                        _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                        _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
        return _this;
    }
    return SerialNumberDeviceGridColumn;
}(BaseDeviceGridColumn));
export { SerialNumberDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsLW51bWJlci5kZXZpY2UtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkLyIsInNvdXJjZXMiOlsiY29sdW1ucy9zZXJpYWwtbnVtYmVyLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDNUYsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RDtJQUFrRCx3REFBb0I7SUFDcEUsc0NBQVksbUJBQWtDO1FBQTlDLFlBQ0Usa0JBQU0sbUJBQW1CLENBQUMsU0F1RDNCO1FBckRDLElBQU0sd0JBQXdCLEdBQUcsMkJBQTJCLENBQUM7UUFDN0QsSUFBTSx1QkFBdUIsR0FDM0IsaUVBQWlFLENBQUM7UUFFcEUsS0FBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7UUFDM0IsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdkMsS0FBSSxDQUFDLHFCQUFxQixHQUFHLGlDQUFpQyxDQUFDO1FBRS9ELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxRQUFRO2dCQUNkLFVBQVUsRUFBRTtvQkFDVixhQUFhLEVBQUU7d0JBQ2IsSUFBSSxFQUFFLE9BQU87d0JBQ2IsS0FBSyxFQUFFOzRCQUNMLElBQUksRUFBRSxRQUFRO3lCQUNmO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxJQUFJLEVBQUU7Z0JBQ0o7b0JBQ0UsR0FBRyxFQUFFLGVBQWU7b0JBQ3BCLEtBQUssRUFBRSxPQUFPLENBQUMsaUNBQWlDLENBQUM7b0JBQ2pELEdBQUcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNsQixLQUFLLEVBQUU7d0JBQ0w7NEJBQ0UsR0FBRyxFQUFFLGlCQUFpQjs0QkFDdEIsT0FBTyxFQUFFLElBQUk7NEJBQ2IsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsbUVBQW1FLENBQ3BFO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxTQUFTLEVBQVQsVUFBVSxLQUFVOztnQkFDbEIsSUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO29CQUM5QixNQUFNLENBQUMsSUFBSTt3QkFDVCxHQUFDLHdCQUF3QixJQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7d0JBQ3pELEdBQUMsdUJBQXVCLElBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLGFBQWEsRUFBRTsyQkFDekQsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixFQUFFLENBQUM7U0FDNUYsQ0FBQzs7SUFDSixDQUFDO0lBQ0gsbUNBQUM7QUFBRCxDQUFDLEFBMURELENBQWtELG9CQUFvQixHQTBEckUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vYmFzZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9zZXJpYWwtbnVtYmVyLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IGdldHRleHQsIENvbHVtbkNvbmZpZyB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY2xhc3MgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoaW5pdGlhbENvbHVtbkNvbmZpZz86IENvbHVtbkNvbmZpZykge1xuICAgIHN1cGVyKGluaXRpYWxDb2x1bW5Db25maWcpO1xuXG4gICAgY29uc3QgaGFyZHdhcmVTZXJpYWxOdW1iZXJQYXRoID0gJ2M4eV9IYXJkd2FyZS5zZXJpYWxOdW1iZXInO1xuICAgIGNvbnN0IHZlbmRpbmdTZXJpYWxOdW1iZXJQYXRoID1cbiAgICAgICdjb21fbnNuX3N0YXJ0dXBzX3ZlbmRtZV9mcmFnbWVudHNfVmVuZGluZ01hY2hpbmVUeXBlSW5mby5zZXJpYWwnO1xuXG4gICAgdGhpcy5uYW1lID0gJ3NlcmlhbE51bWJlcic7XG4gICAgdGhpcy5oZWFkZXIgPSBnZXR0ZXh0KCdTZXJpYWwgbnVtYmVyJyk7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc2VyaWFsTnVtYmVyczoge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZm9ybTogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnc2VyaWFsTnVtYmVycycsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1Nob3cgZGV2aWNlcyB3aXRoIHNlcmlhbCBudW1iZXInKSxcbiAgICAgICAgICBhZGQ6IGdldHRleHQoJ09yJyksXG4gICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAga2V5OiAnc2VyaWFsTnVtYmVyc1tdJyxcbiAgICAgICAgICAgICAgbm90aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGdldHRleHQoXG4gICAgICAgICAgICAgICAgJ2UuZy4gNTQzMjEtMTIzLCB5b3UgY2FuIHVzZSBhbiBhc3RlcmlzayAoKikgYXMgd2lsZGNhcmQgY2hhcmFjdGVyJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyKG1vZGVsOiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBpZiAobW9kZWwuc2VyaWFsTnVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IHtcbiAgICAgICAgICAgIFtoYXJkd2FyZVNlcmlhbE51bWJlclBhdGhdOiB7IF9faW46IG1vZGVsLnNlcmlhbE51bWJlcnMgfSxcbiAgICAgICAgICAgIFt2ZW5kaW5nU2VyaWFsTnVtYmVyUGF0aF06IHsgX19pbjogbW9kZWwuc2VyaWFsTnVtYmVycyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IGhhcmR3YXJlU2VyaWFsTnVtYmVyUGF0aCB9LCB7IHBhdGg6IHZlbmRpbmdTZXJpYWxOdW1iZXJQYXRoIH1dXG4gICAgfTtcbiAgfVxufVxuIl19