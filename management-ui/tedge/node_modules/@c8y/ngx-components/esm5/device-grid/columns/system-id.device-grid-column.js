import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { gettext } from '@c8y/ngx-components';
var SystemIdDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(SystemIdDeviceGridColumn, _super);
    function SystemIdDeviceGridColumn(initialColumnConfig) {
        var _this = _super.call(this, initialColumnConfig) || this;
        var self = _this;
        _this.path = 'id';
        _this.name = 'systemId';
        _this.header = gettext('System ID');
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    ids: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'ids',
                    title: gettext('Show devices with system ID'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'ids[]',
                            notitle: true,
                            placeholder: gettext('e.g. 10300, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var filter = {};
                if (model.ids.length) {
                    filter[self.path] = { __in: model.ids };
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: _this.path }]
        };
        return _this;
    }
    return SystemIdDeviceGridColumn;
}(BaseDeviceGridColumn));
export { SystemIdDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLWlkLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQvIiwic291cmNlcyI6WyJjb2x1bW5zL3N5c3RlbS1pZC5kZXZpY2UtZ3JpZC1jb2x1bW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0scUJBQXFCLENBQUM7QUFFNUQ7SUFBOEMsb0RBQW9CO0lBQ2hFLGtDQUFZLG1CQUFrQztRQUE5QyxZQUNFLGtCQUFNLG1CQUFtQixDQUFDLFNBK0MzQjtRQTdDQyxJQUFNLElBQUksR0FBRyxLQUFJLENBQUM7UUFDbEIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsS0FBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7UUFDdkIsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbkMsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLEdBQUcsRUFBRTt3QkFDSCxJQUFJLEVBQUUsT0FBTzt3QkFDYixLQUFLLEVBQUU7NEJBQ0wsSUFBSSxFQUFFLFFBQVE7eUJBQ2Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtZQUNELElBQUksRUFBRTtnQkFDSjtvQkFDRSxHQUFHLEVBQUUsS0FBSztvQkFDVixLQUFLLEVBQUUsT0FBTyxDQUFDLDZCQUE2QixDQUFDO29CQUM3QyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDbEIsS0FBSyxFQUFFO3dCQUNMOzRCQUNFLEdBQUcsRUFBRSxPQUFPOzRCQUNaLE9BQU8sRUFBRSxJQUFJOzRCQUNiLFdBQVcsRUFBRSxPQUFPLENBQUMsK0RBQStELENBQUM7eUJBQ3RGO3FCQUNGO2lCQUNGO2FBQ0Y7WUFDRCxTQUFTLEVBQVQsVUFBVSxLQUFVO2dCQUNsQixJQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO2lCQUN6QztnQkFDRCxPQUFPLE1BQU0sQ0FBQztZQUNoQixDQUFDO1NBQ0YsQ0FBQztRQUVGLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUMsQ0FBQzs7SUFDSixDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQUFDLEFBbERELENBQThDLG9CQUFvQixHQWtEakUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vYmFzZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgZ2V0dGV4dCwgQ29sdW1uQ29uZmlnIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbmV4cG9ydCBjbGFzcyBTeXN0ZW1JZERldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxDb2x1bW5Db25maWc/OiBDb2x1bW5Db25maWcpIHtcbiAgICBzdXBlcihpbml0aWFsQ29sdW1uQ29uZmlnKTtcblxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMucGF0aCA9ICdpZCc7XG4gICAgdGhpcy5uYW1lID0gJ3N5c3RlbUlkJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1N5c3RlbSBJRCcpO1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGlkczoge1xuICAgICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZm9ybTogW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnaWRzJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnU2hvdyBkZXZpY2VzIHdpdGggc3lzdGVtIElEJyksXG4gICAgICAgICAgYWRkOiBnZXR0ZXh0KCdPcicpLFxuICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGtleTogJ2lkc1tdJyxcbiAgICAgICAgICAgICAgbm90aXRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGdldHRleHQoJ2UuZy4gMTAzMDAsIHlvdSBjYW4gdXNlIGFuIGFzdGVyaXNrICgqKSBhcyB3aWxkY2FyZCBjaGFyYWN0ZXInKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGdldEZpbHRlcihtb2RlbDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKG1vZGVsLmlkcy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXJbc2VsZi5wYXRoXSA9IHsgX19pbjogbW9kZWwuaWRzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbeyBwYXRoOiB0aGlzLnBhdGggfV1cbiAgICB9O1xuICB9XG59XG4iXX0=