import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, QueriesUtil } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { assign, forEach, get, identity, map, remove, sortBy, transform } from 'lodash-es';
import { AlarmsDeviceGridColumn } from './columns/alarms.device-grid-column';
import { GroupDeviceGridColumn } from './columns/group.device-grid-column';
import { ImeiDeviceGridColumn } from './columns/imei.device-grid-column';
import { ModelDeviceGridColumn } from './columns/model.device-grid-column';
import { NameDeviceGridColumn } from './columns/name.device-grid-column';
import { RegistrationDateDeviceGridColumn } from './columns/registration-date.device-grid-column';
import { SerialNumberDeviceGridColumn } from './columns/serial-number.device-grid-column';
import { StatusDeviceGridColumn } from './columns/status.device-grid-column';
import { SystemIdDeviceGridColumn } from './columns/system-id.device-grid-column';
var DeviceGridService = /** @class */ (function () {
    function DeviceGridService(inventoryService, translateService) {
        this.inventoryService = inventoryService;
        this.translateService = translateService;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'device-grid-config';
        this.DEFAULT_PAGE_SIZE = 20;
        this.queriesUtil = new QueriesUtil();
    }
    DeviceGridService.prototype.getDefaultColumns = function () {
        var defaultColumns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new SystemIdDeviceGridColumn(),
            new ImeiDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    };
    DeviceGridService.prototype.getDefaultPagination = function () {
        return {
            pageSize: 10,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getInfiniteScrollPagination = function () {
        return {
            pageSize: 50,
            currentPage: 1
        };
    };
    DeviceGridService.prototype.getDefaultActionControls = function () {
        var _this = this;
        return [
            {
                type: "DELETE" /* Delete */,
                callback: function (item) { return _this.delete(item); }
            }
        ];
    };
    DeviceGridService.prototype.getDefaultBulkActionControls = function () {
        return [];
    };
    DeviceGridService.prototype.getProperName = function (device) {
        var id = device.id, name = device.name;
        return name ? name : this.translateService.instant('Device {{id}}', { id: id });
    };
    DeviceGridService.prototype.getModel = function (device) {
        var hardware = this.getHardware(device);
        return hardware && hardware.model;
    };
    DeviceGridService.prototype.getSerialNumber = function (device) {
        var hardware = this.getHardware(device);
        var serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
        return hardware && hardware[serialPropertyName];
    };
    DeviceGridService.prototype.getParentsNames = function (device, featuredParentId) {
        var assetParentsReferences = device.assetParents.references;
        var assetParents = map(assetParentsReferences, 'managedObject');
        var sortedByName = sortBy(assetParents, ['name']);
        var featuredItems = remove(sortedByName, { id: featuredParentId });
        var items = featuredItems.concat(sortedByName);
        var names = map(items, 'name');
        return names.join(', ');
    };
    DeviceGridService.prototype.getHref = function (groupOrDevice, prefix) {
        if (prefix === void 0) { prefix = '#/'; }
        if (groupOrDevice.c8y_IsDeviceGroup || groupOrDevice.c8y_IsDynamicGroup) {
            return prefix + "group/" + groupOrDevice.id;
        }
        return prefix + "device/" + groupOrDevice.id;
    };
    DeviceGridService.prototype.getAlarmsHref = function (device) {
        return this.getHref(device) + "/alarms";
    };
    DeviceGridService.prototype.getUserConfiguredColumns = function (columns) {
        var config = this.getConfig();
        if (config.columns.length > 0) {
            var reOrderedColumns_1 = [];
            var noConfigColumns = [];
            try {
                noConfigColumns = columns.filter(function (col) { return !config.columns.includes(col); });
                config.columns.forEach(function (_a) {
                    var visible = _a.visible, name = _a.name, sortOrder = _a.sortOrder;
                    var columnToReorder = columns.find(function (col) { return col.name === name; });
                    if (columnToReorder) {
                        columnToReorder.visible = visible;
                        columnToReorder.sortOrder = sortOrder;
                        reOrderedColumns_1.push(columnToReorder);
                    }
                });
            }
            catch (ex) {
                this.clearConfig();
            }
            return tslib_1.__spread(reOrderedColumns_1, noConfigColumns);
        }
        return columns;
    };
    DeviceGridService.prototype.delete = function (device) {
        console.log('should delete', device);
    };
    DeviceGridService.prototype.getData = function (columns, pagination, query, withChildren) {
        if (query === void 0) { query = {}; }
        if (withChildren === void 0) { withChildren = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                filters = tslib_1.__assign({}, this.getDevicesFilters(columns, pagination, query), { withParents: true, withChildren: withChildren });
                return [2 /*return*/, this.inventoryService.list(filters)];
            });
        });
    };
    DeviceGridService.prototype.getCount = function (columns, pagination, query) {
        if (query === void 0) { query = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = tslib_1.__assign({}, this.getDevicesFilters(columns, pagination, query), { pageSize: 1, currentPage: 1 });
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getTotal = function (query) {
        if (query === void 0) { query = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filters;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filters = {
                            q: this.queriesUtil.buildQuery(query),
                            pageSize: 1,
                            withTotalPages: true
                        };
                        return [4 /*yield*/, this.inventoryService.list(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                }
            });
        });
    };
    DeviceGridService.prototype.getDeviceQueryString = function (columns, query) {
        var fullQuery = this.getQueryObj(columns);
        fullQuery = this.queriesUtil.addAndFilter(fullQuery, query);
        return this.queriesUtil.buildQuery(fullQuery);
    };
    DeviceGridService.prototype.getQueryObj = function (columns, defaultFilter) {
        var _this = this;
        if (defaultFilter === void 0) { defaultFilter = {}; }
        return transform(columns, function (query, column) { return _this.extendQueryByColumn(query, column); }, tslib_1.__assign({ __filter: {}, __orderby: [] }, defaultFilter));
    };
    DeviceGridService.prototype.getConfig = function (key) {
        if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
        var config = JSON.parse(localStorage.getItem(key));
        if (config === null) {
            return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };
        }
        return config;
    };
    DeviceGridService.prototype.saveConfig = function (config, key) {
        if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
        localStorage.setItem(key, JSON.stringify(config));
    };
    DeviceGridService.prototype.clearConfig = function (key) {
        if (key === void 0) { key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY; }
        localStorage.removeItem(key);
    };
    DeviceGridService.prototype.getHardware = function (device) {
        var hardwarePropertyName = this.isVendme(device)
            ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
            : 'c8y_Hardware';
        return device && device[hardwarePropertyName];
    };
    DeviceGridService.prototype.isVendme = function (device) {
        return device.type === 'com_nsn_startups_vendme_VendingMachine';
    };
    DeviceGridService.prototype.getDevicesFilters = function (columns, pagination, query) {
        return {
            q: this.getDeviceQueryString(columns, query),
            pageSize: pagination.pageSize,
            currentPage: pagination.currentPage,
            withChildren: false,
            withTotalPages: true
        };
    };
    DeviceGridService.prototype.extendQueryByColumn = function (query, column) {
        if (column.filterable && column.externalFilterQuery) {
            var getFilter = column.filteringConfig.getFilter || identity;
            var queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(function (obj) { return query.__filter.__and.push(obj); });
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            var cs_1 = {};
            forEach(column.sortingConfig.pathSortingConfigs, function (pathSortingConfig) {
                cs_1[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs_1);
        }
        return query;
    };
    DeviceGridService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TranslateService }
    ]; };
    DeviceGridService = tslib_1.__decorate([
        Injectable()
    ], DeviceGridService);
    return DeviceGridService;
}());
export { DeviceGridService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQvIiwic291cmNlcyI6WyJkZXZpY2UtZ3JpZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBUzVFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBSWxGO0lBS0UsMkJBQ1ksZ0JBQWtDLEVBQ2xDLGdCQUFrQztRQURsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHFC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O1lBQ3ZDLElBQU0sSUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNkLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLFVBQUEsaUJBQWlCO2dCQUNoRSxJQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO29CQUN4QixDQUFDLE1BQU0sQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN2RixDQUFDLENBQUMsQ0FBQztZQUNILEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUUsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkE1TjZCLGdCQUFnQjtnQkFDaEIsZ0JBQWdCOztJQVBuQyxpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO09BQ0EsaUJBQWlCLENBbU83QjtJQUFELHdCQUFDO0NBQUEsQUFuT0QsSUFtT0M7U0FuT1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSU1hbmFnZWRPYmplY3QsIEludmVudG9yeVNlcnZpY2UsIFF1ZXJpZXNVdGlsIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgQWN0aW9uQ29udHJvbCxcbiAgQnVsa0FjdGlvbkNvbnRyb2wsXG4gIFBhZ2luYXRpb24sXG4gIFJvdyxcbiAgR3JpZENvbmZpZyxcbiAgQ29sdW1uXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgYXNzaWduLCBmb3JFYWNoLCBnZXQsIGlkZW50aXR5LCBtYXAsIHJlbW92ZSwgc29ydEJ5LCB0cmFuc2Zvcm0gfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgQWxhcm1zRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vY29sdW1ucy9hbGFybXMuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IEdyb3VwRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vY29sdW1ucy9ncm91cC5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgSW1laURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2NvbHVtbnMvaW1laS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgTW9kZWxEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW5zL21vZGVsLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBOYW1lRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vY29sdW1ucy9uYW1lLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBSZWdpc3RyYXRpb25EYXRlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vY29sdW1ucy9yZWdpc3RyYXRpb24tZGF0ZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vY29sdW1ucy9zZXJpYWwtbnVtYmVyLmRldmljZS1ncmlkLWNvbHVtbic7XG5pbXBvcnQgeyBTdGF0dXNEZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW5zL3N0YXR1cy5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgU3lzdGVtSWREZXZpY2VHcmlkQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW5zL3N5c3RlbS1pZC5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgRGV2aWNlR3JpZEFjdGlvblR5cGUsIERldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2RldmljZS1ncmlkLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcmlkU2VydmljZSB7XG4gIHByb3RlY3RlZCBxdWVyaWVzVXRpbDogUXVlcmllc1V0aWw7XG4gIHByb3RlY3RlZCBHUklEX0NPTkZJR19ERUZBVUxUX1NUT1JBR0VfS0VZID0gJ2RldmljZS1ncmlkLWNvbmZpZyc7XG4gIHByb3RlY3RlZCBERUZBVUxUX1BBR0VfU0laRSA9IDIwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMucXVlcmllc1V0aWwgPSBuZXcgUXVlcmllc1V0aWwoKTtcbiAgfVxuXG4gIGdldERlZmF1bHRDb2x1bW5zKCk6IERldmljZUdyaWRDb2x1bW5bXSB7XG4gICAgY29uc3QgZGVmYXVsdENvbHVtbnMgPSBbXG4gICAgICBuZXcgU3RhdHVzRGV2aWNlR3JpZENvbHVtbigpLFxuICAgICAgbmV3IE5hbWVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgICBuZXcgTW9kZWxEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgICBuZXcgU2VyaWFsTnVtYmVyRGV2aWNlR3JpZENvbHVtbigpLFxuICAgICAgbmV3IEdyb3VwRGV2aWNlR3JpZENvbHVtbigpLFxuICAgICAgbmV3IFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgICBuZXcgU3lzdGVtSWREZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgICBuZXcgSW1laURldmljZUdyaWRDb2x1bW4oKSxcbiAgICAgIG5ldyBBbGFybXNEZXZpY2VHcmlkQ29sdW1uKClcbiAgICBdO1xuXG4gICAgcmV0dXJuIGRlZmF1bHRDb2x1bW5zO1xuICB9XG5cbiAgZ2V0RGVmYXVsdFBhZ2luYXRpb24oKTogUGFnaW5hdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIGN1cnJlbnRQYWdlOiAxXG4gICAgfTtcbiAgfVxuXG4gIGdldEluZmluaXRlU2Nyb2xsUGFnaW5hdGlvbigpOiBQYWdpbmF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZVNpemU6IDUwLFxuICAgICAgY3VycmVudFBhZ2U6IDFcbiAgICB9O1xuICB9XG5cbiAgZ2V0RGVmYXVsdEFjdGlvbkNvbnRyb2xzKCk6IEFjdGlvbkNvbnRyb2xbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogRGV2aWNlR3JpZEFjdGlvblR5cGUuRGVsZXRlLFxuICAgICAgICBjYWxsYmFjazogKGl0ZW06IFJvdykgPT4gdGhpcy5kZWxldGUoaXRlbSBhcyBJTWFuYWdlZE9iamVjdClcbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgZ2V0RGVmYXVsdEJ1bGtBY3Rpb25Db250cm9scygpOiBCdWxrQWN0aW9uQ29udHJvbFtdIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBnZXRQcm9wZXJOYW1lKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgaWQsIG5hbWUgfSA9IGRldmljZTtcbiAgICByZXR1cm4gbmFtZSA/IG5hbWUgOiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudCgnRGV2aWNlIHt7aWR9fScsIHsgaWQgfSk7XG4gIH1cblxuICBnZXRNb2RlbChkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBoYXJkd2FyZSA9IHRoaXMuZ2V0SGFyZHdhcmUoZGV2aWNlKTtcbiAgICByZXR1cm4gaGFyZHdhcmUgJiYgaGFyZHdhcmUubW9kZWw7XG4gIH1cblxuICBnZXRTZXJpYWxOdW1iZXIoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgaGFyZHdhcmUgPSB0aGlzLmdldEhhcmR3YXJlKGRldmljZSk7XG4gICAgY29uc3Qgc2VyaWFsUHJvcGVydHlOYW1lID0gdGhpcy5pc1ZlbmRtZShkZXZpY2UpID8gJ3NlcmlhbCcgOiAnc2VyaWFsTnVtYmVyJztcbiAgICByZXR1cm4gaGFyZHdhcmUgJiYgaGFyZHdhcmVbc2VyaWFsUHJvcGVydHlOYW1lXTtcbiAgfVxuXG4gIGdldFBhcmVudHNOYW1lcyhkZXZpY2U6IElNYW5hZ2VkT2JqZWN0LCBmZWF0dXJlZFBhcmVudElkPzogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBhc3NldFBhcmVudHNSZWZlcmVuY2VzID0gZGV2aWNlLmFzc2V0UGFyZW50cy5yZWZlcmVuY2VzO1xuICAgIGNvbnN0IGFzc2V0UGFyZW50cyA9IG1hcChhc3NldFBhcmVudHNSZWZlcmVuY2VzLCAnbWFuYWdlZE9iamVjdCcpO1xuICAgIGNvbnN0IHNvcnRlZEJ5TmFtZSA9IHNvcnRCeShhc3NldFBhcmVudHMsIFsnbmFtZSddKTtcbiAgICBjb25zdCBmZWF0dXJlZEl0ZW1zID0gcmVtb3ZlKHNvcnRlZEJ5TmFtZSwgeyBpZDogZmVhdHVyZWRQYXJlbnRJZCB9KTtcbiAgICBjb25zdCBpdGVtcyA9IGZlYXR1cmVkSXRlbXMuY29uY2F0KHNvcnRlZEJ5TmFtZSk7XG4gICAgY29uc3QgbmFtZXMgPSBtYXAoaXRlbXMsICduYW1lJyk7XG4gICAgcmV0dXJuIG5hbWVzLmpvaW4oJywgJyk7XG4gIH1cblxuICBnZXRIcmVmKGdyb3VwT3JEZXZpY2U6IElNYW5hZ2VkT2JqZWN0LCBwcmVmaXggPSAnIy8nKTogc3RyaW5nIHtcbiAgICBpZiAoZ3JvdXBPckRldmljZS5jOHlfSXNEZXZpY2VHcm91cCB8fCBncm91cE9yRGV2aWNlLmM4eV9Jc0R5bmFtaWNHcm91cCkge1xuICAgICAgcmV0dXJuIGAke3ByZWZpeH1ncm91cC8ke2dyb3VwT3JEZXZpY2UuaWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZWZpeH1kZXZpY2UvJHtncm91cE9yRGV2aWNlLmlkfWA7XG4gIH1cblxuICBnZXRBbGFybXNIcmVmKGRldmljZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmdldEhyZWYoZGV2aWNlKX0vYWxhcm1zYDtcbiAgfVxuXG4gIGdldFVzZXJDb25maWd1cmVkQ29sdW1ucyhjb2x1bW5zOiBDb2x1bW5bXSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0Q29uZmlnKCk7XG4gICAgaWYgKGNvbmZpZy5jb2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHJlT3JkZXJlZENvbHVtbnMgPSBbXTtcbiAgICAgIGxldCBub0NvbmZpZ0NvbHVtbnMgPSBbXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5vQ29uZmlnQ29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29uZmlnLmNvbHVtbnMuaW5jbHVkZXMoY29sKSk7XG4gICAgICAgIGNvbmZpZy5jb2x1bW5zLmZvckVhY2goKHsgdmlzaWJsZSwgbmFtZSwgc29ydE9yZGVyIH0pID0+IHtcbiAgICAgICAgICBjb25zdCBjb2x1bW5Ub1Jlb3JkZXIgPSBjb2x1bW5zLmZpbmQoY29sID0+IGNvbC5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgICBpZiAoY29sdW1uVG9SZW9yZGVyKSB7XG4gICAgICAgICAgICBjb2x1bW5Ub1Jlb3JkZXIudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgICAgICBjb2x1bW5Ub1Jlb3JkZXIuc29ydE9yZGVyID0gc29ydE9yZGVyO1xuICAgICAgICAgICAgcmVPcmRlcmVkQ29sdW1ucy5wdXNoKGNvbHVtblRvUmVvcmRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuY2xlYXJDb25maWcoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbLi4ucmVPcmRlcmVkQ29sdW1ucywgLi4ubm9Db25maWdDb2x1bW5zXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbnM7XG4gIH1cblxuICBkZWxldGUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKCdzaG91bGQgZGVsZXRlJywgZGV2aWNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEoXG4gICAgY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdLFxuICAgIHBhZ2luYXRpb246IFBhZ2luYXRpb24sXG4gICAgcXVlcnk6IGFueSA9IHt9LFxuICAgIHdpdGhDaGlsZHJlbjogYm9vbGVhbiA9IGZhbHNlXG4gICkge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAgICAuLi50aGlzLmdldERldmljZXNGaWx0ZXJzKGNvbHVtbnMsIHBhZ2luYXRpb24sIHF1ZXJ5KSxcbiAgICAgIHdpdGhQYXJlbnRzOiB0cnVlLFxuICAgICAgd2l0aENoaWxkcmVuXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmxpc3QoZmlsdGVycyk7XG4gIH1cblxuICBhc3luYyBnZXRDb3VudChjb2x1bW5zOiBEZXZpY2VHcmlkQ29sdW1uW10sIHBhZ2luYXRpb246IFBhZ2luYXRpb24sIHF1ZXJ5OiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAgICAuLi50aGlzLmdldERldmljZXNGaWx0ZXJzKGNvbHVtbnMsIHBhZ2luYXRpb24sIHF1ZXJ5KSxcbiAgICAgIHBhZ2VTaXplOiAxLFxuICAgICAgY3VycmVudFBhZ2U6IDFcbiAgICB9O1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmxpc3QoZmlsdGVycykpLnBhZ2luZy50b3RhbFBhZ2VzO1xuICB9XG5cbiAgYXN5bmMgZ2V0VG90YWwocXVlcnk6IGFueSA9IHt9KTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgICAgcTogdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KHF1ZXJ5KSxcbiAgICAgIHBhZ2VTaXplOiAxLFxuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5pbnZlbnRvcnlTZXJ2aWNlLmxpc3QoZmlsdGVycykpLnBhZ2luZy50b3RhbFBhZ2VzO1xuICB9XG5cbiAgZ2V0RGV2aWNlUXVlcnlTdHJpbmcoY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdLCBxdWVyeTogYW55KTogc3RyaW5nIHtcbiAgICBsZXQgZnVsbFF1ZXJ5ID0gdGhpcy5nZXRRdWVyeU9iaihjb2x1bW5zKTtcbiAgICBmdWxsUXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZEFuZEZpbHRlcihmdWxsUXVlcnksIHF1ZXJ5KTtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzVXRpbC5idWlsZFF1ZXJ5KGZ1bGxRdWVyeSk7XG4gIH1cblxuICBnZXRRdWVyeU9iaihjb2x1bW5zOiBEZXZpY2VHcmlkQ29sdW1uW10sIGRlZmF1bHRGaWx0ZXIgPSB7fSk6IGFueSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybShjb2x1bW5zLCAocXVlcnksIGNvbHVtbikgPT4gdGhpcy5leHRlbmRRdWVyeUJ5Q29sdW1uKHF1ZXJ5LCBjb2x1bW4pLCB7XG4gICAgICBfX2ZpbHRlcjoge30sXG4gICAgICBfX29yZGVyYnk6IFtdLFxuICAgICAgLi4uZGVmYXVsdEZpbHRlclxuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29uZmlnKGtleTogc3RyaW5nID0gdGhpcy5HUklEX0NPTkZJR19ERUZBVUxUX1NUT1JBR0VfS0VZKTogR3JpZENvbmZpZyB7XG4gICAgY29uc3QgY29uZmlnID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKTtcbiAgICBpZiAoY29uZmlnID09PSBudWxsKSB7XG4gICAgICByZXR1cm4geyBjb2x1bW5zOiBbXSwgcGFnaW5hdGlvbjogeyBwYWdlU2l6ZTogdGhpcy5ERUZBVUxUX1BBR0VfU0laRSwgY3VycmVudFBhZ2U6IDEgfSB9O1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnIGFzIEdyaWRDb25maWc7XG4gIH1cblxuICBzYXZlQ29uZmlnKGNvbmZpZzogR3JpZENvbmZpZywga2V5OiBzdHJpbmcgPSB0aGlzLkdSSURfQ09ORklHX0RFRkFVTFRfU1RPUkFHRV9LRVkpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xuICB9XG5cbiAgY2xlYXJDb25maWcoa2V5OiBzdHJpbmcgPSB0aGlzLkdSSURfQ09ORklHX0RFRkFVTFRfU1RPUkFHRV9LRVkpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIYXJkd2FyZShkZXZpY2U6IElNYW5hZ2VkT2JqZWN0KTogYW55IHtcbiAgICBjb25zdCBoYXJkd2FyZVByb3BlcnR5TmFtZSA9IHRoaXMuaXNWZW5kbWUoZGV2aWNlKVxuICAgICAgPyAnY29tX25zbl9zdGFydHVwc192ZW5kbWVfZnJhZ21lbnRzX1ZlbmRpbmdNYWNoaW5lVHlwZUluZm8nXG4gICAgICA6ICdjOHlfSGFyZHdhcmUnO1xuICAgIHJldHVybiBkZXZpY2UgJiYgZGV2aWNlW2hhcmR3YXJlUHJvcGVydHlOYW1lXTtcbiAgfVxuXG4gIHByaXZhdGUgaXNWZW5kbWUoZGV2aWNlOiBJTWFuYWdlZE9iamVjdCkge1xuICAgIHJldHVybiBkZXZpY2UudHlwZSA9PT0gJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX1ZlbmRpbmdNYWNoaW5lJztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGV2aWNlc0ZpbHRlcnMoY29sdW1uczogRGV2aWNlR3JpZENvbHVtbltdLCBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uLCBxdWVyeTogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHE6IHRoaXMuZ2V0RGV2aWNlUXVlcnlTdHJpbmcoY29sdW1ucywgcXVlcnkpLFxuICAgICAgcGFnZVNpemU6IHBhZ2luYXRpb24ucGFnZVNpemUsXG4gICAgICBjdXJyZW50UGFnZTogcGFnaW5hdGlvbi5jdXJyZW50UGFnZSxcbiAgICAgIHdpdGhDaGlsZHJlbjogZmFsc2UsXG4gICAgICB3aXRoVG90YWxQYWdlczogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGV4dGVuZFF1ZXJ5QnlDb2x1bW4ocXVlcnk6IGFueSwgY29sdW1uOiBEZXZpY2VHcmlkQ29sdW1uKTogdm9pZCB7XG4gICAgaWYgKGNvbHVtbi5maWx0ZXJhYmxlICYmIGNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5KSB7XG4gICAgICBjb25zdCBnZXRGaWx0ZXIgPSBjb2x1bW4uZmlsdGVyaW5nQ29uZmlnLmdldEZpbHRlciB8fCBpZGVudGl0eTtcbiAgICAgIGNvbnN0IHF1ZXJ5T2JqID0gZ2V0RmlsdGVyKGNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5KTtcblxuICAgICAgaWYgKHF1ZXJ5T2JqLl9fb3IpIHtcbiAgICAgICAgcXVlcnkuX19maWx0ZXIuX19hbmQgPSBxdWVyeS5fX2ZpbHRlci5fX2FuZCB8fCBbXTtcbiAgICAgICAgcXVlcnkuX19maWx0ZXIuX19hbmQucHVzaChxdWVyeU9iaik7XG4gICAgICB9IGVsc2UgaWYgKHF1ZXJ5T2JqLl9fYW5kICYmIGdldChxdWVyeSwgJ19fZmlsdGVyLl9fYW5kJykpIHtcbiAgICAgICAgcXVlcnlPYmouX19hbmQubWFwKG9iaiA9PiBxdWVyeS5fX2ZpbHRlci5fX2FuZC5wdXNoKG9iaikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNzaWduKHF1ZXJ5Ll9fZmlsdGVyLCBxdWVyeU9iaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbHVtbi5zb3J0YWJsZSAmJiBjb2x1bW4uc29ydE9yZGVyKSB7XG4gICAgICBjb25zdCBjcyA9IHt9O1xuICAgICAgZm9yRWFjaChjb2x1bW4uc29ydGluZ0NvbmZpZy5wYXRoU29ydGluZ0NvbmZpZ3MsIHBhdGhTb3J0aW5nQ29uZmlnID0+IHtcbiAgICAgICAgY3NbcGF0aFNvcnRpbmdDb25maWcucGF0aF0gPVxuICAgICAgICAgIChjb2x1bW4uc29ydE9yZGVyID09PSAnYXNjJyA/IDEgOiAtMSkgKiAocGF0aFNvcnRpbmdDb25maWcuc29ydE9yZGVyTW9kaWZpZXIgfHwgMSk7XG4gICAgICB9KTtcbiAgICAgIHF1ZXJ5Ll9fb3JkZXJieS5wdXNoKGNzKTtcbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG59XG4iXX0=