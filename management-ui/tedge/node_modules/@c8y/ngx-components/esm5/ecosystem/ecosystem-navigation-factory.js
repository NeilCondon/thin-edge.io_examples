import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NavigatorNode, gettext } from '@c8y/ngx-components';
import { EcosystemGuard } from './ecosystem.guard';
var EcosystemNavigationFactory = /** @class */ (function () {
    function EcosystemNavigationFactory(ecosystemGuard) {
        this.ecosystemGuard = ecosystemGuard;
        this.navs = [];
    }
    EcosystemNavigationFactory.prototype.get = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var applicationsNode, microservicesNode;
            return tslib_1.__generator(this, function (_a) {
                // Check for the beta flag. To be removed when the feature is production ready.
                if (!this.ecosystemGuard.isFeatureEnabled()) {
                    return [2 /*return*/, []];
                }
                if (this.navs.length === 0) {
                    applicationsNode = new NavigatorNode({
                        label: gettext('Applications'),
                        icon: 'c8y-modules',
                        path: '/application-list'
                    });
                    microservicesNode = new NavigatorNode({
                        label: gettext('Microservices'),
                        icon: 'microchip',
                        path: '/microservices'
                    });
                    this.navs.push(new NavigatorNode({
                        label: gettext('Ecosystem'),
                        icon: 'c8y-atom',
                        priority: 3200,
                        children: [applicationsNode, microservicesNode]
                    }));
                }
                return [2 /*return*/, this.navs];
            });
        });
    };
    EcosystemNavigationFactory.ctorParameters = function () { return [
        { type: EcosystemGuard }
    ]; };
    EcosystemNavigationFactory = tslib_1.__decorate([
        Injectable()
    ], EcosystemNavigationFactory);
    return EcosystemNavigationFactory;
}());
export { EcosystemNavigationFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNvc3lzdGVtLW5hdmlnYXRpb24tZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZWNvc3lzdGVtLyIsInNvdXJjZXMiOlsiZWNvc3lzdGVtLW5hdmlnYXRpb24tZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUF3QixPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQ7SUFFRSxvQ0FBb0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBRDFDLFNBQUksR0FBb0IsRUFBRSxDQUFDO0lBQ2tCLENBQUM7SUFFaEQsd0NBQUcsR0FBVDs7OztnQkFDRSwrRUFBK0U7Z0JBQy9FLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLEVBQUU7b0JBQzNDLHNCQUFPLEVBQUUsRUFBQztpQkFDWDtnQkFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDcEIsZ0JBQWdCLEdBQWtCLElBQUksYUFBYSxDQUFDO3dCQUN4RCxLQUFLLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQzt3QkFDOUIsSUFBSSxFQUFFLGFBQWE7d0JBQ25CLElBQUksRUFBRSxtQkFBbUI7cUJBQzFCLENBQUMsQ0FBQztvQkFFRyxpQkFBaUIsR0FBRyxJQUFJLGFBQWEsQ0FBQzt3QkFDMUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7d0JBQy9CLElBQUksRUFBRSxXQUFXO3dCQUNqQixJQUFJLEVBQUUsZ0JBQWdCO3FCQUN2QixDQUFDLENBQUM7b0JBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxhQUFhLENBQUM7d0JBQ2hCLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO3dCQUMzQixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsUUFBUSxFQUFFLElBQUk7d0JBQ2QsUUFBUSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUM7cUJBQ2hELENBQUMsQ0FDSCxDQUFDO2lCQUNIO2dCQUNELHNCQUFPLElBQUksQ0FBQyxJQUFJLEVBQUM7OztLQUNsQjs7Z0JBL0JtQyxjQUFjOztJQUZ2QywwQkFBMEI7UUFEdEMsVUFBVSxFQUFFO09BQ0EsMEJBQTBCLENBa0N0QztJQUFELGlDQUFDO0NBQUEsQUFsQ0QsSUFrQ0M7U0FsQ1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdG9yTm9kZSwgTmF2aWdhdG9yTm9kZUZhY3RvcnksIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IEVjb3N5c3RlbUd1YXJkIH0gZnJvbSAnLi9lY29zeXN0ZW0uZ3VhcmQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRWNvc3lzdGVtTmF2aWdhdGlvbkZhY3RvcnkgaW1wbGVtZW50cyBOYXZpZ2F0b3JOb2RlRmFjdG9yeSB7XG4gIHByaXZhdGUgbmF2czogTmF2aWdhdG9yTm9kZVtdID0gW107XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWNvc3lzdGVtR3VhcmQ6IEVjb3N5c3RlbUd1YXJkKSB7fVxuXG4gIGFzeW5jIGdldCgpIHtcbiAgICAvLyBDaGVjayBmb3IgdGhlIGJldGEgZmxhZy4gVG8gYmUgcmVtb3ZlZCB3aGVuIHRoZSBmZWF0dXJlIGlzIHByb2R1Y3Rpb24gcmVhZHkuXG4gICAgaWYgKCF0aGlzLmVjb3N5c3RlbUd1YXJkLmlzRmVhdHVyZUVuYWJsZWQoKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5hdnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBhcHBsaWNhdGlvbnNOb2RlOiBOYXZpZ2F0b3JOb2RlID0gbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQXBwbGljYXRpb25zJyksXG4gICAgICAgIGljb246ICdjOHktbW9kdWxlcycsXG4gICAgICAgIHBhdGg6ICcvYXBwbGljYXRpb24tbGlzdCdcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtaWNyb3NlcnZpY2VzTm9kZSA9IG5ldyBOYXZpZ2F0b3JOb2RlKHtcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ01pY3Jvc2VydmljZXMnKSxcbiAgICAgICAgaWNvbjogJ21pY3JvY2hpcCcsXG4gICAgICAgIHBhdGg6ICcvbWljcm9zZXJ2aWNlcydcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm5hdnMucHVzaChcbiAgICAgICAgbmV3IE5hdmlnYXRvck5vZGUoe1xuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdFY29zeXN0ZW0nKSxcbiAgICAgICAgICBpY29uOiAnYzh5LWF0b20nLFxuICAgICAgICAgIHByaW9yaXR5OiAzMjAwLFxuICAgICAgICAgIGNoaWxkcmVuOiBbYXBwbGljYXRpb25zTm9kZSwgbWljcm9zZXJ2aWNlc05vZGVdXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYXZzO1xuICB9XG59XG4iXX0=