import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { AlertService, gettext } from '@c8y/ngx-components';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
import { omit } from 'lodash-es';
import { SINGLE_OP_STATUS_NAMES, SINGLE_OP_STATUS_PROPERTIES } from './single-operation-item.model';
var SingleOperationItemComponent = /** @class */ (function () {
    function SingleOperationItemComponent(bulkOperationsService, alertService) {
        this.bulkOperationsService = bulkOperationsService;
        this.alertService = alertService;
        this.device = {};
        this.showIfTextTruncated = false;
        this.singleOperationStatusNames = SINGLE_OP_STATUS_NAMES;
        this.singleOperationsStatusProperties = SINGLE_OP_STATUS_PROPERTIES;
        this.readOnly = false;
    }
    SingleOperationItemComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.iconClass = this.getIconClass();
                        _a = this;
                        return [4 /*yield*/, this.getDeviceMO(this.operation.deviceId)];
                    case 1:
                        _a.device = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.ngAfterViewInit = function () {
        this.isTextTruncated();
    };
    SingleOperationItemComponent.prototype.retrySingleOperation = function (singleOperation) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operationToCreate, er_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationToCreate = omit(singleOperation, [
                            'id',
                            'self',
                            'status',
                            'failureReason',
                            'creationTime',
                            'delivery'
                        ]);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.bulkOperationsService.createSingleOperation(operationToCreate)];
                    case 2:
                        _a.sent();
                        this.alertService.success(gettext('Operation created.'));
                        return [3 /*break*/, 4];
                    case 3:
                        er_1 = _a.sent();
                        this.alertService.addServerFailure(er_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.getIconClass = function () {
        var _this = this;
        return this.singleOperationsStatusProperties.find(function (operationProperties) { return operationProperties.label.toUpperCase() === _this.operation.status; }).iconClass;
    };
    SingleOperationItemComponent.prototype.getDeviceMO = function (deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inventoryMO;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.bulkOperationsService.getManagedObject(deviceId)];
                    case 1:
                        inventoryMO = _a.sent();
                        if (inventoryMO) {
                            return [2 /*return*/, inventoryMO.data];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SingleOperationItemComponent.prototype.isTextTruncated = function () {
        if (this.operation.failureReason) {
            var el = this.failureReasonRef.nativeElement;
            this.showIfTextTruncated = el.offsetWidth < el.scrollWidth ? true : false;
        }
    };
    SingleOperationItemComponent.ctorParameters = function () { return [
        { type: BulkOperationsService },
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], SingleOperationItemComponent.prototype, "operation", void 0);
    tslib_1.__decorate([
        Input()
    ], SingleOperationItemComponent.prototype, "readOnly", void 0);
    tslib_1.__decorate([
        ViewChild('failureReason', { static: true })
    ], SingleOperationItemComponent.prototype, "failureReasonRef", void 0);
    SingleOperationItemComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-single-operation-item',
            template: "<c8y-li class=\"c8y-list__item--double-actions\">\n  <c8y-li-icon>\n    <i [class]=\"iconClass\"></i>\n  </c8y-li-icon>\n  <div [ngClass]=\"{ 'content-flex-80': !readOnly, 'content-flex-50': readOnly }\">\n    <div class=\"col-4\">\n      <span class=\"m-r-4\">\n        <device-status [mo]=\"\"></device-status>\n      </span>\n      <a [routerLink]=\"['/device', operation.deviceId, 'device-info']\" routerLinkActive=\"active\">\n        {{ operation.deviceName }}\n      </a>\n    </div>\n    <div class=\"col-3\">\n      <small class=\"icon-flex text-muted\">\n        <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n        {{ operation.creationTime | c8yDate }}\n      </small>\n    </div>\n    <div class=\"col-5\">\n      <div class=\"flex-row\">\n        <span class=\"text-truncate\" #failureReason>\n          {{ operation.failureReason | translate }}\n        </span>\n        <a\n          *ngIf=\"showIfTextTruncated\"\n          class=\"m-l-8\"\n          popover=\"{{ operation.failureReason | translate }}\"\n          placement=\"left\"\n          outsideClick=\"true\"\n        >\n          <i [c8yIcon]=\"'info-circle text-primary'\"></i>\n        </a>\n        <div\n          class=\"showOnHover p-l-8 p-r-8 fit-h-20 flex-item-right\"\n          *ngIf=\"!readOnly && operation.status == singleOperationStatusNames.FAILED.toUpperCase()\"\n        >\n          <a\n            class=\"btn btn-default btn-xs\"\n            (click)=\"retrySingleOperation(operation)\"\n            title=\"{{ 'Retry operation' | translate }}\"\n          >\n            <i [c8yIcon]=\"'repeat m-r-4'\"></i>\n            <span translate>Retry operation</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n</c8y-li>\n"
        })
    ], SingleOperationItemComponent);
    return SingleOperationItemComponent;
}());
export { SingleOperationItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW9wZXJhdGlvbi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtbGlzdC8iLCJzb3VyY2VzIjpbInNpbmdsZS1vcGVyYXRpb24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQy9GLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFNcEc7SUFZRSxzQ0FDVSxxQkFBNEMsRUFDNUMsWUFBMEI7UUFEMUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQWJwQyxXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQzVCLCtCQUEwQixHQUFHLHNCQUFzQixDQUFDO1FBQ3BELHFDQUFnQyxHQUFHLDJCQUEyQixDQUFDO1FBSy9ELGFBQVEsR0FBWSxLQUFLLENBQUM7SUFNdkIsQ0FBQztJQUVFLCtDQUFRLEdBQWQ7Ozs7Ozt3QkFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzt3QkFDckMsS0FBQSxJQUFJLENBQUE7d0JBQVUscUJBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFBOzt3QkFBN0QsR0FBSyxNQUFNLEdBQUcsU0FBK0MsQ0FBQzs7Ozs7S0FDL0Q7SUFFRCxzREFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFSywyREFBb0IsR0FBMUIsVUFBMkIsZUFBZTs7Ozs7O3dCQUNsQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFOzRCQUM5QyxJQUFJOzRCQUNKLE1BQU07NEJBQ04sUUFBUTs0QkFDUixlQUFlOzRCQUNmLGNBQWM7NEJBQ2QsVUFBVTt5QkFDWCxDQUFDLENBQUM7Ozs7d0JBR0QscUJBQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLEVBQUE7O3dCQUF6RSxTQUF5RSxDQUFDO3dCQUMxRSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDOzs7O3dCQUV6RCxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUUsQ0FBQyxDQUFDOzs7Ozs7S0FFMUM7SUFFRCxtREFBWSxHQUFaO1FBQUEsaUJBSUM7UUFIQyxPQUFPLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQy9DLFVBQUEsbUJBQW1CLElBQUksT0FBQSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQWpFLENBQWlFLENBQ3pGLENBQUMsU0FBUyxDQUFDO0lBQ2QsQ0FBQztJQUVhLGtEQUFXLEdBQXpCLFVBQTBCLFFBQVE7Ozs7OzRCQUNaLHFCQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBQTs7d0JBQXpFLFdBQVcsR0FBRyxTQUEyRDt3QkFDL0UsSUFBSSxXQUFXLEVBQUU7NEJBQ2Ysc0JBQU8sV0FBVyxDQUFDLElBQUksRUFBQzt5QkFDekI7Ozs7O0tBQ0Y7SUFFTyxzREFBZSxHQUF2QjtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUU7WUFDaEMsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztZQUMvQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUMzRTtJQUNILENBQUM7O2dCQWpEZ0MscUJBQXFCO2dCQUM5QixZQUFZOztJQVBwQztRQURDLEtBQUssRUFBRTttRUFDYztJQUV0QjtRQURDLEtBQUssRUFBRTtrRUFDa0I7SUFDb0I7UUFBN0MsU0FBUyxDQUFDLGVBQWUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzswRUFBOEI7SUFWaEUsNEJBQTRCO1FBSnhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsdXREQUFxRDtTQUN0RCxDQUFDO09BQ1csNEJBQTRCLENBK0R4QztJQUFELG1DQUFDO0NBQUEsQUEvREQsSUErREM7U0EvRFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJT3BlcmF0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlLCBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvYnVsay1vcGVyYXRpb25zLXNlcnZpY2UnO1xuaW1wb3J0IHsgb21pdCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBTSU5HTEVfT1BfU1RBVFVTX05BTUVTLCBTSU5HTEVfT1BfU1RBVFVTX1BST1BFUlRJRVMgfSBmcm9tICcuL3NpbmdsZS1vcGVyYXRpb24taXRlbS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zaW5nbGUtb3BlcmF0aW9uLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vc2luZ2xlLW9wZXJhdGlvbi1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTaW5nbGVPcGVyYXRpb25JdGVtQ29tcG9uZW50IHtcbiAgZGV2aWNlID0ge307XG4gIHNob3dJZlRleHRUcnVuY2F0ZWQgPSBmYWxzZTtcbiAgc2luZ2xlT3BlcmF0aW9uU3RhdHVzTmFtZXMgPSBTSU5HTEVfT1BfU1RBVFVTX05BTUVTO1xuICBzaW5nbGVPcGVyYXRpb25zU3RhdHVzUHJvcGVydGllcyA9IFNJTkdMRV9PUF9TVEFUVVNfUFJPUEVSVElFUztcbiAgaWNvbkNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIG9wZXJhdGlvbjogSU9wZXJhdGlvbjtcbiAgQElucHV0KClcbiAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQFZpZXdDaGlsZCgnZmFpbHVyZVJlYXNvbicsIHsgc3RhdGljOiB0cnVlIH0pIGZhaWx1cmVSZWFzb25SZWY6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBidWxrT3BlcmF0aW9uc1NlcnZpY2U6IEJ1bGtPcGVyYXRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmljb25DbGFzcyA9IHRoaXMuZ2V0SWNvbkNsYXNzKCk7XG4gICAgdGhpcy5kZXZpY2UgPSBhd2FpdCB0aGlzLmdldERldmljZU1PKHRoaXMub3BlcmF0aW9uLmRldmljZUlkKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmlzVGV4dFRydW5jYXRlZCgpO1xuICB9XG5cbiAgYXN5bmMgcmV0cnlTaW5nbGVPcGVyYXRpb24oc2luZ2xlT3BlcmF0aW9uKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uVG9DcmVhdGUgPSBvbWl0KHNpbmdsZU9wZXJhdGlvbiwgW1xuICAgICAgJ2lkJyxcbiAgICAgICdzZWxmJyxcbiAgICAgICdzdGF0dXMnLFxuICAgICAgJ2ZhaWx1cmVSZWFzb24nLFxuICAgICAgJ2NyZWF0aW9uVGltZScsXG4gICAgICAnZGVsaXZlcnknXG4gICAgXSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5idWxrT3BlcmF0aW9uc1NlcnZpY2UuY3JlYXRlU2luZ2xlT3BlcmF0aW9uKG9wZXJhdGlvblRvQ3JlYXRlKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnT3BlcmF0aW9uIGNyZWF0ZWQuJykpO1xuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGVyKTtcbiAgICB9XG4gIH1cblxuICBnZXRJY29uQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2luZ2xlT3BlcmF0aW9uc1N0YXR1c1Byb3BlcnRpZXMuZmluZChcbiAgICAgIG9wZXJhdGlvblByb3BlcnRpZXMgPT4gb3BlcmF0aW9uUHJvcGVydGllcy5sYWJlbC50b1VwcGVyQ2FzZSgpID09PSB0aGlzLm9wZXJhdGlvbi5zdGF0dXNcbiAgICApLmljb25DbGFzcztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RGV2aWNlTU8oZGV2aWNlSWQpIHtcbiAgICBjb25zdCBpbnZlbnRvcnlNTyA9IGF3YWl0IHRoaXMuYnVsa09wZXJhdGlvbnNTZXJ2aWNlLmdldE1hbmFnZWRPYmplY3QoZGV2aWNlSWQpO1xuICAgIGlmIChpbnZlbnRvcnlNTykge1xuICAgICAgcmV0dXJuIGludmVudG9yeU1PLmRhdGE7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc1RleHRUcnVuY2F0ZWQoKSB7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uLmZhaWx1cmVSZWFzb24pIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpcy5mYWlsdXJlUmVhc29uUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICB0aGlzLnNob3dJZlRleHRUcnVuY2F0ZWQgPSBlbC5vZmZzZXRXaWR0aCA8IGVsLnNjcm9sbFdpZHRoID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19