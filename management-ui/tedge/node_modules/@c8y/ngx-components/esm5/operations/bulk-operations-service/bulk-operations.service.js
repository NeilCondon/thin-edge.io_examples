import * as tslib_1 from "tslib";
import { Location } from '@angular/common';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { flatten, has, isUndefined } from 'lodash-es';
import { Subject } from 'rxjs';
import { IdReference, IManagedObject, InventoryService, IOperation, IOperationBulk, IResult, OperationBulkService, OperationService } from '@c8y/client';
export var baseUrl = 'devicecontrol/bulk/creation/';
export var HOOK_LIST_BULK_TYPE = new InjectionToken('LIST_BULK_TYPE');
var BulkOperationsService = /** @class */ (function () {
    function BulkOperationsService(operationBulkService, operationService, inventoryService, location, bulkTypes) {
        this.operationBulkService = operationBulkService;
        this.operationService = operationService;
        this.inventoryService = inventoryService;
        this.location = location;
        this.DD_LOW_COUNT = 10;
        this.firmwareId = new Subject();
        this.bulkTypes = flatten(bulkTypes);
        this.bulkTypes = this.bulkTypes.map(function (type) {
            if (isUndefined(type.selected)) {
                type.selected = false;
            }
            return type;
        });
    }
    BulkOperationsService.prototype.getBulkOperations = function (customFilter) {
        if (customFilter === void 0) { customFilter = {}; }
        var filter = tslib_1.__assign({ withTotalPages: true, withDeleted: true, pageSize: 50 }, customFilter);
        return this.operationBulkService.list(filter);
    };
    BulkOperationsService.prototype.getBulkOperationById = function (bulkOperationId) {
        return this.operationBulkService.detail(bulkOperationId);
    };
    BulkOperationsService.prototype.createBulkOperation = function (bulkOperation) {
        return this.operationBulkService.create(bulkOperation);
    };
    BulkOperationsService.prototype.deleteBulkOperation = function (bulkOperationId) {
        return this.operationBulkService.delete(bulkOperationId);
    };
    BulkOperationsService.prototype.updateBulkOperation = function (bulkOperation) {
        return this.operationBulkService.update(bulkOperation);
    };
    BulkOperationsService.prototype.getOperation = function (id) {
        return this.operationService.detail(id);
    };
    BulkOperationsService.prototype.returnToBulkOperationOverview = function () {
        this.location.back();
    };
    BulkOperationsService.prototype.setBulkTypes = function (list) {
        this.bulkTypes = list;
    };
    BulkOperationsService.prototype.getBulkTypes = function () {
        return this.bulkTypes;
    };
    BulkOperationsService.prototype.setFirmwareId = function (id) {
        this.firmwareId.next(id);
    };
    BulkOperationsService.prototype.createGroup = function (deviceQueryDataString) {
        var dynamicGroup = {
            name: 'Bulk operations group',
            type: 'c8y_DynamicGroup',
            c8y_IsDynamicGroup: { invisible: {} },
            c8y_DeviceQueryString: deviceQueryDataString
        };
        return this.inventoryService.create(dynamicGroup);
    };
    BulkOperationsService.prototype.scheduleBulkOperation = function (deviceQueryString, details) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dynamicGroup, bulkOperation;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createGroup(deviceQueryString)];
                    case 1:
                        dynamicGroup = _a.sent();
                        bulkOperation = {
                            groupId: dynamicGroup.data.id,
                            operationPrototype: details.prototype,
                            creationRamp: details.schedule.delayInSeconds,
                            startDate: details.schedule.scheduledDate.toISOString(),
                            note: details.note
                        };
                        return [4 /*yield*/, this.createBulkOperation(bulkOperation)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BulkOperationsService.prototype.getSingleOperationsByStatus = function (status, bulkOperationId) {
        var filter = {
            withTotalPages: true,
            bulkOperationId: bulkOperationId,
            status: (status && status.toUpperCase()) || ''
        };
        return this.operationService.list(filter);
    };
    BulkOperationsService.prototype.createSingleOperation = function (operation) {
        return this.operationService.create(operation);
    };
    BulkOperationsService.prototype.updateSingleOperation = function (partialUpdateObject) {
        return this.operationService.update(partialUpdateObject);
    };
    BulkOperationsService.prototype.getManagedObject = function (deviceId) {
        return this.inventoryService.detail(deviceId);
    };
    BulkOperationsService.prototype.retrieveBulkOperationType = function (operation) {
        var type;
        this.bulkTypes.some(function (t) {
            if (t.fragments.some(function (fragment) { return has(operation, fragment); })) {
                type = t.type;
                return true;
            }
        });
        return type;
    };
    BulkOperationsService.ctorParameters = function () { return [
        { type: OperationBulkService },
        { type: OperationService },
        { type: InventoryService },
        { type: Location },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_LIST_BULK_TYPE,] }] }
    ]; };
    BulkOperationsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(HOOK_LIST_BULK_TYPE))
    ], BulkOperationsService);
    return BulkOperationsService;
}());
export { BulkOperationsService };
//# sourceMappingURL=data:application/json;base64,