import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AlarmsDeviceGridColumn, DeviceGridComponent, GroupDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, StatusDeviceGridColumn, TypeDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { FilteringActionType } from '@c8y/ngx-components';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
var DeviceSelectorComponent = /** @class */ (function () {
    function DeviceSelectorComponent() {
        this.typeColumn = new TypeDeviceGridColumn();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = [
            new StatusDeviceGridColumn(),
            new NameDeviceGridColumn(),
            this.typeColumn,
            new ModelDeviceGridColumn(),
            new GroupDeviceGridColumn(),
            new RegistrationDateDeviceGridColumn(),
            new AlarmsDeviceGridColumn()
        ];
        this.unsubscribe$ = new Subject();
    }
    DeviceSelectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.deviceTypes) {
            this.deviceTypes
                .pipe(distinctUntilChanged(), takeUntil(this.unsubscribe$))
                .subscribe(function (types) {
                _this.deviceGrid.updateFiltering([_this.typeColumn.name], {
                    type: types && types.length
                        ? FilteringActionType.ApplyFilter
                        : FilteringActionType.ResetFilter,
                    payload: types
                        ? {
                            filteringModifier: {
                                externalFilterQuery: {
                                    types: types
                                }
                            }
                        }
                        : undefined
                });
            });
        }
    };
    DeviceSelectorComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next(true);
        this.unsubscribe$.complete();
    };
    tslib_1.__decorate([
        ViewChild(DeviceGridComponent, { static: true })
    ], DeviceSelectorComponent.prototype, "deviceGrid", void 0);
    tslib_1.__decorate([
        Input()
    ], DeviceSelectorComponent.prototype, "deviceTypes", void 0);
    tslib_1.__decorate([
        Output()
    ], DeviceSelectorComponent.prototype, "onDeviceQueryStringChange", void 0);
    DeviceSelectorComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-device-selector',
            template: "<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [columns]=\"columns\"\n  [actionControls]=\"[]\"\n  [infiniteScroll]=\"'auto'\"\n  (onDeviceQueryStringChange)=\"onDeviceQueryStringChange.emit($event)\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n"
        })
    ], DeviceSelectorComponent);
    return DeviceSelectorComponent;
}());
export { DeviceSelectorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9kZXZpY2Utc2VsZWN0b3IvIiwic291cmNlcyI6WyJkZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNOLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLG9CQUFvQixFQUNwQixnQ0FBZ0MsRUFDaEMsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNyQixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBVSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTWpFO0lBSkE7UUFXRSxlQUFVLEdBQVcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBR2hELDhCQUF5QixHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBRTdFLFlBQU8sR0FBYTtZQUNsQixJQUFJLHNCQUFzQixFQUFFO1lBQzVCLElBQUksb0JBQW9CLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFVBQVU7WUFDZixJQUFJLHFCQUFxQixFQUFFO1lBQzNCLElBQUkscUJBQXFCLEVBQUU7WUFDM0IsSUFBSSxnQ0FBZ0MsRUFBRTtZQUN0QyxJQUFJLHNCQUFzQixFQUFFO1NBQzdCLENBQUM7UUFFTSxpQkFBWSxHQUFxQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBaUN6RCxDQUFDO0lBL0JDLDBDQUFRLEdBQVI7UUFBQSxpQkF5QkM7UUF4QkMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXO2lCQUNiLElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUM3QjtpQkFDQSxTQUFTLENBQUMsVUFBQyxLQUFlO2dCQUN6QixLQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3RELElBQUksRUFDRixLQUFLLElBQUksS0FBSyxDQUFDLE1BQU07d0JBQ25CLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO3dCQUNqQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsV0FBVztvQkFDckMsT0FBTyxFQUFFLEtBQUs7d0JBQ1osQ0FBQyxDQUFDOzRCQUNFLGlCQUFpQixFQUFFO2dDQUNqQixtQkFBbUIsRUFBRTtvQ0FDbkIsS0FBSyxPQUFBO2lDQUNOOzZCQUNGO3lCQUNGO3dCQUNILENBQUMsQ0FBQyxTQUFTO2lCQUNkLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRUQsNkNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQXBERDtRQURDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzsrREFDakI7SUFHaEM7UUFEQyxLQUFLLEVBQUU7Z0VBQzBCO0lBS2xDO1FBREMsTUFBTSxFQUFFOzhFQUNvRTtJQVZsRSx1QkFBdUI7UUFKbkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQix3Z0JBQTZDO1NBQzlDLENBQUM7T0FDVyx1QkFBdUIsQ0F1RG5DO0lBQUQsOEJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXZEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFsYXJtc0RldmljZUdyaWRDb2x1bW4sXG4gIERldmljZUdyaWRDb21wb25lbnQsXG4gIEdyb3VwRGV2aWNlR3JpZENvbHVtbixcbiAgTW9kZWxEZXZpY2VHcmlkQ29sdW1uLFxuICBOYW1lRGV2aWNlR3JpZENvbHVtbixcbiAgUmVnaXN0cmF0aW9uRGF0ZURldmljZUdyaWRDb2x1bW4sXG4gIFN0YXR1c0RldmljZUdyaWRDb2x1bW4sXG4gIFR5cGVEZXZpY2VHcmlkQ29sdW1uXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWdyaWQnO1xuaW1wb3J0IHsgQ29sdW1uLCBGaWx0ZXJpbmdBY3Rpb25UeXBlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZGV2aWNlLXNlbGVjdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICdkZXZpY2Utc2VsZWN0b3IuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZVNlbGVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKERldmljZUdyaWRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pXG4gIGRldmljZUdyaWQ6IERldmljZUdyaWRDb21wb25lbnQ7XG5cbiAgQElucHV0KClcbiAgZGV2aWNlVHlwZXM6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuXG4gIHR5cGVDb2x1bW46IENvbHVtbiA9IG5ldyBUeXBlRGV2aWNlR3JpZENvbHVtbigpO1xuXG4gIEBPdXRwdXQoKVxuICBvbkRldmljZVF1ZXJ5U3RyaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbHVtbnM6IENvbHVtbltdID0gW1xuICAgIG5ldyBTdGF0dXNEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IE5hbWVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgdGhpcy50eXBlQ29sdW1uLFxuICAgIG5ldyBNb2RlbERldmljZUdyaWRDb2x1bW4oKSxcbiAgICBuZXcgR3JvdXBEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IFJlZ2lzdHJhdGlvbkRhdGVEZXZpY2VHcmlkQ29sdW1uKCksXG4gICAgbmV3IEFsYXJtc0RldmljZUdyaWRDb2x1bW4oKVxuICBdO1xuXG4gIHByaXZhdGUgdW5zdWJzY3JpYmUkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZXZpY2VUeXBlcykge1xuICAgICAgdGhpcy5kZXZpY2VUeXBlc1xuICAgICAgICAucGlwZShcbiAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICAgIHRha2VVbnRpbCh0aGlzLnVuc3Vic2NyaWJlJClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCh0eXBlczogc3RyaW5nW10pID0+IHtcbiAgICAgICAgICB0aGlzLmRldmljZUdyaWQudXBkYXRlRmlsdGVyaW5nKFt0aGlzLnR5cGVDb2x1bW4ubmFtZV0sIHtcbiAgICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICAgIHR5cGVzICYmIHR5cGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gRmlsdGVyaW5nQWN0aW9uVHlwZS5BcHBseUZpbHRlclxuICAgICAgICAgICAgICAgIDogRmlsdGVyaW5nQWN0aW9uVHlwZS5SZXNldEZpbHRlcixcbiAgICAgICAgICAgIHBheWxvYWQ6IHR5cGVzXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgZmlsdGVyaW5nTW9kaWZpZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMudW5zdWJzY3JpYmUkLm5leHQodHJ1ZSk7XG4gICAgdGhpcy51bnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19