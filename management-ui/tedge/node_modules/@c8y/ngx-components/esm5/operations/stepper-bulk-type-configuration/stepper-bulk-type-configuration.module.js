import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';
import { RepositoryModule } from '@c8y/ngx-components/repository';
import { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { HOOK_LIST_BULK_TYPE, baseUrl, BulkOperationType } from '@c8y/ngx-components/operations/bulk-operations-service';
import { StepperBulkTypeConfigurationComponent } from './stepper-bulk-type-configuration.component';
var ɵ0 = {
    type: BulkOperationType.CONFIGURATION,
    c8yIcon: 'cogs',
    name: gettext('Configuration update'),
    path: baseUrl + "configuration",
    component: StepperBulkTypeConfigurationComponent,
    fragments: ['c8y_DownloadConfigFile', 'c8y_Configuration'],
    selected: false
};
/** Module for the 'Configuration update' operation type stepper */
var StepperBulkTypeConfigurationModule = /** @class */ (function () {
    function StepperBulkTypeConfigurationModule() {
    }
    StepperBulkTypeConfigurationModule = tslib_1.__decorate([
        NgModule({
            declarations: [StepperBulkTypeConfigurationComponent],
            imports: [
                CoreModule,
                FormsModule,
                ReactiveFormsModule,
                BulkOperationStepperModule,
                RepositoryModule
            ],
            providers: [
                {
                    provide: HOOK_LIST_BULK_TYPE,
                    useValue: ɵ0,
                    multi: true
                }
            ],
            entryComponents: [StepperBulkTypeConfigurationComponent],
            exports: [StepperBulkTypeConfigurationComponent]
        })
    ], StepperBulkTypeConfigurationModule);
    return StepperBulkTypeConfigurationModule;
}());
export { StepperBulkTypeConfigurationModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL29wZXJhdGlvbnMvc3RlcHBlci1idWxrLXR5cGUtY29uZmlndXJhdGlvbi8iLCJzb3VyY2VzIjpbInN0ZXBwZXItYnVsay10eXBlLWNvbmZpZ3VyYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLGlCQUFpQixFQUNsQixNQUFNLHdEQUF3RCxDQUFDO0FBRWhFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO1NBZXBGO0lBQ1IsSUFBSSxFQUFFLGlCQUFpQixDQUFDLGFBQWE7SUFDckMsT0FBTyxFQUFFLE1BQU07SUFDZixJQUFJLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQ3JDLElBQUksRUFBSyxPQUFPLGtCQUFlO0lBQy9CLFNBQVMsRUFBRSxxQ0FBcUM7SUFDaEQsU0FBUyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsbUJBQW1CLENBQUM7SUFDMUQsUUFBUSxFQUFFLEtBQUs7Q0FDaEI7QUFyQlAsbUVBQW1FO0FBNEJuRTtJQUFBO0lBQWlELENBQUM7SUFBckMsa0NBQWtDO1FBM0I5QyxRQUFRLENBQUM7WUFDUixZQUFZLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztZQUNyRCxPQUFPLEVBQUU7Z0JBQ1AsVUFBVTtnQkFDVixXQUFXO2dCQUNYLG1CQUFtQjtnQkFDbkIsMEJBQTBCO2dCQUMxQixnQkFBZ0I7YUFDakI7WUFDRCxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsUUFBUSxJQVFQO29CQUNELEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7WUFDRCxlQUFlLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztZQUN4RCxPQUFPLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQztTQUNqRCxDQUFDO09BQ1csa0NBQWtDLENBQUc7SUFBRCx5Q0FBQztDQUFBLEFBQWxELElBQWtEO1NBQXJDLGtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBGb3Jtc01vZHVsZSwgZ2V0dGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeU1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBCdWxrT3BlcmF0aW9uU3RlcHBlck1vZHVsZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbi1zdGVwcGVyJztcbmltcG9ydCB7XG4gIEhPT0tfTElTVF9CVUxLX1RZUEUsXG4gIGJhc2VVcmwsXG4gIEJ1bGtPcGVyYXRpb25UeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5cbmltcG9ydCB7IFN0ZXBwZXJCdWxrVHlwZUNvbmZpZ3VyYXRpb25Db21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItYnVsay10eXBlLWNvbmZpZ3VyYXRpb24uY29tcG9uZW50JztcblxuLyoqIE1vZHVsZSBmb3IgdGhlICdDb25maWd1cmF0aW9uIHVwZGF0ZScgb3BlcmF0aW9uIHR5cGUgc3RlcHBlciAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbU3RlcHBlckJ1bGtUeXBlQ29uZmlndXJhdGlvbkNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb3JlTW9kdWxlLFxuICAgIEZvcm1zTW9kdWxlLFxuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgQnVsa09wZXJhdGlvblN0ZXBwZXJNb2R1bGUsXG4gICAgUmVwb3NpdG9yeU1vZHVsZVxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBIT09LX0xJU1RfQlVMS19UWVBFLFxuICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgdHlwZTogQnVsa09wZXJhdGlvblR5cGUuQ09ORklHVVJBVElPTixcbiAgICAgICAgYzh5SWNvbjogJ2NvZ3MnLFxuICAgICAgICBuYW1lOiBnZXR0ZXh0KCdDb25maWd1cmF0aW9uIHVwZGF0ZScpLFxuICAgICAgICBwYXRoOiBgJHtiYXNlVXJsfWNvbmZpZ3VyYXRpb25gLFxuICAgICAgICBjb21wb25lbnQ6IFN0ZXBwZXJCdWxrVHlwZUNvbmZpZ3VyYXRpb25Db21wb25lbnQsXG4gICAgICAgIGZyYWdtZW50czogWydjOHlfRG93bmxvYWRDb25maWdGaWxlJywgJ2M4eV9Db25maWd1cmF0aW9uJ10sXG4gICAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtTdGVwcGVyQnVsa1R5cGVDb25maWd1cmF0aW9uQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1N0ZXBwZXJCdWxrVHlwZUNvbmZpZ3VyYXRpb25Db21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFN0ZXBwZXJCdWxrVHlwZUNvbmZpZ3VyYXRpb25Nb2R1bGUge31cbiJdfQ==