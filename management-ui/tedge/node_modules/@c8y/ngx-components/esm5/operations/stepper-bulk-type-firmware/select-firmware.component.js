import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';
import { memoize } from '@c8y/ngx-components';
import { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';
import { gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { property, get } from 'lodash-es';
import { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';
var SelectFirmwareComponent = /** @class */ (function () {
    function SelectFirmwareComponent(repositoryService, bulkOpsService, translate) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.bulkOpsService = bulkOpsService;
        this.translate = translate;
        this.firmware = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.textFilter$ = new BehaviorSubject('');
        this.firmwares$ = this.textFilter$
            .pipe(debounceTime(400), distinctUntilChanged())
            .pipe(switchMap(function (text) { return _this.getFirmwares(text); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available');
        this.DESCRIPTION_NOT_AVAILABLE = gettext('No description available');
    }
    SelectFirmwareComponent.prototype.ngOnInit = function () {
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    };
    SelectFirmwareComponent.prototype.selectFirmware = function (selected, fw) {
        if (selected) {
            this.firmware.emit(fw);
        }
    };
    SelectFirmwareComponent.prototype.getBaseVersionsCount$ = function (firmware) {
        var _this = this;
        return this.firmwares$.pipe(switchMap(function () { return _this.repositoryService.getBaseVersionsCount$(firmware); }), shareReplay(1));
    };
    SelectFirmwareComponent.prototype.getDescriptionTitle = function (firmware) {
        return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getDeviceTypeTitle = function (firmware) {
        return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getFirmwares = function (partialName) {
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName: partialName });
    };
    SelectFirmwareComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: BulkOperationsService },
        { type: TranslateService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], SelectFirmwareComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output()
    ], SelectFirmwareComponent.prototype, "firmware", void 0);
    tslib_1.__decorate([
        memoize(property('id'))
    ], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);
    SelectFirmwareComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-select-firmware-step',
            template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select firmware' | translate }}</h4>\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          title=\"{{ 'Filter firmware\u2026' | translate }}\"\n          placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n          [ngModel]=\"textFilter$ | async\"\n          (ngModelChange)=\"textFilter$.next($event)\"\n        />\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n          <i\n            c8yIcon=\"times\"\n            class=\"text-muted\"\n            *ngIf=\"(textFilter$ | async).length > 0\"\n            (click)=\"textFilter$.next('')\"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf=\"(textFilter$ | async).length > 0 && elementCount===0\">\n</c8y-search-result-empty>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\">\n        <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectFirmware($event, firmware)\" [selected]=\"firmware === selected\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class=\"col-4\">\n              <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n                <small *ngIf=\"firmware.description; else noDesc\">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class=\"text-muted\" translate>No description available</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class=\"text-muted\" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning\">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf=\"!isLegacy(firmware)\">\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
        })
    ], SelectFirmwareComponent);
    return SelectFirmwareComponent;
}());
export { SelectFirmwareComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWZpcm13YXJlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9zdGVwcGVyLWJ1bGstdHlwZS1maXJtd2FyZS8iLCJzb3VyY2VzIjpbInNlbGVjdC1maXJtd2FyZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFNL0Y7SUF1QkUsaUNBQ1UsaUJBQW9DLEVBQ3BDLGNBQXFDLEVBQ3JDLFNBQTJCO1FBSHJDLGlCQUlJO1FBSE0sc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxtQkFBYyxHQUFkLGNBQWMsQ0FBdUI7UUFDckMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUF4QjNCLGFBQVEsR0FBaUMsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFDdEYsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIsaUJBQVks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dEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRhcCwgc3dpdGNoTWFwLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJlcG9zaXRvcnlTZXJ2aWNlLCBSZXBvc2l0b3J5VHlwZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvcmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJUmVzdWx0TGlzdCwgSU1hbmFnZWRPYmplY3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgZ2V0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IEJ1bGtPcGVyYXRpb25zU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvb3BlcmF0aW9ucy9idWxrLW9wZXJhdGlvbnMtc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1zZWxlY3QtZmlybXdhcmUtc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAnc2VsZWN0LWZpcm13YXJlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWxlY3RGaXJtd2FyZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHNlbGVjdGVkOiBJTWFuYWdlZE9iamVjdDtcbiAgQE91dHB1dCgpIGZpcm13YXJlOiBFdmVudEVtaXR0ZXI8SU1hbmFnZWRPYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxJTWFuYWdlZE9iamVjdD4oKTtcbiAgZWxlbWVudENvdW50OiBudW1iZXIgPSAwO1xuICBERF9MT1dfQ09VTlQ6IG51bWJlciA9IDEwO1xuICB0ZXh0RmlsdGVyJDogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KCcnKTtcblxuICBmaXJtd2FyZXMkOiBPYnNlcnZhYmxlPElSZXN1bHRMaXN0PElNYW5hZ2VkT2JqZWN0Pj4gPSB0aGlzLnRleHRGaWx0ZXIkXG4gICAgLnBpcGUoXG4gICAgICBkZWJvdW5jZVRpbWUoNDAwKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApXG4gICAgLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAodGV4dCA9PiB0aGlzLmdldEZpcm13YXJlcyh0ZXh0KSksXG4gICAgICB0YXAocmVzcCA9PiB7XG4gICAgICAgIHRoaXMuZWxlbWVudENvdW50ID0gcmVzcC5kYXRhID8gcmVzcC5kYXRhLmxlbmd0aCA6IDA7XG4gICAgICB9KSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgaXNMZWdhY3kgPSB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmlzTGVnYWN5RW50cnkuYmluZCh0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlKTtcbiAgcmVhZG9ubHkgREVWSUNFX1RZUEVfTk9UX0FWQUlMQUJMRTogc3RyaW5nID0gZ2V0dGV4dCgnTm8gZGV2aWNlIHR5cGUgYXZhaWxhYmxlJyk7XG4gIHJlYWRvbmx5IERFU0NSSVBUSU9OX05PVF9BVkFJTEFCTEU6IHN0cmluZyA9IGdldHRleHQoJ05vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZScpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVwb3NpdG9yeVNlcnZpY2U6IFJlcG9zaXRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYnVsa09wc1NlcnZpY2U6IEJ1bGtPcGVyYXRpb25zU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ERF9MT1dfQ09VTlQgPSB0aGlzLmJ1bGtPcHNTZXJ2aWNlLkREX0xPV19DT1VOVDtcbiAgfVxuXG4gIHNlbGVjdEZpcm13YXJlKHNlbGVjdGVkOiBib29sZWFuLCBmdzogSU1hbmFnZWRPYmplY3QpIHtcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuZmlybXdhcmUuZW1pdChmdyk7XG4gICAgfVxuICB9XG5cbiAgQG1lbW9pemUocHJvcGVydHkoJ2lkJykpXG4gIGdldEJhc2VWZXJzaW9uc0NvdW50JChmaXJtd2FyZTogSU1hbmFnZWRPYmplY3QpOiBPYnNlcnZhYmxlPG51bWJlciB8IHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmZpcm13YXJlcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLnJlcG9zaXRvcnlTZXJ2aWNlLmdldEJhc2VWZXJzaW9uc0NvdW50JChmaXJtd2FyZSkpLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuICB9XG5cbiAgZ2V0RGVzY3JpcHRpb25UaXRsZShmaXJtd2FyZTogSU1hbmFnZWRPYmplY3QpOiBzdHJpbmcge1xuICAgIHJldHVybiBnZXQoZmlybXdhcmUsICdkZXNjcmlwdGlvbicsIHRoaXMudHJhbnNsYXRlLmluc3RhbnQodGhpcy5ERVNDUklQVElPTl9OT1RfQVZBSUxBQkxFKSk7XG4gIH1cblxuICBnZXREZXZpY2VUeXBlVGl0bGUoZmlybXdhcmU6IElNYW5hZ2VkT2JqZWN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gZ2V0KGZpcm13YXJlLCAnYzh5X0ZpbHRlci50eXBlJywgdGhpcy50cmFuc2xhdGUuaW5zdGFudCh0aGlzLkRFVklDRV9UWVBFX05PVF9BVkFJTEFCTEUpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmlybXdhcmVzKHBhcnRpYWxOYW1lPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeVNlcnZpY2UubGlzdFJlcG9zaXRvcnlFbnRyaWVzKFJlcG9zaXRvcnlUeXBlLkZJUk1XQVJFLCB7IHBhcnRpYWxOYW1lIH0pO1xuICB9XG59XG4iXX0=