import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AlertService } from '@c8y/ngx-components';
import { orderBy, isEqual, remove, some } from 'lodash-es';
import { InventoryService, IdReference } from '@c8y/client';
import { FetchClient, IFetchOptions } from '@c8y/client';
var ReportsService = /** @class */ (function () {
    function ReportsService(alertService, inventoryService, client) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.microserviceUrl = '/service/reporting/schedule';
        this.headers = { 'Content-Type': 'application/json' };
    }
    ReportsService.prototype.getExport = function (exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var exp, exportDetail, data, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryService.detail(exportId)];
                    case 1:
                        exportDetail = _a.sent();
                        data = exportDetail.data, res = exportDetail.res;
                        if (res.status !== 200) {
                            this.alertService.addServerFailure({ data: data, res: res });
                        }
                        else {
                            exp = data ? data : {};
                        }
                        return [2 /*return*/, exp];
                }
            });
        });
    };
    ReportsService.prototype.getScheduleList = function (exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var exp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExport(exportId)];
                    case 1:
                        exp = _a.sent();
                        return [2 /*return*/, this.extractScheduleListFromExport(exp)];
                }
            });
        });
    };
    ReportsService.prototype.extractScheduleListFromExport = function (exp) {
        var scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    };
    ReportsService.prototype.addSchedule = function (schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [], [schedule])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.prototype.updateSchedule = function (oldSchedule, schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [oldSchedule], [schedule])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.prototype.updateSchedules = function (exportId, schedulesToRemove, schedulesToAdd) {
        if (schedulesToRemove === void 0) { schedulesToRemove = []; }
        if (schedulesToAdd === void 0) { schedulesToAdd = []; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var success, exp, schedules, _a, data, res;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        success = false;
                        return [4 /*yield*/, this.getExport(exportId)];
                    case 1:
                        exp = _b.sent();
                        schedules = this.extractScheduleListFromExport(exp);
                        remove(schedules, function (schedule) {
                            return some(schedulesToRemove, function (scheduleToRemove) { return isEqual(schedule, scheduleToRemove); });
                        });
                        schedules.push.apply(schedules, schedulesToAdd);
                        exp.c8y_ScheduleConfiguration = schedules;
                        return [4 /*yield*/, this.inventoryService.update(exp)];
                    case 2:
                        _a = _b.sent(), data = _a.data, res = _a.res;
                        if (!(res.status === 200)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.reschedule(exportId)];
                    case 3:
                        success = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        this.alertService.addServerFailure({ data: data, res: res });
                        _b.label = 5;
                    case 5: return [2 /*return*/, success];
                }
            });
        });
    };
    ReportsService.prototype.reschedule = function (exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, rescheduling;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: 'PUT',
                            headers: this.headers
                        };
                        return [4 /*yield*/, this.client.fetch(this.microserviceUrl + "/" + exportId, options)];
                    case 1:
                        rescheduling = _a.sent();
                        return [2 /*return*/, rescheduling.status === 200];
                }
            });
        });
    };
    ReportsService.prototype.deleteSchedule = function (schedule, exportId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSchedules(exportId, [schedule], [])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ReportsService.ctorParameters = function () { return [
        { type: AlertService },
        { type: InventoryService },
        { type: FetchClient }
    ]; };
    ReportsService = tslib_1.__decorate([
        Injectable()
    ], ReportsService);
    return ReportsService;
}());
export { ReportsService };
//# sourceMappingURL=data:application/json;base64,