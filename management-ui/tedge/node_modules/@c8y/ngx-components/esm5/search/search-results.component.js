import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SearchGridComponent } from './search-grid.component';
import { FilteringActionType, AlertService, Status, gettext, Alert } from '@c8y/ngx-components';
var SearchResultsComponent = /** @class */ (function () {
    function SearchResultsComponent(route, alert) {
        this.route = route;
        this.alert = alert;
        this.filter = '';
        this.searchTerm = '';
        this.unsubscribe$ = new Subject();
    }
    SearchResultsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.queryParams.subscribe(function (params) {
            if (params.filter) {
                _this.filteringName = params.filter;
            }
        });
    };
    SearchResultsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.route.queryParams
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function (_a) {
            var filter = _a.filter, search = _a.search;
            return _this.onQueryParamsChange(filter, search);
        });
        this.searchGrid.dataGrid.searchText$.pipe(takeUntil(this.unsubscribe$)).subscribe(function (text) {
            if (text) {
                _this.resetFilter();
            }
            _this.searchTerm = text;
        });
        this.searchGrid.dataGrid.onFilter
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function () { return _this.resetSearch(); });
        // to prevent race condition (search empty):
        this.searchTerm = this.route.snapshot.queryParams.search || '';
    };
    SearchResultsComponent.prototype.resetSearch = function () {
        this.searchTerm = '';
        if (this.searchTerm) {
            this.alert.add({
                text: gettext('Search reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
        }
    };
    SearchResultsComponent.prototype.resetFilter = function () {
        this.filter = '';
        if (this.searchGrid.dataGrid.filteringApplied) {
            this.alert.add({
                text: gettext('Filter reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
            this.searchGrid.dataGrid.clearFilters();
        }
    };
    SearchResultsComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    SearchResultsComponent.prototype.onQueryParamsChange = function (filter, searchTerm) {
        if (!this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
        else if (this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
    };
    SearchResultsComponent.prototype.shouldFilter = function (filter) {
        if (!filter) {
            return false;
        }
        this.resetSearch();
        this.filter = filter || '';
        this.searchGrid.updateFiltering(['name'], {
            type: FilteringActionType.ApplyFilter,
            payload: {
                filteringModifier: {
                    externalFilterQuery: {
                        names: [this.filter]
                    }
                }
            }
        });
        return true;
    };
    SearchResultsComponent.prototype.search = function (searchTerm) {
        this.searchTerm = searchTerm || '';
        this.searchGrid.dataGrid.searchText$.next(this.searchTerm);
    };
    SearchResultsComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: AlertService }
    ]; };
    tslib_1.__decorate([
        ViewChild(SearchGridComponent, { static: true })
    ], SearchResultsComponent.prototype, "searchGrid", void 0);
    SearchResultsComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-search-results',
            template: "<c8y-title>\n  <span translate class=\"p-r-4\">Search</span>\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"searchTerm\"\n    [translateParams]=\"{\n      searchHint: searchTerm\n    }\"\n    >searching \"{{ searchHint }}\"</small\n  >\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"filter\"\n    [translateParams]=\"{\n      filterHint: filter\n    }\"\n    >filtered by \"{{ filterHint }}\"</small\n  >\n</c8y-title>\n\n<c8y-search-grid [searchText]=\"searchTerm\" [filteringName]=\"filteringName\"></c8y-search-grid>\n"
        })
    ], SearchResultsComponent);
    return SearchResultsComponent;
}());
export { SearchResultsComponent };
//# sourceMappingURL=data:application/json;base64,