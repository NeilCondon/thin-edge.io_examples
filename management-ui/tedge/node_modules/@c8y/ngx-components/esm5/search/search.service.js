import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { find, get, isUndefined, some } from 'lodash-es';
var SearchService = /** @class */ (function (_super) {
    tslib_1.__extends(SearchService, _super);
    function SearchService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        _this.DEFAULT_PAGE_SIZE = 50;
        _this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping'
        ];
        _this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_',
            'c8y_CepAgent'
        ];
        _this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
        return _this;
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    SearchService.prototype.filterOnlyAssets = function (data) {
        var _this = this;
        return data.filter(function (mo) { return mo.c8y_IsDeviceGroup || _this.isAnyDevice(mo); });
    };
    SearchService.prototype.buildCombinedRootQueryFilter = function (columns, pagination) {
        var rootQuery = {
            __filter: {
                __and: { __not: { __has: "c8y_IsBinary" } }
            }
        };
        var userQuery = this.getQueryObj(columns, pagination);
        var queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        var fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    };
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     */
    SearchService.prototype.search = function (term) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: this.DEFAULT_PAGE_SIZE,
            withChildren: false
        });
    };
    SearchService.prototype.isRootDevice = function (mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    };
    SearchService.prototype.isAnyDevice = function (mo) {
        var isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    };
    SearchService.prototype.hasFragmentOrTypeFromBlacklist = function (mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    };
    SearchService.prototype.hasTypeFromBlacklist = function (mo) {
        var moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, function (type) { return moType.includes(type); });
    };
    SearchService.prototype.hasFragmentFromBlacklist = function (mo) {
        return find(this.FRAGMENTS_FOR_NO_DEVICE, function (f) { return !isUndefined(mo[f]); });
    };
    SearchService = tslib_1.__decorate([
        Injectable()
    ], SearchService);
    return SearchService;
}(SubAssetsService));
export { SearchService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3NlYXJjaC8iLCJzb3VyY2VzIjpbInNlYXJjaC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHekQ7SUFBbUMseUNBQWdCO0lBRG5EO1FBQUEscUVBbUdDO1FBakdXLDZCQUF1QixHQUFHLG9CQUFvQixDQUFDO1FBQy9DLHVCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUNoQiw2QkFBdUIsR0FBRztZQUN6QyxlQUFlO1lBQ2YsWUFBWTtZQUNaLFNBQVM7WUFDVCx5QkFBeUI7WUFDekIsY0FBYztZQUNkLGNBQWM7WUFDZCxtQkFBbUI7WUFDbkIsV0FBVztZQUNYLGtEQUFrRDtZQUNsRCxxREFBcUQ7WUFDckQsY0FBYztZQUNkLGtCQUFrQjtZQUNsQixpQ0FBaUM7U0FDbEMsQ0FBQztRQUNlLHlCQUFtQixHQUFHO1lBQ3JDLHVCQUF1QjtZQUN2QixjQUFjO1lBQ2QsZUFBZTtZQUNmLGNBQWM7WUFDZCx1QkFBdUI7WUFDdkIsb0JBQW9CO1lBQ3BCLGtCQUFrQjtZQUNsQixzQkFBc0I7WUFDdEIsd0JBQXdCO1lBQ3hCLGdCQUFnQjtZQUNoQix5QkFBeUI7WUFDekIsZ0JBQWdCO1lBQ2hCLGdCQUFnQjtZQUNoQixrQkFBa0I7WUFDbEIsbUJBQW1CO1lBQ25CLHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIseUJBQXlCO1lBQ3pCLDRCQUE0QjtZQUM1QixjQUFjO1NBQ2YsQ0FBQztRQUNlLDBCQUFvQixHQUFHLGNBQWMsQ0FBQzs7SUEwRHpELENBQUM7SUF4REM7Ozs7T0FJRztJQUNILHdDQUFnQixHQUFoQixVQUFpQixJQUFzQjtRQUF2QyxpQkFFQztRQURDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxpQkFBaUIsSUFBSSxLQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUE1QyxDQUE0QyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELG9EQUE0QixHQUE1QixVQUE2QixPQUFPLEVBQUUsVUFBVTtRQUM5QyxJQUFNLFNBQVMsR0FBRztZQUNoQixRQUFRLEVBQUU7Z0JBQ1IsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxFQUFFO2FBQzVDO1NBQ0YsQ0FBQztRQUNGLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDhCQUFNLEdBQU4sVUFBTyxJQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUNoQyxJQUFJLEVBQUUsSUFBSTtZQUNWLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1lBQ2hDLFlBQVksRUFBRSxLQUFLO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxvQ0FBWSxHQUFwQixVQUFxQixFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sbUNBQVcsR0FBbkIsVUFBb0IsRUFBRTtRQUNwQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25GLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxzREFBOEIsR0FBdEMsVUFBdUMsRUFBRTtRQUN2QyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVPLDRDQUFvQixHQUE1QixVQUE2QixFQUFFO1FBQzdCLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU8sZ0RBQXdCLEdBQWhDLFVBQWlDLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQW5CLENBQW1CLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBakdVLGFBQWE7UUFEekIsVUFBVSxFQUFFO09BQ0EsYUFBYSxDQWtHekI7SUFBRCxvQkFBQztDQUFBLEFBbEdELENBQW1DLGdCQUFnQixHQWtHbEQ7U0FsR1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvc3ViLWFzc2V0cyc7XG5pbXBvcnQgeyBmaW5kLCBnZXQsIGlzVW5kZWZpbmVkLCBzb21lIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlYXJjaFNlcnZpY2UgZXh0ZW5kcyBTdWJBc3NldHNTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIEdSSURfQ09ORklHX1NUT1JBR0VfS0VZID0gJ3NlYXJjaC1ncmlkLWNvbmZpZyc7XG4gIHByb3RlY3RlZCBERUZBVUxUX1BBR0VfU0laRSA9IDUwO1xuICBwcml2YXRlIHJlYWRvbmx5IEZSQUdNRU5UU19GT1JfTk9fREVWSUNFID0gW1xuICAgICdjOHlfRGFzaGJvYXJkJyxcbiAgICAnYzh5X1JlcG9ydCcsXG4gICAgJ2M4eV9LcGknLFxuICAgICdjOHlfRXhwb3J0Q29uZmlndXJhdGlvbicsXG4gICAgJ2M4eV9Jc0JpbmFyeScsXG4gICAgJ2M4eV9Ob0RldmljZScsXG4gICAgJ2M4eV9Jc0RldmljZUdyb3VwJyxcbiAgICAnYzh5X0dyb3VwJyxcbiAgICAnY29tX2N1bXVsb2NpdHlfbW9kZWxfc21hcnRyZXN0X1NtYXJ0UmVzdFRlbXBsYXRlJyxcbiAgICAnY29tX2N1bXVsb2NpdHlfbW9kZWxfZGV2aWNlc2ltdWxhdG9yX1NlbnNvclRlbXBsYXRlJyxcbiAgICAnX2F0dGFjaG1lbnRzJyxcbiAgICAnYzh5X0lzRGV2aWNlVHlwZScsXG4gICAgJ2M4eV9vYmplY3RtYXBwaW5nX09iamVjdE1hcHBpbmcnXG4gIF07XG4gIHByaXZhdGUgcmVhZG9ubHkgVFlQRVNfRk9SX05PX0RFVklDRSA9IFtcbiAgICAnYzh5X0NvbmZpZ3VyYXRpb25EdW1wJyxcbiAgICAnYzh5X0Zpcm13YXJlJyxcbiAgICAnYzh5X1NtYXJ0UnVsZScsXG4gICAgJ2M4eV9Tb2Z0d2FyZScsXG4gICAgJ2ltcGFjdF9vYmplY3RfbWFwcGluZycsXG4gICAgJ2M4eV9Vc2VyUHJlZmVyZW5jZScsXG4gICAgJ2M4eV9UZW5hbnRQb2xpY3knLFxuICAgICdjOHlfUHJpdmF0ZVNtYXJ0UnVsZScsXG4gICAgJ2M4eV9TbWFydFJlc3QyVGVtcGxhdGUnLFxuICAgICdjOHlfSnNvblNjaGVtYScsXG4gICAgJ2M4eV9EZXZpY2VTaGVsbFRlbXBsYXRlJyxcbiAgICAnYzh5X0RlbW9TdGF0dXMnLFxuICAgICdjOHlfRGF0YUJyb2tlcicsXG4gICAgJ2M4eV9BcHBsaWNhdGlvbl8nLFxuICAgICdicmFuZGluZ1ZhcmlhYmxlcycsXG4gICAgJ2M4eV9EZXZpY2VTaW11bGF0b3InLFxuICAgICdjOHlfQ2VydGlmaWNhdGVNZXRhZGF0YScsXG4gICAgJ2x3bTJtX3Bvc3RfcmVnaXN0cmF0aW9uJyxcbiAgICAnYzh5X21pY3Jvc2VydmljZV9tYW5pZmVzdF8nLFxuICAgICdjOHlfQ2VwQWdlbnQnXG4gIF07XG4gIHByaXZhdGUgcmVhZG9ubHkgREVWSUNFX0ZSQUdNRU5UX1RZUEUgPSAnYzh5X0lzRGV2aWNlJztcblxuICAvKipcbiAgICogV2lsbCByZXR1cm4gb25seSB2YWxpZCBhc3NldHMgKGdyb3VwcyBhbmQgZGV2aWNlcykgYW5kIGZpbHRlciBvdXRcbiAgICogbm9uZSB1c2VmdWwgaW52ZW50b3JpZXMgKGUuZy4gYzh5X0pzb25TY2hlbWEpLlxuICAgKiBAcGFyYW0gZGF0YSBBbGwgbWFuYWdlZCBvYmplY3RzIHRoYXQgc2hvdWxkIGJlIGZpbHRlcmVkLlxuICAgKi9cbiAgZmlsdGVyT25seUFzc2V0cyhkYXRhOiBJTWFuYWdlZE9iamVjdFtdKSB7XG4gICAgcmV0dXJuIGRhdGEuZmlsdGVyKG1vID0+IG1vLmM4eV9Jc0RldmljZUdyb3VwIHx8IHRoaXMuaXNBbnlEZXZpY2UobW8pKTtcbiAgfVxuXG4gIGJ1aWxkQ29tYmluZWRSb290UXVlcnlGaWx0ZXIoY29sdW1ucywgcGFnaW5hdGlvbikge1xuICAgIGNvbnN0IHJvb3RRdWVyeSA9IHtcbiAgICAgIF9fZmlsdGVyOiB7XG4gICAgICAgIF9fYW5kOiB7IF9fbm90OiB7IF9faGFzOiBgYzh5X0lzQmluYXJ5YCB9IH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVzZXJRdWVyeSA9IHRoaXMuZ2V0UXVlcnlPYmooY29sdW1ucywgcGFnaW5hdGlvbik7XG4gICAgY29uc3QgcXVlcnlQYXJ0ID0gdGhpcy5xdWVyaWVzVXRpbC5hZGRPcmRlcmJ5cyhyb290UXVlcnksIHVzZXJRdWVyeS5fX29yZGVyYnksICdhcHBlbmQnKTtcbiAgICBjb25zdCBmdWxsUXVlcnkgPSB0aGlzLnF1ZXJpZXNVdGlsLmFkZEFuZEZpbHRlcihxdWVyeVBhcnQsIHVzZXJRdWVyeS5fX2ZpbHRlcik7XG4gICAgcmV0dXJuIHRoaXMucXVlcmllc1V0aWwuYnVpbGRRdWVyeShmdWxsUXVlcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZ1bGwtdGV4dCBzZWFyY2ggcmVzdWx0cy5cbiAgICpcbiAgICogQHBhcmFtIHRlcm0gVGhlIHNlYXJjaCB0ZXJtLlxuICAgKi9cbiAgc2VhcmNoKHRlcm06IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdCh7XG4gICAgICB0ZXh0OiB0ZXJtLFxuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWUsXG4gICAgICBwYWdlU2l6ZTogdGhpcy5ERUZBVUxUX1BBR0VfU0laRSxcbiAgICAgIHdpdGhDaGlsZHJlbjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgaXNSb290RGV2aWNlKG1vKSB7XG4gICAgcmV0dXJuICEhbW9bdGhpcy5ERVZJQ0VfRlJBR01FTlRfVFlQRV07XG4gIH1cblxuICBwcml2YXRlIGlzQW55RGV2aWNlKG1vKSB7XG4gICAgY29uc3QgaXNEZXZpY2UgPSB0aGlzLmlzUm9vdERldmljZShtbykgfHwgIXRoaXMuaGFzRnJhZ21lbnRPclR5cGVGcm9tQmxhY2tsaXN0KG1vKTtcbiAgICByZXR1cm4gaXNEZXZpY2U7XG4gIH1cblxuICBwcml2YXRlIGhhc0ZyYWdtZW50T3JUeXBlRnJvbUJsYWNrbGlzdChtbykge1xuICAgIHJldHVybiB0aGlzLmhhc1R5cGVGcm9tQmxhY2tsaXN0KG1vKSB8fCB0aGlzLmhhc0ZyYWdtZW50RnJvbUJsYWNrbGlzdChtbyk7XG4gIH1cblxuICBwcml2YXRlIGhhc1R5cGVGcm9tQmxhY2tsaXN0KG1vKSB7XG4gICAgY29uc3QgbW9UeXBlID0gZ2V0KG1vLCAndHlwZScsICcnKTtcbiAgICByZXR1cm4gc29tZSh0aGlzLlRZUEVTX0ZPUl9OT19ERVZJQ0UsIHR5cGUgPT4gbW9UeXBlLmluY2x1ZGVzKHR5cGUpKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzRnJhZ21lbnRGcm9tQmxhY2tsaXN0KG1vKSB7XG4gICAgcmV0dXJuIGZpbmQodGhpcy5GUkFHTUVOVFNfRk9SX05PX0RFVklDRSwgZiA9PiAhaXNVbmRlZmluZWQobW9bZl0pKTtcbiAgfVxufVxuIl19