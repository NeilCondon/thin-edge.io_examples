import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { CellRendererContext, gettext } from '@c8y/ngx-components';
import { DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
var AssetTypeCellRendererComponent = /** @class */ (function () {
    function AssetTypeCellRendererComponent(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    AssetTypeCellRendererComponent.prototype.ngOnInit = function () {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    };
    AssetTypeCellRendererComponent.prototype.getIconTitle = function (icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    };
    AssetTypeCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGroupService }
    ]; };
    AssetTypeCellRendererComponent = tslib_1.__decorate([
        Component({
            template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
        })
    ], AssetTypeCellRendererComponent);
    return AssetTypeCellRendererComponent;
}());
export { AssetTypeCellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvc3ViLWFzc2V0cy8iLCJzb3VyY2VzIjpbImNvbHVtbnMvYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFLMUU7SUFLRSx3Q0FDUyxPQUE0QixFQUMzQixrQkFBc0M7UUFEdkMsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUM3QyxDQUFDO0lBRUosaURBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLHFEQUFZLEdBQXBCLFVBQXFCLElBQVk7UUFDL0IsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFdBQVc7Z0JBQ2QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsS0FBSyxpQkFBaUI7Z0JBQ3BCLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hDLEtBQUssMkJBQTJCO2dCQUM5QixPQUFPLHVCQUF1QixDQUFDO1lBQ2pDLEtBQUssa0JBQWtCO2dCQUNyQixPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNqQztnQkFDRSxPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7O2dCQXhCaUIsbUJBQW1CO2dCQUNQLGtCQUFrQjs7SUFQckMsOEJBQThCO1FBSDFDLFNBQVMsQ0FBQztZQUNULCtQQUF3RDtTQUN6RCxDQUFDO09BQ1csOEJBQThCLENBK0IxQztJQUFELHFDQUFDO0NBQUEsQUEvQkQsSUErQkM7U0EvQlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxSZW5kZXJlckNvbnRleHQsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyb3VwU2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMvYXNzZXRzLW5hdmlnYXRvcic7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZVVybDogJy4vYXNzZXQtdHlwZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBncm91cEljb246IHN0cmluZztcbiAgaXNBbnlHcm91cDogYm9vbGVhbjtcbiAgaXNEZXZpY2U6IGJvb2xlYW47XG4gIGljb25UaXRsZTogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29udGV4dDogQ2VsbFJlbmRlcmVyQ29udGV4dCxcbiAgICBwcml2YXRlIGRldmljZUdyb3VwU2VydmljZTogRGV2aWNlR3JvdXBTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlzQW55R3JvdXAgPSB0aGlzLmRldmljZUdyb3VwU2VydmljZS5pc0FueUdyb3VwKHRoaXMuY29udGV4dC5pdGVtKTtcbiAgICB0aGlzLmlzRGV2aWNlID0gdGhpcy5kZXZpY2VHcm91cFNlcnZpY2UuaXNEZXZpY2UodGhpcy5jb250ZXh0Lml0ZW0pO1xuICAgIHRoaXMuZ3JvdXBJY29uID0gdGhpcy5kZXZpY2VHcm91cFNlcnZpY2UuaWNvbih0aGlzLmNvbnRleHQuaXRlbSk7XG4gICAgdGhpcy5pY29uVGl0bGUgPSB0aGlzLmdldEljb25UaXRsZSh0aGlzLmdyb3VwSWNvbik7XG4gIH1cblxuICBwcml2YXRlIGdldEljb25UaXRsZShpY29uOiBzdHJpbmcpIHtcbiAgICBzd2l0Y2ggKGljb24pIHtcbiAgICAgIGNhc2UgJ2M4eS1ncm91cCc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdHcm91cCcpO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXNtYXJ0JzpcbiAgICAgICAgcmV0dXJuIGdldHRleHQoJ1NtYXJ0IGdyb3VwJyk7XG4gICAgICBjYXNlICdjOHktZ3JvdXAtcmVtb3RlLWluYWN0aXZlJzpcbiAgICAgICAgcmV0dXJuICdJbmFjdGl2ZSByZW1vdGUgZ3JvdXAnO1xuICAgICAgY2FzZSAnYzh5LWdyb3VwLXJlbW90ZSc6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdSZW1vdGUgZ3JvdXAnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBnZXR0ZXh0KCdDaGlsZCBkZXZpY2UnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==