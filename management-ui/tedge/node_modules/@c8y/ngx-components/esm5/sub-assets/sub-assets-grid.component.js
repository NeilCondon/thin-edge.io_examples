import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { IManagedObject, SmartGroupsService } from '@c8y/client';
import { DataGridComponent, gettext } from '@c8y/ngx-components';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
var SubAssetsGridComponent = /** @class */ (function () {
    function SubAssetsGridComponent(subAssetsGridService, bsModalService, smartGroupsService) {
        this.subAssetsGridService = subAssetsGridService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.title = gettext('Subassets');
        this.emptyStateText = gettext('Add your first group or assign devices using the buttons on the toolbar.');
        this.loadingItemsLabel = gettext('Loading assetsâ€¦');
        this.selectable = false;
        this.baseQuery = {};
        this.filterable = true;
        this.sortable = true;
        this.onColumnsChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.pagination = this.subAssetsGridService.getDefaultPagination();
        this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    Object.defineProperty(SubAssetsGridComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        set: function (value) {
            if (value) {
                this._columns = this.subAssetsGridService.getUserConfiguredColumns(value);
            }
            else {
                this._columns = this.subAssetsGridService.getUserConfiguredColumns(this.subAssetsGridService.getDefaultColumns());
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_pagination", {
        set: function (value) {
            if (value) {
                this.pagination = value;
            }
            else {
                this.pagination = this.subAssetsGridService.getDefaultPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_actionControls", {
        set: function (value) {
            if (value) {
                this.actionControls = value;
            }
            else {
                this.actionControls = this.subAssetsGridService.getDefaultActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_bulkActionControls", {
        set: function (value) {
            if (value) {
                this.bulkActionControls = value;
            }
            else {
                this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "isRootGroup", {
        get: function () {
            return !this.parentGroup;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "getInfiniteScrollMode", {
        get: function () {
            return this.isRootGroup && this.subAssetsGridService.isUsingInventoryRoles()
                ? 'auto'
                : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_displayOptions", {
        set: function (displayOptions) {
            this.displayOptions = tslib_1.__assign({}, this.displayOptions, displayOptions);
        },
        enumerable: true,
        configurable: true
    });
    SubAssetsGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.columns = this.subAssetsGridService.getDefaultColumns(this.filterable, this.sortable);
        if (!this.filterable || !this.sortable) {
            this.columns.forEach(function (column) {
                column.filterable = _this.filterable;
                column.sortable = _this.sortable;
            });
        }
        this.setActionControls();
    };
    SubAssetsGridComponent.prototype.setActionControls = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var actionControls, isMicroserviceInstalled, deleteAction, unassignAction;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actionControls = [];
                        return [4 /*yield*/, this.smartGroupsService.isSmartGroupsV2MicroserviceInstalled()];
                    case 1:
                        isMicroserviceInstalled = (_a.sent()).data;
                        deleteAction = {
                            type: "DELETE" /* Delete */,
                            callback: function (asset) { return _this.onDeleteAsset(asset, _this.parentGroup); },
                            showIf: function (asset) {
                                if (_this.smartGroupsService.isSmartGroupV2(asset)) {
                                    return isMicroserviceInstalled ? _this.subAssetsGridService.canDeleteSmartGroup() : false;
                                }
                                if (_this.smartGroupsService.isSmartGroup(asset)) {
                                    return _this.subAssetsGridService.canDeleteSmartGroup();
                                }
                                return true;
                            }
                        };
                        actionControls.push(deleteAction);
                        unassignAction = {
                            type: 'UNASSIGN',
                            icon: 'unlink',
                            text: gettext('Unassign'),
                            callback: function (asset) { return _this.onUnassignAsset(asset, _this.parentGroup); },
                            showIf: function (asset) {
                                return _this.subAssetsGridService.isDevice(asset) &&
                                    !_this.subAssetsGridService.isSmartGroup(_this.parentGroup);
                            }
                        };
                        actionControls.push(unassignAction);
                        if (!this.actionControls) {
                            this.actionControls = actionControls;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsGridComponent.prototype.onUnassignAsset = function (asset, parentRef) {
        var _this = this;
        var initialState = {
            asset: asset
        };
        var modalRef = this.bsModalService.show(UnassignModalComponent, { initialState: initialState });
        modalRef.content.closeSubject.subscribe(function (result) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!result) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.subAssetsGridService.unassignAsset(asset, parentRef)];
                    case 1:
                        _a.sent();
                        this.refresh.emit();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
    };
    SubAssetsGridComponent.prototype.onDeleteAsset = function (asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, modalRef;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                initialState = {
                    showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
                    asset: asset,
                    showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                        !this.smartGroupsService.isSmartGroupV2(asset)
                };
                modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState: initialState });
                modalRef.content.closeSubject.subscribe(function (result) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!result) return [3 /*break*/, 2];
                                this.subAssetsGridService.uiOnlyCountersUpdate.next('DECREASE');
                                return [4 /*yield*/, this.subAssetsGridService.deleteAsset(asset, parentRef, result)];
                            case 1:
                                _a.sent();
                                this.refresh.emit();
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        });
    };
    SubAssetsGridComponent.prototype.ngOnChanges = function (changes) {
        if (changes.parentGroup && !changes.parentGroup.firstChange) {
            this.dataGrid.reload();
        }
    };
    SubAssetsGridComponent.prototype.trackByName = function (_index, column) {
        return column.name;
    };
    SubAssetsGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var promises, counters, action, _a, dataResponse, size, filteredSize;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        promises = [];
                        promises.push(this.subAssetsGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
                        action = this.subAssetsGridService.uiOnlyCountersUpdate.value;
                        if (action) {
                            counters = this.uiOnlyCountersUpdate(action);
                            this.subAssetsGridService.uiOnlyCountersUpdate.next(null);
                        }
                        else {
                            promises.push(this.subAssetsGridService.getTotal(this.parentGroup, this.baseQuery));
                            promises.push(this.subAssetsGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 3]), dataResponse = _a[0], size = _a[1], filteredSize = _a[2];
                        if (!counters) {
                            counters = {
                                size: size,
                                filteredSize: filteredSize
                            };
                        }
                        this.onColumnsChange.emit(dataSourceModifier.columns);
                        return [2 /*return*/, tslib_1.__assign({ res: dataResponse.res, data: dataResponse.data, paging: dataResponse.paging }, counters)];
                }
            });
        });
    };
    SubAssetsGridComponent.prototype.configChange = function (config) {
        this.subAssetsGridService.saveConfig(config);
    };
    // workaround since the totalPages value is cached on the BE
    SubAssetsGridComponent.prototype.uiOnlyCountersUpdate = function (action) {
        var currentAllItemsCount = this.dataGrid.filteringLabelsParams.allItemsCount;
        var currentFilteredItemsCount = this.dataGrid.filteringLabelsParams.filteredItemsCount;
        var counters;
        if (action === 'DECREASE') {
            counters = {
                size: currentAllItemsCount - 1,
                filteredSize: currentFilteredItemsCount - 1
            };
        }
        if (action === 'INCREASE') {
            counters = {
                size: currentAllItemsCount + 1,
                filteredSize: currentFilteredItemsCount + 1
            };
        }
        return counters;
    };
    SubAssetsGridComponent.ctorParameters = function () { return [
        { type: SubAssetsService },
        { type: BsModalService },
        { type: SmartGroupsService }
    ]; };
    tslib_1.__decorate([
        Input('parent-group')
    ], SubAssetsGridComponent.prototype, "parentGroup", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "refresh", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "emptyStateText", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "loadingItemsLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "columns", null);
    tslib_1.__decorate([
        Input('pagination')
    ], SubAssetsGridComponent.prototype, "_pagination", null);
    tslib_1.__decorate([
        Input('actionControls')
    ], SubAssetsGridComponent.prototype, "_actionControls", null);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "selectable", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "baseQuery", void 0);
    tslib_1.__decorate([
        Input('bulkActionControls')
    ], SubAssetsGridComponent.prototype, "_bulkActionControls", null);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "filterable", void 0);
    tslib_1.__decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "sortable", void 0);
    tslib_1.__decorate([
        Output()
    ], SubAssetsGridComponent.prototype, "onColumnsChange", void 0);
    tslib_1.__decorate([
        Output()
    ], SubAssetsGridComponent.prototype, "itemsSelect", void 0);
    tslib_1.__decorate([
        ViewChild(DataGridComponent, { static: true })
    ], SubAssetsGridComponent.prototype, "dataGrid", void 0);
    tslib_1.__decorate([
        Input('displayOptions')
    ], SubAssetsGridComponent.prototype, "_displayOptions", null);
    SubAssetsGridComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-sub-assets-grid',
            template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [refresh]=\"refresh\"\n  [displayOptions]=\"displayOptions\"\n  (onConfigChange)=\"configChange($event)\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  class=\"d-contents\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"c8y-group-add\" class=\"c8y-icon-duocolor\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No items to display.' | translate }}</strong>\n      </p>\n      <small>{{ emptyStateText | translate }}</small>\n    </div>\n  </div>\n</c8y-data-grid>\n"
        })
    ], SubAssetsGridComponent);
    return SubAssetsGridComponent;
}());
export { SubAssetsGridComponent };
//# sourceMappingURL=data:application/json;base64,