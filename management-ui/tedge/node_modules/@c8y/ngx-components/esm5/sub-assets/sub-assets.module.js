import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CoreModule, gettext, HOOK_ONCE_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AddGroupModule } from './add-group/add-group.module';
import { AssetTypeCellRendererComponent } from './columns/asset-type.cell-renderer.component';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { GroupInfoComponent } from './group-info.component';
import { GroupsComponent } from './groups.component';
import { SubAssetsGridComponent } from './sub-assets-grid.component';
import { SubAssetsComponent } from './sub-assets.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import { AssignDevicesComponent } from './assign-devices/assign-devices.component';
import { AssignChildDevicesComponent } from './assign-devices/assign-child-devices.component';
import { AssignDevicesService } from './assign-devices/assign-devices.service';
var ɵ0 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
var SubAssetsModule = /** @class */ (function () {
    function SubAssetsModule() {
    }
    SubAssetsModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                SubAssetsComponent,
                SubAssetsGridComponent,
                AssetTypeCellRendererComponent,
                GroupsComponent,
                GroupInfoComponent,
                DeleteAssetsModalComponent,
                UnassignModalComponent,
                AssignDevicesComponent,
                AssignChildDevicesComponent
            ],
            imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
            entryComponents: [
                SubAssetsComponent,
                AssetTypeCellRendererComponent,
                GroupsComponent,
                DeleteAssetsModalComponent,
                UnassignModalComponent
            ],
            exports: [],
            providers: [
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                },
                SubAssetsService,
                AssignDevicesService
            ]
        })
    ], SubAssetsModule);
    return SubAssetsModule;
}());
export { SubAssetsModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWFzc2V0cy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3N1Yi1hc3NldHMvIiwic291cmNlcyI6WyJzdWItYXNzZXRzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDMUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbkYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDOUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUNBQXlDLENBQUM7U0EwQi9EO0lBQ1I7UUFDRSxPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7UUFDMUIsSUFBSSxFQUFFLFdBQVc7UUFDakIsUUFBUSxFQUFFLElBQUk7UUFDZCxJQUFJLEVBQUUsZ0JBQWdCO1FBQ3RCLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzNCLFNBQVMsRUFBRSxrQkFBa0I7S0FDOUI7SUFDRDtRQUNFLElBQUksRUFBRSxPQUFPO1FBQ2IsU0FBUyxFQUFFLGVBQWU7S0FDM0I7Q0FDRjtBQU9QO0lBQUE7SUFBOEIsQ0FBQztJQUFsQixlQUFlO1FBNUMzQixRQUFRLENBQUM7WUFDUixZQUFZLEVBQUU7Z0JBQ1osa0JBQWtCO2dCQUNsQixzQkFBc0I7Z0JBQ3RCLDhCQUE4QjtnQkFDOUIsZUFBZTtnQkFDZixrQkFBa0I7Z0JBQ2xCLDBCQUEwQjtnQkFDMUIsc0JBQXNCO2dCQUN0QixzQkFBc0I7Z0JBQ3RCLDJCQUEyQjthQUM1QjtZQUNELE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsYUFBYSxDQUFDO1lBQ3RFLGVBQWUsRUFBRTtnQkFDZixrQkFBa0I7Z0JBQ2xCLDhCQUE4QjtnQkFDOUIsZUFBZTtnQkFDZiwwQkFBMEI7Z0JBQzFCLHNCQUFzQjthQUN2QjtZQUNELE9BQU8sRUFBRSxFQUFFO1lBQ1gsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixRQUFRLElBYVA7b0JBQ0QsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0QsZ0JBQWdCO2dCQUNoQixvQkFBb0I7YUFDckI7U0FDRixDQUFDO09BQ1csZUFBZSxDQUFHO0lBQUQsc0JBQUM7Q0FBQSxBQUEvQixJQUErQjtTQUFsQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIEhPT0tfT05DRV9ST1VURSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQWRkR3JvdXBNb2R1bGUgfSBmcm9tICcuL2FkZC1ncm91cC9hZGQtZ3JvdXAubW9kdWxlJztcbmltcG9ydCB7IEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9hc3NldC10eXBlLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9kZWxldGUtYXNzZXRzLW1vZGFsL2RlbGV0ZS1hc3NldHMtbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwSW5mb0NvbXBvbmVudCB9IGZyb20gJy4vZ3JvdXAtaW5mby5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBzQ29tcG9uZW50IH0gZnJvbSAnLi9ncm91cHMuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c0dyaWRDb21wb25lbnQgfSBmcm9tICcuL3N1Yi1hc3NldHMtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzQ29tcG9uZW50IH0gZnJvbSAnLi9zdWItYXNzZXRzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNTZXJ2aWNlIH0gZnJvbSAnLi9zdWItYXNzZXRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVW5hc3NpZ25Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4vdW5hc3NpZ24tYXNzZXRzLW1vZGFsL3VuYXNzaWduLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBc3NpZ25EZXZpY2VzQ29tcG9uZW50IH0gZnJvbSAnLi9hc3NpZ24tZGV2aWNlcy9hc3NpZ24tZGV2aWNlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXNzaWduQ2hpbGREZXZpY2VzQ29tcG9uZW50IH0gZnJvbSAnLi9hc3NpZ24tZGV2aWNlcy9hc3NpZ24tY2hpbGQtZGV2aWNlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXNzaWduRGV2aWNlc1NlcnZpY2UgfSBmcm9tICcuL2Fzc2lnbi1kZXZpY2VzL2Fzc2lnbi1kZXZpY2VzLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBTdWJBc3NldHNDb21wb25lbnQsXG4gICAgU3ViQXNzZXRzR3JpZENvbXBvbmVudCxcbiAgICBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBzQ29tcG9uZW50LFxuICAgIEdyb3VwSW5mb0NvbXBvbmVudCxcbiAgICBEZWxldGVBc3NldHNNb2RhbENvbXBvbmVudCxcbiAgICBVbmFzc2lnbk1vZGFsQ29tcG9uZW50LFxuICAgIEFzc2lnbkRldmljZXNDb21wb25lbnQsXG4gICAgQXNzaWduQ2hpbGREZXZpY2VzQ29tcG9uZW50XG4gIF0sXG4gIGltcG9ydHM6IFtDb3JlTW9kdWxlLCBEZXZpY2VHcmlkTW9kdWxlLCBBZGRHcm91cE1vZHVsZSwgUG9wb3Zlck1vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICBBc3NldFR5cGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBzQ29tcG9uZW50LFxuICAgIERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50LFxuICAgIFVuYXNzaWduTW9kYWxDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW10sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhPT0tfT05DRV9ST1VURSxcbiAgICAgIHVzZVZhbHVlOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5Hcm91cCxcbiAgICAgICAgICBwYXRoOiAnc3ViYXNzZXRzJyxcbiAgICAgICAgICBwcmlvcml0eTogMTAwMCxcbiAgICAgICAgICBpY29uOiAnYzh5LWdyb3VwLW9wZW4nLFxuICAgICAgICAgIGxhYmVsOiBnZXR0ZXh0KCdTdWJhc3NldHMnKSxcbiAgICAgICAgICBjb21wb25lbnQ6IFN1YkFzc2V0c0NvbXBvbmVudFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogJ2dyb3VwJyxcbiAgICAgICAgICBjb21wb25lbnQ6IEdyb3Vwc0NvbXBvbmVudFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIFN1YkFzc2V0c1NlcnZpY2UsXG4gICAgQXNzaWduRGV2aWNlc1NlcnZpY2VcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBTdWJBc3NldHNNb2R1bGUge31cbiJdfQ==