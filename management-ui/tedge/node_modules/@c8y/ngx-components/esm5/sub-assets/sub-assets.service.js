import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IManagedObject, InventoryService, IRule, QueriesUtil, SmartGroupsService, SmartRulesService, UserService } from '@c8y/client';
import { ActionControl, AlertService, AppStateService, BulkActionControl, gettext, Pagination, Permissions } from '@c8y/ngx-components';
import { AssetNodeService, DeviceGroupService } from '@c8y/ngx-components/assets-navigator';
import { AlarmsDeviceGridColumn, DeviceGridService, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AssetTypeGridColumn } from './columns/asset-type-grid-column';
var SubAssetsService = /** @class */ (function (_super) {
    tslib_1.__extends(SubAssetsService, _super);
    function SubAssetsService(translateService, inventoryService, appState, user, assetNodeService, deviceGroupService, smartGroupsService, smartRulesService, alertService, permissionsService) {
        var _this = _super.call(this, inventoryService, translateService) || this;
        _this.translateService = translateService;
        _this.inventoryService = inventoryService;
        _this.appState = appState;
        _this.user = user;
        _this.assetNodeService = assetNodeService;
        _this.deviceGroupService = deviceGroupService;
        _this.smartGroupsService = smartGroupsService;
        _this.smartRulesService = smartRulesService;
        _this.alertService = alertService;
        _this.permissionsService = permissionsService;
        _this.uiOnlyCountersUpdate = new BehaviorSubject(null);
        _this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'sub-assets-grid-config';
        _this.IS_DEVICE_GROUP_FRAGMENT = 'c8y_IsDeviceGroup';
        _this.IS_DYNAMIC_GROUP_FRAGMENT = 'c8y_IsDynamicGroup';
        return _this;
    }
    SubAssetsService.prototype.getDefaultColumns = function (filterable, sortable) {
        if (filterable === void 0) { filterable = true; }
        if (sortable === void 0) { sortable = true; }
        var defaultColumns = [
            new AssetTypeGridColumn({ sortOrder: 'desc' }),
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    };
    SubAssetsService.prototype.getDefaultPagination = function () {
        var pagination = this.getConfig().pagination;
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    };
    SubAssetsService.prototype.getDefaultActionControls = function () {
        return [];
    };
    SubAssetsService.prototype.unassignAsset = function (asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var assetId, parentId, alertMessage, error_1, alertMessage;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetId = asset.id;
                        parentId = parentRef.id;
                        if (!this.isDevice(asset)) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.inventoryService.childAssetsRemove(assetId, parentId)];
                    case 2:
                        _a.sent();
                        alertMessage = this.translateService.instant(gettext('Asset unassigned.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        alertMessage = this.translateService.instant(gettext('Could not unassign devices.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 4];
                    case 4: return [4 /*yield*/, this.deactivateSmartrulesForAsset(asset, parentRef)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.isDevice = function (asset) {
        return (!asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) &&
            !asset.hasOwnProperty(this.IS_DYNAMIC_GROUP_FRAGMENT));
    };
    SubAssetsService.prototype.deleteAsset = function (asset, parentRef, params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isGroup;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isGroup = asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) ||
                            this.smartGroupsService.isSmartGroup(asset);
                        if (!isGroup) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.deleteGroup(asset, params)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.deleteDevice(asset, params)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!(parentRef &&
                            !this.smartGroupsService.isSmartGroup(asset) &&
                            !this.smartGroupsService.isSmartGroupV2(asset))) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.deactivateSmartrulesForAsset(asset, parentRef)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.shouldShowWithDeviceUserCheckbox = function (asset) {
        var owner = asset.owner, isRootDevice = asset.c8y_IsDevice;
        var hasDeviceUserAsOwner = asset.owner && this.isDeviceUser(owner);
        return Boolean(isRootDevice && hasDeviceUserAsOwner);
    };
    SubAssetsService.prototype.getDefaultBulkActionControls = function () {
        return [];
    };
    SubAssetsService.prototype.getData = function (columns, pagination, parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isRoot, query, filters;
            return tslib_1.__generator(this, function (_a) {
                isRoot = !parentReference;
                if (isRoot) {
                    query = this.buildCombinedRootQueryFilter(columns, pagination);
                    return [2 /*return*/, this.assetNodeService.getRootNodes(tslib_1.__assign({}, pagination, { query: query }))];
                }
                filters = tslib_1.__assign({}, this.getAssetsFilters(columns, pagination, baseQuery), { withParents: false });
                if (this.deviceGroupService.isGroup(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getGroupItems(parentReference.id, filters)];
                }
                if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)];
                }
                if (this.deviceGroupService.isDevice(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getDeviceChildren(parentReference.id, filters)];
                }
                return [2 /*return*/];
            });
        });
    };
    SubAssetsService.prototype.getCount = function (columns, pagination, parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var defaultFilters, filters;
            return tslib_1.__generator(this, function (_a) {
                defaultFilters = {
                    pageSize: 1,
                    withChildren: false
                };
                filters = !parentReference
                    ? tslib_1.__assign({ query: this.buildCombinedRootQueryFilter(columns, pagination) }, defaultFilters) : tslib_1.__assign({}, this.getAssetsFilters(columns, pagination, baseQuery), defaultFilters);
                return [2 /*return*/, this.getAssetsStatistics(parentReference, filters)];
            });
        });
    };
    SubAssetsService.prototype.getTotal = function (parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        var queryFilter = this.assetNodeService.rootQueryFilter();
        var query = !parentReference
            ? this.queriesUtil.addAndFilter(queryFilter, baseQuery)
            : baseQuery;
        var filters = {
            query: this.queriesUtil.buildQuery(query),
            withChildren: false,
            withTotalPages: true,
            pageSize: 1
        };
        return this.getAssetsStatistics(parentReference, filters);
    };
    SubAssetsService.prototype.canEditGroup = function (group) {
        var currentUser = this.appState.currentUser.value;
        var hasAdminRole = this.user.hasAnyRole(currentUser, ['ROLE_INVENTORY_ADMIN']);
        var isOwner = group.owner === currentUser.userName;
        return hasAdminRole || isOwner;
    };
    SubAssetsService.prototype.canEditSmartGroup = function () {
        var SMART_GROUPS_ROLES_EDIT = ['ROLE_SMARTGROUP_UPDATE', 'ROLE_SMARTGROUP_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_EDIT);
    };
    SubAssetsService.prototype.canDeleteSmartGroup = function () {
        var SMART_GROUPS_ROLES_DELETE = ['ROLE_SMARTGROUP_ADMIN', 'ROLE_INVENTORY_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_DELETE);
    };
    SubAssetsService.prototype.isSmartGroup = function (group) {
        return this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group);
    };
    SubAssetsService.prototype.isUsingInventoryRoles = function () {
        var currentUser = this.appState.currentUser.value;
        var hasAnyInventoryRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_READ',
            'ROLE_INVENTORY_CREATE'
        ]);
        return !hasAnyInventoryRole;
    };
    SubAssetsService.prototype.getAssetsStatistics = function (parentReference, filters) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isRoot;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isRoot = !parentReference;
                        if (!isRoot) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.assetNodeService.getRootNodes(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    case 2:
                        if (!this.deviceGroupService.isGroup(parentReference)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.assetNodeService.getGroupItems(parentReference.id, filters)];
                    case 3: return [2 /*return*/, (_a.sent()).paging
                            .totalPages];
                    case 4:
                        if (!this.deviceGroupService.isDynamicGroup(parentReference)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)];
                    case 5: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    case 6:
                        if (!this.deviceGroupService.isDevice(parentReference)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.assetNodeService.getDeviceChildren(parentReference.id, filters)];
                    case 7: return [2 /*return*/, (_a.sent()).paging
                            .totalPages];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.buildCombinedRootQueryFilter = function (columns, pagination) {
        var queryFilter = this.assetNodeService.rootQueryFilter();
        var userQuery = this.getQueryObj(columns, pagination);
        var queryPart = this.queriesUtil.addOrderbys(queryFilter, userQuery.__orderby, 'append');
        var fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    };
    SubAssetsService.prototype.deleteGroup = function (group, params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cascade, _a, alertMessage, error_2, alertMessage;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cascade = params.cascade;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!(this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.smartGroupsService.delete(group, { cascade: cascade })];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.inventoryService.delete(group, { cascade: cascade })];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        _a;
                        alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 7];
                    case 6:
                        error_2 = _b.sent();
                        alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.deleteDevice = function (device, params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cascade, withDeviceUser, owner, shouldRemoveOwner, _a, alertMessage, error_3, alertMessage;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cascade = params.cascade, withDeviceUser = params.withDeviceUser;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        owner = device.owner;
                        shouldRemoveOwner = withDeviceUser && owner && this.isDeviceUser(owner);
                        if (!shouldRemoveOwner) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.deleteDeviceWithUser(device, cascade)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.inventoryService.delete(device, { cascade: cascade })];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        _a;
                        alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 7];
                    case 6:
                        error_3 = _b.sent();
                        alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.deactivateSmartrulesForAsset = function (asset, parentRef) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var assetId, parentId, rules, upateSmartrulesPromises, error_4, alertMessage;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetId = asset.id;
                        parentId = parentRef.id;
                        return [4 /*yield*/, this.smartRulesService.listByContext(parentId)];
                    case 1:
                        rules = (_a.sent()).data;
                        upateSmartrulesPromises = rules.map(function (rule) {
                            return _this.smartRulesService.bulkDeactivateEnabledSources(rule, [assetId]);
                        });
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, Promise.all(upateSmartrulesPromises)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _a.sent();
                        alertMessage = this.translateService.instant(gettext('Could not deactivate smart rules.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.isDeviceUser = function (userId) {
        return userId.match(/^device_/);
    };
    SubAssetsService.prototype.deleteDeviceWithUser = function (device, cascade) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, error_5;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = { cascade: cascade, withDeviceUser: true };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 5]);
                        return [4 /*yield*/, this.inventoryService.delete(device, params)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_5 = _a.sent();
                        return [4 /*yield*/, this.inventoryService.delete(device, { cascade: cascade })];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.getAssetsFilters = function (columns, pagination, baseQuery) {
        var query = this.queriesUtil.addAndFilter(this.getQueryObj(columns), baseQuery);
        return {
            query: this.queriesUtil.buildQuery(query),
            pageSize: pagination.pageSize || this.DEFAULT_PAGE_SIZE,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    };
    SubAssetsService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: InventoryService },
        { type: AppStateService },
        { type: UserService },
        { type: AssetNodeService },
        { type: DeviceGroupService },
        { type: SmartGroupsService },
        { type: SmartRulesService },
        { type: AlertService },
        { type: Permissions }
    ]; };
    SubAssetsService = tslib_1.__decorate([
        Injectable()
    ], SubAssetsService);
    return SubAssetsService;
}(DeviceGridService));
export { SubAssetsService };
//# sourceMappingURL=data:application/json;base64,