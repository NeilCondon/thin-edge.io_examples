import * as tslib_1 from "tslib";
import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
import { absoluteDateServiceProvider } from './absolute-date.service';
var UpgradeModule = /** @class */ (function () {
    function UpgradeModule() {
    }
    UpgradeModule = tslib_1.__decorate([
        NgModule({
            imports: [RouterModule],
            exports: [],
            providers: [
                absoluteDateServiceProvider,
                bridgeServiceProvider,
                authBridgeServiceProvider,
                { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
                { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
                { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
                { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
                { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
                { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
            ]
        })
    ], UpgradeModule);
    return UpgradeModule;
}());
export { UpgradeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJ1cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixTQUFTLEVBQ1QsU0FBUyxFQUNULFlBQVksRUFDYixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFpQnRFO0lBQUE7SUFBNEIsQ0FBQztJQUFoQixhQUFhO1FBZnpCLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztZQUN2QixPQUFPLEVBQUUsRUFBRTtZQUNYLFNBQVMsRUFBRTtnQkFDVCwyQkFBMkI7Z0JBQzNCLHFCQUFxQjtnQkFDckIseUJBQXlCO2dCQUN6QixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDaEYsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUNwRSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQy9FLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDeEUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUNoRixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7YUFDckU7U0FDRixDQUFDO09BQ1csYUFBYSxDQUFHO0lBQUQsb0JBQUM7Q0FBQSxBQUE3QixJQUE2QjtTQUFoQixhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJpZGdlU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi9icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQge1xuICBIT09LX0FDVElPTixcbiAgSE9PS19BQ1RJT05fQkFSLFxuICBIT09LX0JSRUFEQ1JVTUIsXG4gIEhPT0tfTkFWSUdBVE9SX05PREVTLFxuICBIT09LX1RBQlMsXG4gIEhPT0tfRE9DUyxcbiAgUm91dGVyTW9kdWxlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTmcxQWN0aW9uQmFyRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi1iYXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFBY3Rpb25GYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYWN0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9icmVhZGNydW1iLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxTm9kZXNGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vbm9kZXMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFUYWJzRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL3RhYnMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmcxRG9jc0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9kb2NzLmZhY3RvcnknO1xuaW1wb3J0IHsgYXV0aEJyaWRnZVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vYXV0aC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBhYnNvbHV0ZURhdGVTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2Fic29sdXRlLWRhdGUuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgYWJzb2x1dGVEYXRlU2VydmljZVByb3ZpZGVyLFxuICAgIGJyaWRnZVNlcnZpY2VQcm92aWRlcixcbiAgICBhdXRoQnJpZGdlU2VydmljZVByb3ZpZGVyLFxuICAgIHsgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsIHVzZUNsYXNzOiBOZzFOb2Rlc0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19UQUJTLCB1c2VDbGFzczogTmcxVGFic0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19BQ1RJT05fQkFSLCB1c2VDbGFzczogTmcxQWN0aW9uQmFyRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTiwgdXNlQ2xhc3M6IE5nMUFjdGlvbkZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19CUkVBRENSVU1CLCB1c2VDbGFzczogTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19ET0NTLCB1c2VDbGFzczogTmcxRG9jc0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVXBncmFkZU1vZHVsZSB7fVxuIl19