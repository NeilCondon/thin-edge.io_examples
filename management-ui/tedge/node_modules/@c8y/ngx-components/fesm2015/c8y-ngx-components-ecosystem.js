import { __decorate, __awaiter } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OptionsService, NavigatorNode, gettext, CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';

let EcosystemGuard = class EcosystemGuard {
    constructor(optionsService) {
        this.optionsService = optionsService;
    }
    canActivate(route, state) {
        return this.isFeatureEnabled();
    }
    isFeatureEnabled() {
        return Boolean(this.optionsService.get('beta', false));
    }
};
EcosystemGuard.ctorParameters = () => [
    { type: OptionsService }
];
EcosystemGuard = __decorate([
    Injectable()
], EcosystemGuard);

let EcosystemNavigationFactory = class EcosystemNavigationFactory {
    constructor(ecosystemGuard) {
        this.ecosystemGuard = ecosystemGuard;
        this.navs = [];
    }
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            // Check for the beta flag. To be removed when the feature is production ready.
            if (!this.ecosystemGuard.isFeatureEnabled()) {
                return [];
            }
            if (this.navs.length === 0) {
                const applicationsNode = new NavigatorNode({
                    label: gettext('Applications'),
                    icon: 'c8y-modules',
                    path: '/application-list'
                });
                const microservicesNode = new NavigatorNode({
                    label: gettext('Microservices'),
                    icon: 'microchip',
                    path: '/microservices'
                });
                this.navs.push(new NavigatorNode({
                    label: gettext('Ecosystem'),
                    icon: 'c8y-atom',
                    priority: 3200,
                    children: [applicationsNode, microservicesNode]
                }));
            }
            return this.navs;
        });
    }
};
EcosystemNavigationFactory.ctorParameters = () => [
    { type: EcosystemGuard }
];
EcosystemNavigationFactory = __decorate([
    Injectable()
], EcosystemNavigationFactory);

let ApplicationListComponent = class ApplicationListComponent {
};
ApplicationListComponent = __decorate([
    Component({
        selector: 'c8y-application-list',
        template: "<c8y-title>Applications</c8y-title>\nHere goes the application list\n"
    })
], ApplicationListComponent);

let MicroserviceListComponent = class MicroserviceListComponent {
};
MicroserviceListComponent = __decorate([
    Component({
        selector: 'c8y-microservice-list',
        template: "<c8y-title>Microservices</c8y-title>\nHere goes the microservices list\n"
    })
], MicroserviceListComponent);

const ecosystemRoutes = [
    {
        path: 'application-list',
        component: ApplicationListComponent,
        canActivate: [EcosystemGuard]
    },
    {
        path: 'microservices',
        component: MicroserviceListComponent,
        canActivate: [EcosystemGuard]
    }
];
let EcosystemModule = class EcosystemModule {
};
EcosystemModule = __decorate([
    NgModule({
        declarations: [ApplicationListComponent, MicroserviceListComponent],
        imports: [CoreModule, RouterModule.forRoot(ecosystemRoutes, { useHash: true })],
        providers: [
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: EcosystemNavigationFactory,
                multi: true
            },
            EcosystemGuard
        ]
    })
], EcosystemModule);

/**
 * Generated bundle index. Do not edit.
 */

export { EcosystemModule, ApplicationListComponent as ɵa, MicroserviceListComponent as ɵb, EcosystemGuard as ɵc, EcosystemNavigationFactory as ɵd };
//# sourceMappingURL=c8y-ngx-components-ecosystem.js.map
