{"version":3,"file":"c8y-ngx-components-ecosystem.js","sources":["ng://@c8y/ngx-components/ecosystem/ecosystem.guard.ts","ng://@c8y/ngx-components/ecosystem/ecosystem-navigation-factory.ts","ng://@c8y/ngx-components/ecosystem/application-list.component.ts","ng://@c8y/ngx-components/ecosystem/microservice-list.component.ts","ng://@c8y/ngx-components/ecosystem/ecosystem.module.ts","ng://@c8y/ngx-components/ecosystem/c8y-ngx-components-ecosystem.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { OptionsService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class EcosystemGuard implements CanActivate {\n  constructor(private optionsService: OptionsService) {}\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.isFeatureEnabled();\n  }\n\n  isFeatureEnabled() {\n    return Boolean(this.optionsService.get('beta', false));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigatorNode, NavigatorNodeFactory, gettext } from '@c8y/ngx-components';\nimport { EcosystemGuard } from './ecosystem.guard';\n\n@Injectable()\nexport class EcosystemNavigationFactory implements NavigatorNodeFactory {\n  private navs: NavigatorNode[] = [];\n  constructor(private ecosystemGuard: EcosystemGuard) {}\n\n  async get() {\n    // Check for the beta flag. To be removed when the feature is production ready.\n    if (!this.ecosystemGuard.isFeatureEnabled()) {\n      return [];\n    }\n\n    if (this.navs.length === 0) {\n      const applicationsNode: NavigatorNode = new NavigatorNode({\n        label: gettext('Applications'),\n        icon: 'c8y-modules',\n        path: '/application-list'\n      });\n\n      const microservicesNode = new NavigatorNode({\n        label: gettext('Microservices'),\n        icon: 'microchip',\n        path: '/microservices'\n      });\n\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Ecosystem'),\n          icon: 'c8y-atom',\n          priority: 3200,\n          children: [applicationsNode, microservicesNode]\n        })\n      );\n    }\n    return this.navs;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'c8y-application-list',\n  templateUrl: './application-list.component.html'\n})\nexport class ApplicationListComponent {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'c8y-microservice-list',\n  templateUrl: './microservice-list.component.html'\n})\nexport class MicroserviceListComponent {}\n","import { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';\nimport { EcosystemNavigationFactory } from './ecosystem-navigation-factory';\nimport { ApplicationListComponent } from './application-list.component';\nimport { EcosystemGuard } from './ecosystem.guard';\nimport { MicroserviceListComponent } from './microservice-list.component';\n\nconst ecosystemRoutes: Route[] = [\n  {\n    path: 'application-list',\n    component: ApplicationListComponent,\n    canActivate: [EcosystemGuard]\n  },\n  {\n    path: 'microservices',\n    component: MicroserviceListComponent,\n    canActivate: [EcosystemGuard]\n  }\n];\n\n@NgModule({\n  declarations: [ApplicationListComponent, MicroserviceListComponent],\n  imports: [CoreModule, RouterModule.forRoot(ecosystemRoutes, { useHash: true })],\n  providers: [\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: EcosystemNavigationFactory,\n      multi: true\n    },\n    EcosystemGuard\n  ]\n})\nexport class EcosystemModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ApplicationListComponent as ɵa} from './application-list.component';\nexport {EcosystemNavigationFactory as ɵd} from './ecosystem-navigation-factory';\nexport {EcosystemGuard as ɵc} from './ecosystem.guard';\nexport {MicroserviceListComponent as ɵb} from './microservice-list.component';"],"names":[],"mappings":"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"}