{"version":3,"file":"c8y-ngx-components-connectivity.js","sources":["ng://@c8y/ngx-components/connectivity/abstract-connectivity-tab.factory.ts","ng://@c8y/ngx-components/connectivity/abstract-connectivity-node.factory.ts","ng://@c8y/ngx-components/connectivity/actility/actility.guard.ts","ng://@c8y/ngx-components/connectivity/actility/actility-tab.factory.ts","ng://@c8y/ngx-components/connectivity/actility/actility-node.factory.ts","ng://@c8y/ngx-components/connectivity/actility/actility.module.ts","ng://@c8y/ngx-components/connectivity/impact/impact-connectivity.service.ts","ng://@c8y/ngx-components/connectivity/impact/impact.guard.ts","ng://@c8y/ngx-components/connectivity/impact/impact-tab.factory.ts","ng://@c8y/ngx-components/connectivity/impact/impact-node.factory.ts","ng://@c8y/ngx-components/connectivity/impact/impact.model.ts","ng://@c8y/ngx-components/connectivity/impact/impact-provider-settings.component.ts","ng://@c8y/ngx-components/connectivity/impact/status-display.component.ts","ng://@c8y/ngx-components/connectivity/impact/impact.module.ts","ng://@c8y/ngx-components/connectivity/sigfox/sigfox.guard.ts","ng://@c8y/ngx-components/connectivity/sigfox/sigfox-tab.factory.ts","ng://@c8y/ngx-components/connectivity/sigfox/sigfox-node.factory.ts","ng://@c8y/ngx-components/connectivity/sigfox/sigfox.module.ts","ng://@c8y/ngx-components/connectivity/connectivity.module.ts","ng://@c8y/ngx-components/connectivity/sim/sim.guard.ts","ng://@c8y/ngx-components/connectivity/sim/sim.module.ts","ng://@c8y/ngx-components/connectivity/c8y-ngx-components-connectivity.ts"],"sourcesContent":["import { CanActivate, Router } from '@angular/router';\nimport { Tab, TabFactory } from '@c8y/ngx-components';\nimport { from, isObservable, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport abstract class AbstractConnectivityTabFactory implements TabFactory {\n  constructor(protected router: Router, protected guard: CanActivate) {}\n\n  get() {\n    return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];\n  }\n\n  tab(): Tab | Observable<Tab> {\n    return this.wrapIntoObservable(\n      this.guard.canActivate(\n        this.router.routerState.snapshot.root,\n        this.router.routerState.snapshot\n      )\n    ).pipe(map(canActivate => (canActivate ? this.config() : null)));\n  }\n\n  protected abstract config(): Tab;\n\n  private isPromise<T = any>(obj: any): obj is Promise<T> {\n    return !!obj && typeof obj.then === 'function';\n  }\n\n  private wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\n    if (isObservable(value)) {\n      return value;\n    }\n\n    if (this.isPromise(value)) {\n      return from(value);\n    }\n\n    return of(value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { isObservable, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AbstractConnectivityTabFactory } from './abstract-connectivity-tab.factory';\n\n@Injectable()\nexport abstract class AbstractConnectivityNodeFactory implements NavigatorNodeFactory {\n  protected readonly connectivityNode: NavigatorNode = new NavigatorNode({\n    parent: gettext('Settings'),\n    label: gettext('Connectivity'),\n    path: 'connectivitySettings',\n    icon: 'plug',\n    preventDuplicates: true\n  });\n\n  constructor(protected tabFactory: AbstractConnectivityTabFactory) {}\n\n  get() {\n    return this.wrapIntoObservable(this.tabFactory.tab()).pipe(\n      map(tab => {\n        return !!tab ? [this.connectivityNode] : [];\n      })\n    );\n  }\n\n  protected wrapIntoObservable<T>(value: T | Observable<T>): Observable<T> {\n    if (isObservable(value)) {\n      return value;\n    }\n\n    return of(value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class ActilityGuard implements CanActivate {\n  private static readonly applicationName = 'actility';\n  private showActilityProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showActilityProvider === undefined) {\n      this.showActilityProvider = this.applicationService\n        .isAvailable(ActilityGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showActilityProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab } from '@c8y/ngx-components';\nimport { AbstractConnectivityTabFactory } from '../abstract-connectivity-tab.factory';\nimport { ActilityGuard } from './actility.guard';\n\n@Injectable()\nexport class ActilityTabFactory extends AbstractConnectivityTabFactory {\n  private tabConfig: Tab = {\n    label: gettext('Actility LoRa provider settings'),\n    path: '/connectivitySettings/actility_lora_provider_settings',\n    icon: 'c8y-device'\n  };\n\n  constructor(protected router: Router, protected guard: ActilityGuard) {\n    super(router, guard);\n  }\n\n  protected config(): Tab {\n    return this.tabConfig;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractConnectivityNodeFactory } from '../abstract-connectivity-node.factory';\nimport { ActilityTabFactory } from './actility-tab.factory';\n\n@Injectable()\nexport class ActilityNodeFactory extends AbstractConnectivityNodeFactory {\n  constructor(protected tabFactory: ActilityTabFactory) {\n    super(tabFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HOOK_NAVIGATOR_NODES, HOOK_TABS } from '@c8y/ngx-components';\nimport { ActilityNodeFactory } from './actility-node.factory';\nimport { ActilityTabFactory } from './actility-tab.factory';\nimport { ActilityGuard } from './actility.guard';\n\n@NgModule({\n  providers: [\n    ActilityGuard,\n    ActilityTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: ActilityNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: ActilityTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class ActilityModule {}\n","import { Injectable } from '@angular/core';\nimport { FetchClient, IFetchOptions, IFetchResponse } from '@c8y/client';\nimport { ImpactOptions } from './impact.model';\n\n@Injectable()\nexport class ImpactConnectivityService {\n  private readonly microserviceUrl: string = '/service/impact/connectivity';\n  private readonly header: any = { 'Content-Type': 'application/json' };\n\n  constructor(private client: FetchClient) {}\n\n  getOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  updateOptions(impactOptions: ImpactOptions): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'POST',\n      headers: this.header,\n      body: JSON.stringify(impactOptions)\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n\n  deleteOptions(): Promise<IFetchResponse> {\n    const options: IFetchOptions = {\n      method: 'DELETE',\n      headers: this.header\n    };\n    return this.client.fetch(`${this.microserviceUrl}`, options);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class ImpactGuard implements CanActivate {\n  private static readonly applicationName = 'impact';\n  private showImpactProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showImpactProvider === undefined) {\n      this.showImpactProvider = this.applicationService\n        .isAvailable(ImpactGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showImpactProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab, TabFactory } from '@c8y/ngx-components';\nimport { from, isObservable, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ImpactGuard } from './impact.guard';\n\n@Injectable()\nexport class ImpactTabFactory implements TabFactory {\n  private config: Tab = {\n    label: gettext('IMPACT provider settings'),\n    path: '/connectivitySettings/impact_provider_settings',\n    icon: 'plug'\n  };\n\n  constructor(private router: Router, private guard: ImpactGuard) {}\n\n  get() {\n    return this.router.url.match(/connectivitySettings/g) ? this.tab() : [];\n  }\n\n  tab(): Tab | Observable<Tab> {\n    return this.wrapIntoObservable(\n      this.guard.canActivate(\n        this.router.routerState.snapshot.root,\n        this.router.routerState.snapshot\n      )\n    ).pipe(map(canActivate => (canActivate ? this.config : null)));\n  }\n\n  private isPromise<T = any>(obj: any): obj is Promise<T> {\n    return !!obj && typeof obj.then === 'function';\n  }\n\n  private wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\n    if (isObservable(value)) {\n      return value;\n    }\n\n    if (this.isPromise(value)) {\n      return from(value);\n    }\n\n    return of(value);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { isObservable, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ImpactTabFactory } from './impact-tab.factory';\n\n@Injectable()\nexport class ImpactNodeFactory implements NavigatorNodeFactory {\n  private readonly connectivityNode: NavigatorNode = new NavigatorNode({\n    parent: gettext('Settings'),\n    label: gettext('Connectivity'),\n    path: 'connectivitySettings',\n    icon: 'plug',\n    preventDuplicates: true\n  });\n\n  constructor(private tabFactory: ImpactTabFactory) {}\n\n  get() {\n    return this.wrapIntoObservable(this.tabFactory.tab()).pipe(\n      map(tab => {\n        return !!tab ? [this.connectivityNode] : [];\n      })\n    );\n  }\n\n  private wrapIntoObservable<T>(value: T | Observable<T>): Observable<T> {\n    if (isObservable(value)) {\n      return value;\n    }\n\n    return of(value);\n  }\n}\n","export interface ImpactOptions {\n  baseUrl: string;\n  user: string;\n  password: string;\n  groupName: string;\n  callbackUrl: string;\n  initializeDevices: boolean;\n}\n\nexport interface TenantConnectionStatusResponse {\n  status: TenantConnectionStatus;\n  options: ImpactOptions;\n}\n\nexport enum TenantConnectionStatus {\n  NO_CONNECTION = 'NO_CONNECTION',\n  CONNECTING_IN_PROGRESS = 'CONNECTING_IN_PROGRESS',\n  CONNECTED_SUCCESSFULLY = 'CONNECTED_SUCCESSFULLY',\n  CONNECTED_FAILED = 'CONNECTED_FAILED',\n  UNKNOWN = 'UNKNOWN'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IFetchResponse } from '@c8y/client';\nimport { AlertService, gettext, ModalService, Status } from '@c8y/ngx-components';\nimport { ImpactConnectivityService } from './impact-connectivity.service';\nimport {\n  ImpactOptions,\n  TenantConnectionStatus,\n  TenantConnectionStatusResponse\n} from './impact.model';\n\n@Component({\n  selector: 'c8y-impact-provider-settings',\n  templateUrl: './impact-provider-settings.component.html'\n})\nexport class ImpactProviderSettingsComponent implements OnInit {\n  connectionStatus: TenantConnectionStatusResponse;\n  formGroup: FormGroup;\n\n  isEdit: boolean = false;\n  credentialsExist: boolean = false;\n\n  constructor(\n    private impactService: ImpactConnectivityService,\n    private formBuilder: FormBuilder,\n    private modal: ModalService,\n    private alert: AlertService\n  ) {}\n\n  async ngOnInit() {\n    this.initForm();\n    const response: IFetchResponse = await this.impactService.getOptions();\n    this.connectionStatus = await response.json();\n\n    if (this.connectionStatus && this.connectionStatus.options) {\n      this.formGroup.patchValue({ ...this.connectionStatus.options });\n      this.credentialsExist = true;\n    } else {\n      this.isEdit = true;\n    }\n  }\n\n  replaceCredentials(): void {\n    this.isEdit = true;\n  }\n\n  async saveCredentials() {\n    if (this.formGroup.valid) {\n      this.connectionStatus.status = TenantConnectionStatus.CONNECTING_IN_PROGRESS;\n      const updated: boolean = await this.safelyUpdateCredentials(this.formGroup.value);\n\n      if (updated) {\n        const response: IFetchResponse = await this.impactService.getOptions();\n        this.connectionStatus = await response.json();\n\n        if (this.connectionStatus.status === TenantConnectionStatus.CONNECTED_SUCCESSFULLY) {\n          this.isEdit = false;\n        }\n\n        this.alert.success(gettext('Credentials saved.'));\n      } else {\n        this.connectionStatus.status = TenantConnectionStatus.UNKNOWN;\n      }\n    }\n  }\n\n  async deleteCredentials() {\n    try {\n      await this.modal.confirm(\n        gettext('Delete credentials'),\n        gettext(\n          'You are about to delete your IMPACT credentials. Deleting credentials will break connection to IMPACT instance. Do you want to proceed?'\n        ),\n        Status.DANGER,\n        { ok: gettext('Delete'), cancel: gettext('Cancel') }\n      );\n      await this.safelyDeleteCredentials();\n    } catch (ex) {\n      // Intentionally empty\n    }\n  }\n\n  private initForm(): void {\n    this.formGroup = this.formBuilder.group({\n      baseUrl: [],\n      user: ['', Validators.required],\n      password: ['', Validators.required],\n      groupName: [],\n      initializeDevices: [false]\n    });\n  }\n\n  private resetForm(): void {\n    this.formGroup.reset();\n  }\n\n  private async safelyUpdateCredentials(options: ImpactOptions): Promise<boolean> {\n    try {\n      const res = await this.impactService.updateOptions(options);\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n\n        return Promise.resolve(false);\n      } else {\n        return Promise.resolve(true);\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n\n      return Promise.resolve(false);\n    }\n  }\n\n  private async safelyDeleteCredentials() {\n    try {\n      const res = await this.impactService.deleteOptions();\n      if (res && res.status !== 200) {\n        const data = res.json ? await res.json() : undefined;\n        this.alert.addServerFailure({ data, res });\n      } else {\n        this.credentialsExist = false;\n        this.resetForm();\n        this.connectionStatus = null;\n        this.alert.success(gettext('Credentials deleted.'));\n      }\n    } catch (ex) {\n      this.alert.addServerFailure(ex);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { gettext } from '@c8y/ngx-components';\nimport { TenantConnectionStatus } from './impact.model';\n\n@Component({\n  selector: 'c8y-status-display',\n  templateUrl: './status-display.component.html'\n})\nexport class StatusDisplayComponent {\n  @Input() baseUrl: string;\n\n  icon: string;\n  statusName: string;\n\n  @Input() set status(status: TenantConnectionStatus) {\n    switch (status) {\n      case TenantConnectionStatus.CONNECTED_SUCCESSFULLY:\n        this.icon = 'success';\n        this.statusName = gettext('Connected successfully');\n        break;\n      case TenantConnectionStatus.CONNECTED_FAILED:\n        this.icon = 'failed';\n        this.statusName = gettext('Connection failed');\n        break;\n      case TenantConnectionStatus.CONNECTING_IN_PROGRESS:\n        this.icon = 'connecting';\n        this.statusName = gettext('Connection in progress');\n        break;\n      case TenantConnectionStatus.NO_CONNECTION:\n        this.icon = 'no-connection';\n        this.statusName = gettext('No connection');\n        break;\n      default:\n        this.icon = 'unknown';\n        this.statusName = gettext('Unknown`connection status`');\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CommonModule,\n  CoreModule,\n  FormsModule,\n  HOOK_NAVIGATOR_NODES,\n  HOOK_TABS,\n  Route\n} from '@c8y/ngx-components';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { ImpactConnectivityService } from './impact-connectivity.service';\nimport { ImpactNodeFactory } from './impact-node.factory';\nimport { ImpactProviderSettingsComponent } from './impact-provider-settings.component';\nimport { ImpactTabFactory } from './impact-tab.factory';\nimport { ImpactGuard } from './impact.guard';\nimport { StatusDisplayComponent } from './status-display.component';\n\nconst impactRoutes: Route[] = [\n  {\n    path: 'connectivitySettings/impact_provider_settings',\n    component: ImpactProviderSettingsComponent,\n    canActivate: [ImpactGuard]\n  }\n];\n\n@NgModule({\n  declarations: [ImpactProviderSettingsComponent, StatusDisplayComponent],\n  exports: [ImpactProviderSettingsComponent],\n  imports: [\n    CoreModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(impactRoutes),\n    PopoverModule,\n    ReactiveFormsModule\n  ],\n  entryComponents: [ImpactProviderSettingsComponent],\n  providers: [\n    ImpactConnectivityService,\n    ImpactGuard,\n    ImpactTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: ImpactNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: ImpactTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class ImpactModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\n\n@Injectable()\nexport class SigfoxGuard implements CanActivate {\n  private static readonly applicationName = 'sigfox-agent';\n  private showSigfoxProvider: Promise<boolean>;\n\n  constructor(private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSigfoxProvider === undefined) {\n      this.showSigfoxProvider = this.applicationService\n        .isAvailable(SigfoxGuard.applicationName)\n        .then(result => result && result.data);\n    }\n\n    return this.showSigfoxProvider;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { gettext, Tab } from '@c8y/ngx-components';\nimport { AbstractConnectivityTabFactory } from '../abstract-connectivity-tab.factory';\nimport { SigfoxGuard } from './sigfox.guard';\n\n@Injectable()\nexport class SigfoxTabFactory extends AbstractConnectivityTabFactory {\n  private tabConfig: Tab = {\n    label: gettext('Sigfox provider settings'),\n    path: '/connectivitySettings/sigfox_provider_settings',\n    icon: 'c8y-device'\n  };\n\n  constructor(protected router: Router, protected guard: SigfoxGuard) {\n    super(router, guard);\n  }\n\n  protected config(): Tab {\n    return this.tabConfig;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractConnectivityNodeFactory } from '../abstract-connectivity-node.factory';\nimport { SigfoxTabFactory } from './sigfox-tab.factory';\n\n@Injectable()\nexport class SigfoxNodeFactory extends AbstractConnectivityNodeFactory {\n  constructor(protected tabFactory: SigfoxTabFactory) {\n    super(tabFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HOOK_NAVIGATOR_NODES, HOOK_TABS } from '@c8y/ngx-components';\nimport { SigfoxNodeFactory } from './sigfox-node.factory';\nimport { SigfoxTabFactory } from './sigfox-tab.factory';\nimport { SigfoxGuard } from './sigfox.guard';\n\n@NgModule({\n  providers: [\n    SigfoxGuard,\n    SigfoxTabFactory,\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: SigfoxNodeFactory,\n      multi: true\n    },\n    {\n      provide: HOOK_TABS,\n      useClass: SigfoxTabFactory,\n      multi: true\n    }\n  ]\n})\nexport class SigfoxModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ConditionalTabsOutletComponent, CoreModule, Route } from '@c8y/ngx-components';\nimport { ActilityModule } from './actility/actility.module';\nimport { ImpactModule } from './impact/impact.module';\nimport { SigfoxModule } from './sigfox/sigfox.module';\n\nconst connectivityRoutes: Route[] = [\n  {\n    path: 'connectivitySettings',\n    component: ConditionalTabsOutletComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    CoreModule,\n    ActilityModule,\n    ImpactModule,\n    SigfoxModule,\n    RouterModule.forChild(connectivityRoutes)\n  ]\n})\nexport class ConnectivityModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { ApplicationService } from '@c8y/client';\nimport { Permissions } from '@c8y/ngx-components';\n\n@Injectable()\nexport class SimGuard implements CanActivate {\n  private static readonly applicationName = 'connectivity';\n  private showSimProvider: Promise<boolean>;\n\n  constructor(private permissions: Permissions, private applicationService: ApplicationService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    if (this.showSimProvider === undefined) {\n      const hasRole: Promise<boolean> = Promise.resolve(\n        this.permissions.hasRole('ROLE_CONNECTIVITY_READ')\n      );\n\n      this.showSimProvider = hasRole.then(\n        (hasPermissions: boolean) =>\n          hasPermissions &&\n          this.applicationService\n            .isAvailable(SimGuard.applicationName)\n            .then(result => result && result.data)\n      );\n    }\n\n    return this.showSimProvider;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  DroppedFile,\n  gettext,\n  ProviderConfigurationModule,\n  ProviderProperties\n} from '@c8y/ngx-components';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { get } from 'lodash-es';\nimport { SimGuard } from './sim.guard';\n\nexport async function encodeFiles(\n  model: ProviderProperties,\n  fields: FormlyFieldConfig[]\n): Promise<ProviderProperties> {\n  const result: ProviderProperties = { ...model };\n  const fileFields: FormlyFieldConfig[] = (get(fields, '[0].fieldGroup') || []).filter(\n    (field: FormlyFieldConfig) => {\n      return field.type === 'file' && field.templateOptions.contentEncoding === 'base64';\n    }\n  );\n\n  for (const fileField of fileFields) {\n    const files: DroppedFile[] = model[fileField.key as string];\n    if (files && files.length) {\n      if (fileField.templateOptions.maxAllowedFiles === 1) {\n        result[fileField.key as string] = (await files[0].readAsDataURL()).replace(\n          /data:\\S+;base64,/gi,\n          ''\n        );\n      } else {\n        const encodedFileContent: string[] = [];\n\n        for (const file of files) {\n          encodedFileContent.push(\n            (await file.readAsDataURL()).replace(/data:\\w+\\/\\w+;base64,/gi, '')\n          );\n        }\n\n        result[fileField.key as string] = encodedFileContent;\n      }\n    }\n  }\n  return result;\n}\n\n@NgModule({\n  providers: [SimGuard],\n  imports: [\n    ProviderConfigurationModule.config([\n      {\n        navigation: {\n          label: gettext('Connectivity'),\n          path: 'connectivitySettings',\n          icon: 'plug',\n          parent: gettext('Settings'),\n          priority: 1000,\n          preventDuplicates: true\n        },\n        tab: {\n          path: 'sim_provider_settings',\n          label: 'SIM provider settings',\n          icon: 'mobile',\n          canActivate: [SimGuard]\n        },\n        layout: {\n          pageTitle: gettext('Connectivity'),\n          cardTitle: gettext('Settings'),\n          description: gettext(\n            `In order to see the 'Connectivity' tab in device details, the user needs to have 'Read' permission for 'Connectivity'. To change SIM card status and send text messages, the user needs to have 'Admin' permission for 'Connectivity'.`\n          ),\n          providerName: gettext('Provider'),\n          providerNamePlaceholder: gettext('Select or type to filter providers'),\n          providerNameNoMatchesHint: gettext('Select one of the existing providers.'),\n          deleteRoles: ['ROLE_CONNECTIVITY_ADMIN'],\n          deleteBtnLabel: gettext('Delete'),\n          saveRoles: ['ROLE_CONNECTIVITY_ADMIN'],\n          saveBtnLabel: gettext('Save'),\n          beforeSaveHook: encodeFiles,\n          configurationUpdatedSuccessMsg: gettext('Settings updated.'),\n          deleteConfigurationModalTitle: gettext('Delete settings'),\n          deleteConfigurationModalBody: gettext(\n            `You are about to delete SIM provider settings. Do you want to proceed?`\n          ),\n          deleteConfigurationModalOkBtnLabel: gettext('Delete'),\n          configurationDeletedSuccessMsg: gettext('Settings deleted.')\n        },\n        endpoint: {\n          definitionsEndpoint: {\n            baseUrl: 'service/connectivity/metadata',\n            listUrl: 'definitions'\n          },\n          configurationEndpoint: {\n            baseUrl: 'service/connectivity/metadata',\n            listUrl: 'sim/provider'\n          }\n        }\n      }\n    ])\n  ]\n})\nexport class SimModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__extends","tslib_1.__decorate","tslib_1.__values"],"mappings":";;;;;;;;;;;;IAME,wCAAsB,MAAc,EAAY,KAAkB;QAA5C,WAAM,GAAN,MAAM,CAAQ;QAAY,UAAK,GAAL,KAAK,CAAa;KAAI;IAEtE,4CAAG,GAAH;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;KACzE;IAED,4CAAG,GAAH;QAAA,iBAOC;QANC,OAAO,IAAI,CAAC,kBAAkB,CAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CACpB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EACrC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACjC,CACF,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,QAAC,WAAW,GAAG,KAAI,CAAC,MAAM,EAAE,GAAG,IAAI,IAAC,CAAC,CAAC,CAAC;KAClE;IAIO,kDAAS,GAAjB,UAA2B,GAAQ;QACjC,OAAO,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;KAChD;IAEO,2DAAkB,GAA1B,UAA8B,KAAqC;QACjE,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KAClB;IACH,qCAAC;CAAA;;;ICtBC,yCAAsB,UAA0C;QAA1C,eAAU,GAAV,UAAU,CAAgC;QAR7C,qBAAgB,GAAkB,IAAI,aAAa,CAAC;YACrE,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC;YAC3B,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC;YAC9B,IAAI,EAAE,sBAAsB;YAC5B,IAAI,EAAE,MAAM;YACZ,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;KAEiE;IAEpE,6CAAG,GAAH;QAAA,iBAMC;QALC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CACxD,GAAG,CAAC,UAAA,GAAG;YACL,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,KAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;SAC7C,CAAC,CACH,CAAC;KACH;IAES,4DAAkB,GAA5B,UAAgC,KAAwB;QACtD,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KAClB;;gBAhBiC,8BAA8B;;IAT5C,+BAA+B;QADpD,UAAU,EAAE;OACS,+BAA+B,CA0BpD;IAAD,sCAAC;CA1BD;;;ICEE,uBAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;KAAI;sBAJnD,aAAa;IAMxB,mCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAI,IAAI,CAAC,oBAAoB,KAAK,SAAS,EAAE;YAC3C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,kBAAkB;iBAChD,WAAW,CAAC,eAAa,CAAC,eAAe,CAAC;iBAC1C,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,MAAM,CAAC,IAAI,GAAA,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC;KAClC;;IAbuB,6BAAe,GAAG,UAAU,CAAC;;gBAGb,kBAAkB;;IAJ/C,aAAa;QADzB,UAAU,EAAE;OACA,aAAa,CAezB;IAAD,oBAAC;CAfD;;;ICEwCA,sCAA8B;IAOpE,4BAAsB,MAAc,EAAY,KAAoB;QAApE,YACE,kBAAM,MAAM,EAAE,KAAK,CAAC,SACrB;QAFqB,YAAM,GAAN,MAAM,CAAQ;QAAY,WAAK,GAAL,KAAK,CAAe;QAN5D,eAAS,GAAQ;YACvB,KAAK,EAAE,OAAO,CAAC,iCAAiC,CAAC;YACjD,IAAI,EAAE,uDAAuD;YAC7D,IAAI,EAAE,YAAY;SACnB,CAAC;;KAID;IAES,mCAAM,GAAhB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;gBAN6B,MAAM;gBAAmB,aAAa;;IAPzD,kBAAkB;QAD9B,UAAU,EAAE;OACA,kBAAkB,CAc9B;IAAD,yBAAC;CAAA,CAduC,8BAA8B;;;ICF7BA,uCAA+B;IACtE,6BAAsB,UAA8B;QAApD,YACE,kBAAM,UAAU,CAAC,SAClB;QAFqB,gBAAU,GAAV,UAAU,CAAoB;;KAEnD;;gBAFiC,kBAAkB;;IADzC,mBAAmB;QAD/B,UAAU,EAAE;OACA,mBAAmB,CAI/B;IAAD,0BAAC;CAAA,CAJwC,+BAA+B;;;ICiBxE;KAA8B;IAAjB,cAAc;QAhB1B,QAAQ,CAAC;YACR,SAAS,EAAE;gBACT,aAAa;gBACb,kBAAkB;gBAClB;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,mBAAmB;oBAC7B,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,SAAS;oBAClB,QAAQ,EAAE,kBAAkB;oBAC5B,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAA9B;;;ICbE,mCAAoB,MAAmB;QAAnB,WAAM,GAAN,MAAM,CAAa;QAHtB,oBAAe,GAAW,8BAA8B,CAAC;QACzD,WAAM,GAAQ,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;KAE3B;IAE3C,8CAAU,GAAV;QACE,IAAM,OAAO,GAAkB;YAC7B,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,IAAI,CAAC,MAAM;SACrB,CAAC;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,eAAiB,EAAE,OAAO,CAAC,CAAC;KAC9D;IAED,iDAAa,GAAb,UAAc,aAA4B;QACxC,IAAM,OAAO,GAAkB;YAC7B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,MAAM;YACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;SACpC,CAAC;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,eAAiB,EAAE,OAAO,CAAC,CAAC;KAC9D;IAED,iDAAa,GAAb;QACE,IAAM,OAAO,GAAkB;YAC7B,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,IAAI,CAAC,MAAM;SACrB,CAAC;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAG,IAAI,CAAC,eAAiB,EAAE,OAAO,CAAC,CAAC;KAC9D;;gBAzB2B,WAAW;;IAJ5B,yBAAyB;QADrC,UAAU,EAAE;OACA,yBAAyB,CA8BrC;IAAD,gCAAC;CA9BD;;;ICIE,qBAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;KAAI;oBAJnD,WAAW;IAMtB,iCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,EAAE;YACzC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB;iBAC9C,WAAW,CAAC,aAAW,CAAC,eAAe,CAAC;iBACxC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,MAAM,CAAC,IAAI,GAAA,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;IAbuB,2BAAe,GAAG,QAAQ,CAAC;;gBAGX,kBAAkB;;IAJ/C,WAAW;QADvB,UAAU,EAAE;OACA,WAAW,CAevB;IAAD,kBAAC;CAfD;;;ICUE,0BAAoB,MAAc,EAAU,KAAkB;QAA1C,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAa;QANtD,WAAM,GAAQ;YACpB,KAAK,EAAE,OAAO,CAAC,0BAA0B,CAAC;YAC1C,IAAI,EAAE,gDAAgD;YACtD,IAAI,EAAE,MAAM;SACb,CAAC;KAEgE;IAElE,8BAAG,GAAH;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;KACzE;IAED,8BAAG,GAAH;QAAA,iBAOC;QANC,OAAO,IAAI,CAAC,kBAAkB,CAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,CACpB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EACrC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACjC,CACF,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,QAAC,WAAW,GAAG,KAAI,CAAC,MAAM,GAAG,IAAI,IAAC,CAAC,CAAC,CAAC;KAChE;IAEO,oCAAS,GAAjB,UAA2B,GAAQ;QACjC,OAAO,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;KAChD;IAEO,6CAAkB,GAA1B,UAA8B,KAAqC;QACjE,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KAClB;;gBA7B2B,MAAM;gBAAiB,WAAW;;IAPnD,gBAAgB;QAD5B,UAAU,EAAE;OACA,gBAAgB,CAqC5B;IAAD,uBAAC;CArCD;;;ICQE,2BAAoB,UAA4B;QAA5B,eAAU,GAAV,UAAU,CAAkB;QAR/B,qBAAgB,GAAkB,IAAI,aAAa,CAAC;YACnE,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC;YAC3B,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC;YAC9B,IAAI,EAAE,sBAAsB;YAC5B,IAAI,EAAE,MAAM;YACZ,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;KAEiD;IAEpD,+BAAG,GAAH;QAAA,iBAMC;QALC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CACxD,GAAG,CAAC,UAAA,GAAG;YACL,OAAO,CAAC,CAAC,GAAG,GAAG,CAAC,KAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;SAC7C,CAAC,CACH,CAAC;KACH;IAEO,8CAAkB,GAA1B,UAA8B,KAAwB;QACpD,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KAClB;;gBAhB+B,gBAAgB;;IATrC,iBAAiB;QAD7B,UAAU,EAAE;OACA,iBAAiB,CA0B7B;IAAD,wBAAC;CA1BD;;ICOY,sBAMX;AAND,WAAY,sBAAsB;IAChC,yDAA+B,CAAA;IAC/B,2EAAiD,CAAA;IACjD,2EAAiD,CAAA;IACjD,+DAAqC,CAAA;IACrC,6CAAmB,CAAA;CACpB,EANW,sBAAsB,KAAtB,sBAAsB,QAMjC;;;ICEC,yCACU,aAAwC,EACxC,WAAwB,EACxB,KAAmB,EACnB,KAAmB;QAHnB,kBAAa,GAAb,aAAa,CAA2B;QACxC,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAc;QACnB,UAAK,GAAL,KAAK,CAAc;QAP7B,WAAM,GAAY,KAAK,CAAC;QACxB,qBAAgB,GAAY,KAAK,CAAC;KAO9B;IAEE,kDAAQ,GAAd;;;;;;wBACE,IAAI,CAAC,QAAQ,EAAE,CAAC;wBACiB,qBAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,EAAA;;wBAAhE,QAAQ,GAAmB,SAAqC;wBACtE,KAAA,IAAI,CAAA;wBAAoB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;wBAA7C,GAAK,gBAAgB,GAAG,SAAqB,CAAC;wBAE9C,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;4BAC1D,IAAI,CAAC,SAAS,CAAC,UAAU,cAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAG,CAAC;4BAChE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;yBAC9B;6BAAM;4BACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;yBACpB;;;;;KACF;IAED,4DAAkB,GAAlB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;IAEK,yDAAe,GAArB;;;;;;6BACM,IAAI,CAAC,SAAS,CAAC,KAAK,EAApB,wBAAoB;wBACtB,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,sBAAsB,CAAC,sBAAsB,CAAC;wBACpD,qBAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAA;;wBAA3E,OAAO,GAAY,SAAwD;6BAE7E,OAAO,EAAP,wBAAO;wBACwB,qBAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,EAAA;;wBAAhE,QAAQ,GAAmB,SAAqC;wBACtE,KAAA,IAAI,CAAA;wBAAoB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;wBAA7C,GAAK,gBAAgB,GAAG,SAAqB,CAAC;wBAE9C,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,sBAAsB,CAAC,sBAAsB,EAAE;4BAClF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;yBACrB;wBAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;;;wBAElD,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,sBAAsB,CAAC,OAAO,CAAC;;;;;;KAGnE;IAEK,2DAAiB,GAAvB;;;;;;;wBAEI,qBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CACtB,OAAO,CAAC,oBAAoB,CAAC,EAC7B,OAAO,CACL,yIAAyI,CAC1I,EACD,MAAM,CAAC,MAAM,EACb,EAAE,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CACrD,EAAA;;wBAPD,SAOC,CAAC;wBACF,qBAAM,IAAI,CAAC,uBAAuB,EAAE,EAAA;;wBAApC,SAAoC,CAAC;;;;;;;;;KAIxC;IAEO,kDAAQ,GAAhB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;YAC/B,QAAQ,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;YACnC,SAAS,EAAE,EAAE;YACb,iBAAiB,EAAE,CAAC,KAAK,CAAC;SAC3B,CAAC,CAAC;KACJ;IAEO,mDAAS,GAAjB;QACE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KACxB;IAEa,iEAAuB,GAArC,UAAsC,OAAsB;;;;;;;wBAE5C,qBAAM,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,EAAA;;wBAArD,GAAG,GAAG,SAA+C;8BACvD,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAA,EAAzB,wBAAyB;6BACd,GAAG,CAAC,IAAI,EAAR,wBAAQ;wBAAG,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;wBAAhB,KAAA,SAAgB,CAAA;;;wBAAG,KAAA,SAAS,CAAA;;;wBAA9C,IAAI,KAA0C;wBACpD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,IAAI,MAAA,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;wBAE3C,sBAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC;4BAE9B,sBAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC;;;;wBAG/B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAE,CAAC,CAAC;wBAEhC,sBAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAC;;;;;KAEjC;IAEa,iEAAuB,GAArC;;;;;;;wBAEgB,qBAAM,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,EAAA;;wBAA9C,GAAG,GAAG,SAAwC;8BAChD,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAA,EAAzB,wBAAyB;6BACd,GAAG,CAAC,IAAI,EAAR,wBAAQ;wBAAG,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;wBAAhB,KAAA,SAAgB,CAAA;;;wBAAG,KAAA,SAAS,CAAA;;;wBAA9C,IAAI,KAA0C;wBACpD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,IAAI,MAAA,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;;;wBAE3C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;wBAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;wBACjB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;wBAC7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC;;;;;wBAGtD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAE,CAAC,CAAC;;;;;;KAEnC;;gBA1GwB,yBAAyB;gBAC3B,WAAW;gBACjB,YAAY;gBACZ,YAAY;;IAXlB,+BAA+B;QAJ3C,SAAS,CAAC;YACT,QAAQ,EAAE,8BAA8B;YACxC,k6JAAwD;SACzD,CAAC;OACW,+BAA+B,CAmH3C;IAAD,sCAAC;CAnHD;;;ICPA;KA6BC;IAvBU,sBAAI,0CAAM;aAAV,UAAW,MAA8B;YAChD,QAAQ,MAAM;gBACZ,KAAK,sBAAsB,CAAC,sBAAsB;oBAChD,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;oBACtB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;oBACpD,MAAM;gBACR,KAAK,sBAAsB,CAAC,gBAAgB;oBAC1C,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;oBAC/C,MAAM;gBACR,KAAK,sBAAsB,CAAC,sBAAsB;oBAChD,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;oBACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;oBACpD,MAAM;gBACR,KAAK,sBAAsB,CAAC,aAAa;oBACvC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;oBAC5B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;oBAC3C,MAAM;gBACR;oBACE,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;oBACtB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;aAC3D;SACF;;;OAAA;IA3BQC;QAAR,KAAK,EAAE;2DAAiB;IAKhBA;QAAR,KAAK,EAAE;wDAsBP;IA5BU,sBAAsB;QAJlC,SAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,ksUAA8C;SAC/C,CAAC;OACW,sBAAsB,CA6BlC;IAAD,6BAAC;CA7BD;;ACWA,IAAM,YAAY,GAAY;IAC5B;QACE,IAAI,EAAE,+CAA+C;QACrD,SAAS,EAAE,+BAA+B;QAC1C,WAAW,EAAE,CAAC,WAAW,CAAC;KAC3B;CACF,CAAC;AA8BF;IAAA;KAA4B;IAAf,YAAY;QA5BxB,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,+BAA+B,EAAE,sBAAsB,CAAC;YACvE,OAAO,EAAE,CAAC,+BAA+B,CAAC;YAC1C,OAAO,EAAE;gBACP,UAAU;gBACV,YAAY;gBACZ,WAAW;gBACX,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC;gBACnC,aAAa;gBACb,mBAAmB;aACpB;YACD,eAAe,EAAE,CAAC,+BAA+B,CAAC;YAClD,SAAS,EAAE;gBACT,yBAAyB;gBACzB,WAAW;gBACX,gBAAgB;gBAChB;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,iBAAiB;oBAC3B,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,SAAS;oBAClB,QAAQ,EAAE,gBAAgB;oBAC1B,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;OACW,YAAY,CAAG;IAAD,mBAAC;CAA5B;;;IC9CE,qBAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;KAAI;oBAJnD,WAAW;IAMtB,iCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,EAAE;YACzC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB;iBAC9C,WAAW,CAAC,aAAW,CAAC,eAAe,CAAC;iBACxC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,MAAM,CAAC,IAAI,GAAA,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;IAbuB,2BAAe,GAAG,cAAc,CAAC;;gBAGjB,kBAAkB;;IAJ/C,WAAW;QADvB,UAAU,EAAE;OACA,WAAW,CAevB;IAAD,kBAAC;CAfD;;;ICEsCD,oCAA8B;IAOlE,0BAAsB,MAAc,EAAY,KAAkB;QAAlE,YACE,kBAAM,MAAM,EAAE,KAAK,CAAC,SACrB;QAFqB,YAAM,GAAN,MAAM,CAAQ;QAAY,WAAK,GAAL,KAAK,CAAa;QAN1D,eAAS,GAAQ;YACvB,KAAK,EAAE,OAAO,CAAC,0BAA0B,CAAC;YAC1C,IAAI,EAAE,gDAAgD;YACtD,IAAI,EAAE,YAAY;SACnB,CAAC;;KAID;IAES,iCAAM,GAAhB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;gBAN6B,MAAM;gBAAmB,WAAW;;IAPvD,gBAAgB;QAD5B,UAAU,EAAE;OACA,gBAAgB,CAc5B;IAAD,uBAAC;CAAA,CAdqC,8BAA8B;;;ICF7BA,qCAA+B;IACpE,2BAAsB,UAA4B;QAAlD,YACE,kBAAM,UAAU,CAAC,SAClB;QAFqB,gBAAU,GAAV,UAAU,CAAkB;;KAEjD;;gBAFiC,gBAAgB;;IADvC,iBAAiB;QAD7B,UAAU,EAAE;OACA,iBAAiB,CAI7B;IAAD,wBAAC;CAAA,CAJsC,+BAA+B;;;ICiBtE;KAA4B;IAAf,YAAY;QAhBxB,QAAQ,CAAC;YACR,SAAS,EAAE;gBACT,WAAW;gBACX,gBAAgB;gBAChB;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,iBAAiB;oBAC3B,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,OAAO,EAAE,SAAS;oBAClB,QAAQ,EAAE,gBAAgB;oBAC1B,KAAK,EAAE,IAAI;iBACZ;aACF;SACF,CAAC;OACW,YAAY,CAAG;IAAD,mBAAC;CAA5B;;ACfA,IAAM,kBAAkB,GAAY;IAClC;QACE,IAAI,EAAE,sBAAsB;QAC5B,SAAS,EAAE,8BAA8B;KAC1C;CACF,CAAC;AAWF;IAAA;KAAkC;IAArB,kBAAkB;QAT9B,QAAQ,CAAC;YACR,OAAO,EAAE;gBACP,UAAU;gBACV,cAAc;gBACd,YAAY;gBACZ,YAAY;gBACZ,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC;aAC1C;SACF,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAlC;;;ICbE,kBAAoB,WAAwB,EAAU,kBAAsC;QAAxE,gBAAW,GAAX,WAAW,CAAa;QAAU,uBAAkB,GAAlB,kBAAkB,CAAoB;KAAI;iBAJrF,QAAQ;IAMnB,8BAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QAArE,iBAgBC;QAfC,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;YACtC,IAAM,OAAO,GAAqB,OAAO,CAAC,OAAO,CAC/C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,wBAAwB,CAAC,CACnD,CAAC;YAEF,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,IAAI,CACjC,UAAC,cAAuB;gBACtB,OAAA,cAAc;oBACd,KAAI,CAAC,kBAAkB;yBACpB,WAAW,CAAC,UAAQ,CAAC,eAAe,CAAC;yBACrC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,IAAI,MAAM,CAAC,IAAI,GAAA,CAAC;aAAA,CAC3C,CAAC;SACH;QAED,OAAO,IAAI,CAAC,eAAe,CAAC;KAC7B;;IArBuB,wBAAe,GAAG,cAAc,CAAC;;gBAGxB,WAAW;gBAA8B,kBAAkB;;IAJjF,QAAQ;QADpB,UAAU,EAAE;OACA,QAAQ,CAuBpB;IAAD,eAAC;CAvBD;;SCKsB,WAAW,CAC/B,KAAyB,EACzB,MAA2B;;;;;;;oBAErB,MAAM,gBAA4B,KAAK,CAAE,CAAC;oBAC1C,UAAU,GAAwB,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAgB,CAAC,IAAI,EAAE,EAAE,MAAM,CAClF,UAAC,KAAwB;wBACvB,OAAO,KAAK,CAAC,IAAI,KAAK,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,eAAe,KAAK,QAAQ,CAAC;qBACpF,CACF,CAAC;;;;oBAEsB,eAAAE,SAAA,UAAU,CAAA;;;;oBAAvB,SAAS;oBACZ,KAAK,GAAkB,KAAK,CAAC,SAAS,CAAC,GAAa,CAAC,CAAC;0BACxD,KAAK,IAAI,KAAK,CAAC,MAAM,CAAA,EAArB,yBAAqB;0BACnB,SAAS,CAAC,eAAe,CAAC,eAAe,KAAK,CAAC,CAAA,EAA/C,wBAA+C;oBACjD,KAAA,MAAM,CAAA;oBAAC,KAAA,SAAS,CAAC,GAAa,CAAA;oBAAK,qBAAM,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,EAAA;;oBAAjE,MAA+B,GAAG,CAAC,SAA8B,EAAE,OAAO,CACxE,oBAAoB,EACpB,EAAE,CACH,CAAC;;;oBAEI,kBAAkB,GAAa,EAAE,CAAC;;;;oBAErB,yBAAAA,SAAA,KAAK,CAAA,CAAA;;;;oBAAb,IAAI;oBACb,KAAA,CAAA,KAAA,kBAAkB,EAAC,IAAI,CAAA;oBACpB,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;oBAD7B,cACE,CAAC,SAA0B,EAAE,OAAO,CAAC,yBAAyB,EAAE,EAAE,CAAC,EACpE,CAAC;;;;;;;;;;;;;;;;;oBAGJ,MAAM,CAAC,SAAS,CAAC,GAAa,CAAC,GAAG,kBAAkB,CAAC;;;;;;;;;;;;;;;;yBAI3D,sBAAO,MAAM,EAAC;;;;CACf;AAyDD;IAAA;KAAyB;IAAZ,SAAS;QAvDrB,QAAQ,CAAC;YACR,SAAS,EAAE,CAAC,QAAQ,CAAC;YACrB,OAAO,EAAE;gBACP,2BAA2B,CAAC,MAAM,CAAC;oBACjC;wBACE,UAAU,EAAE;4BACV,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC;4BAC9B,IAAI,EAAE,sBAAsB;4BAC5B,IAAI,EAAE,MAAM;4BACZ,MAAM,EAAE,OAAO,CAAC,UAAU,CAAC;4BAC3B,QAAQ,EAAE,IAAI;4BACd,iBAAiB,EAAE,IAAI;yBACxB;wBACD,GAAG,EAAE;4BACH,IAAI,EAAE,uBAAuB;4BAC7B,KAAK,EAAE,uBAAuB;4BAC9B,IAAI,EAAE,QAAQ;4BACd,WAAW,EAAE,CAAC,QAAQ,CAAC;yBACxB;wBACD,MAAM,EAAE;4BACN,SAAS,EAAE,OAAO,CAAC,cAAc,CAAC;4BAClC,SAAS,EAAE,OAAO,CAAC,UAAU,CAAC;4BAC9B,WAAW,EAAE,OAAO,CAClB,wOAAwO,CACzO;4BACD,YAAY,EAAE,OAAO,CAAC,UAAU,CAAC;4BACjC,uBAAuB,EAAE,OAAO,CAAC,oCAAoC,CAAC;4BACtE,yBAAyB,EAAE,OAAO,CAAC,uCAAuC,CAAC;4BAC3E,WAAW,EAAE,CAAC,yBAAyB,CAAC;4BACxC,cAAc,EAAE,OAAO,CAAC,QAAQ,CAAC;4BACjC,SAAS,EAAE,CAAC,yBAAyB,CAAC;4BACtC,YAAY,EAAE,OAAO,CAAC,MAAM,CAAC;4BAC7B,cAAc,EAAE,WAAW;4BAC3B,8BAA8B,EAAE,OAAO,CAAC,mBAAmB,CAAC;4BAC5D,6BAA6B,EAAE,OAAO,CAAC,iBAAiB,CAAC;4BACzD,4BAA4B,EAAE,OAAO,CACnC,wEAAwE,CACzE;4BACD,kCAAkC,EAAE,OAAO,CAAC,QAAQ,CAAC;4BACrD,8BAA8B,EAAE,OAAO,CAAC,mBAAmB,CAAC;yBAC7D;wBACD,QAAQ,EAAE;4BACR,mBAAmB,EAAE;gCACnB,OAAO,EAAE,+BAA+B;gCACxC,OAAO,EAAE,aAAa;6BACvB;4BACD,qBAAqB,EAAE;gCACrB,OAAO,EAAE,+BAA+B;gCACxC,OAAO,EAAE,cAAc;6BACxB;yBACF;qBACF;iBACF,CAAC;aACH;SACF,CAAC;OACW,SAAS,CAAG;IAAD,gBAAC;CAAzB;;ACrGA;;GAEG;;;;"}