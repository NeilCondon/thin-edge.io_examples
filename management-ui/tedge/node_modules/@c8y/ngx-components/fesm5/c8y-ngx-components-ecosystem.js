import { __decorate, __awaiter, __generator } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OptionsService, NavigatorNode, gettext, CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';

var EcosystemGuard = /** @class */ (function () {
    function EcosystemGuard(optionsService) {
        this.optionsService = optionsService;
    }
    EcosystemGuard.prototype.canActivate = function (route, state) {
        return this.isFeatureEnabled();
    };
    EcosystemGuard.prototype.isFeatureEnabled = function () {
        return Boolean(this.optionsService.get('beta', false));
    };
    EcosystemGuard.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    EcosystemGuard = __decorate([
        Injectable()
    ], EcosystemGuard);
    return EcosystemGuard;
}());

var EcosystemNavigationFactory = /** @class */ (function () {
    function EcosystemNavigationFactory(ecosystemGuard) {
        this.ecosystemGuard = ecosystemGuard;
        this.navs = [];
    }
    EcosystemNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var applicationsNode, microservicesNode;
            return __generator(this, function (_a) {
                // Check for the beta flag. To be removed when the feature is production ready.
                if (!this.ecosystemGuard.isFeatureEnabled()) {
                    return [2 /*return*/, []];
                }
                if (this.navs.length === 0) {
                    applicationsNode = new NavigatorNode({
                        label: gettext('Applications'),
                        icon: 'c8y-modules',
                        path: '/application-list'
                    });
                    microservicesNode = new NavigatorNode({
                        label: gettext('Microservices'),
                        icon: 'microchip',
                        path: '/microservices'
                    });
                    this.navs.push(new NavigatorNode({
                        label: gettext('Ecosystem'),
                        icon: 'c8y-atom',
                        priority: 3200,
                        children: [applicationsNode, microservicesNode]
                    }));
                }
                return [2 /*return*/, this.navs];
            });
        });
    };
    EcosystemNavigationFactory.ctorParameters = function () { return [
        { type: EcosystemGuard }
    ]; };
    EcosystemNavigationFactory = __decorate([
        Injectable()
    ], EcosystemNavigationFactory);
    return EcosystemNavigationFactory;
}());

var ApplicationListComponent = /** @class */ (function () {
    function ApplicationListComponent() {
    }
    ApplicationListComponent = __decorate([
        Component({
            selector: 'c8y-application-list',
            template: "<c8y-title>Applications</c8y-title>\nHere goes the application list\n"
        })
    ], ApplicationListComponent);
    return ApplicationListComponent;
}());

var MicroserviceListComponent = /** @class */ (function () {
    function MicroserviceListComponent() {
    }
    MicroserviceListComponent = __decorate([
        Component({
            selector: 'c8y-microservice-list',
            template: "<c8y-title>Microservices</c8y-title>\nHere goes the microservices list\n"
        })
    ], MicroserviceListComponent);
    return MicroserviceListComponent;
}());

var ecosystemRoutes = [
    {
        path: 'application-list',
        component: ApplicationListComponent,
        canActivate: [EcosystemGuard]
    },
    {
        path: 'microservices',
        component: MicroserviceListComponent,
        canActivate: [EcosystemGuard]
    }
];
var EcosystemModule = /** @class */ (function () {
    function EcosystemModule() {
    }
    EcosystemModule = __decorate([
        NgModule({
            declarations: [ApplicationListComponent, MicroserviceListComponent],
            imports: [CoreModule, RouterModule.forRoot(ecosystemRoutes, { useHash: true })],
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: EcosystemNavigationFactory,
                    multi: true
                },
                EcosystemGuard
            ]
        })
    ], EcosystemModule);
    return EcosystemModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { EcosystemModule, ApplicationListComponent as ɵa, MicroserviceListComponent as ɵb, EcosystemGuard as ɵc, EcosystemNavigationFactory as ɵd };
//# sourceMappingURL=c8y-ngx-components-ecosystem.js.map
