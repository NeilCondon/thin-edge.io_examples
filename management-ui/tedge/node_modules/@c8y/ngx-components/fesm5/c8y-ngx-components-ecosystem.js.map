{"version":3,"file":"c8y-ngx-components-ecosystem.js","sources":["ng://@c8y/ngx-components/ecosystem/ecosystem.guard.ts","ng://@c8y/ngx-components/ecosystem/ecosystem-navigation-factory.ts","ng://@c8y/ngx-components/ecosystem/application-list.component.ts","ng://@c8y/ngx-components/ecosystem/microservice-list.component.ts","ng://@c8y/ngx-components/ecosystem/ecosystem.module.ts","ng://@c8y/ngx-components/ecosystem/c8y-ngx-components-ecosystem.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { OptionsService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class EcosystemGuard implements CanActivate {\n  constructor(private optionsService: OptionsService) {}\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.isFeatureEnabled();\n  }\n\n  isFeatureEnabled() {\n    return Boolean(this.optionsService.get('beta', false));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigatorNode, NavigatorNodeFactory, gettext } from '@c8y/ngx-components';\nimport { EcosystemGuard } from './ecosystem.guard';\n\n@Injectable()\nexport class EcosystemNavigationFactory implements NavigatorNodeFactory {\n  private navs: NavigatorNode[] = [];\n  constructor(private ecosystemGuard: EcosystemGuard) {}\n\n  async get() {\n    // Check for the beta flag. To be removed when the feature is production ready.\n    if (!this.ecosystemGuard.isFeatureEnabled()) {\n      return [];\n    }\n\n    if (this.navs.length === 0) {\n      const applicationsNode: NavigatorNode = new NavigatorNode({\n        label: gettext('Applications'),\n        icon: 'c8y-modules',\n        path: '/application-list'\n      });\n\n      const microservicesNode = new NavigatorNode({\n        label: gettext('Microservices'),\n        icon: 'microchip',\n        path: '/microservices'\n      });\n\n      this.navs.push(\n        new NavigatorNode({\n          label: gettext('Ecosystem'),\n          icon: 'c8y-atom',\n          priority: 3200,\n          children: [applicationsNode, microservicesNode]\n        })\n      );\n    }\n    return this.navs;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'c8y-application-list',\n  templateUrl: './application-list.component.html'\n})\nexport class ApplicationListComponent {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'c8y-microservice-list',\n  templateUrl: './microservice-list.component.html'\n})\nexport class MicroserviceListComponent {}\n","import { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';\nimport { EcosystemNavigationFactory } from './ecosystem-navigation-factory';\nimport { ApplicationListComponent } from './application-list.component';\nimport { EcosystemGuard } from './ecosystem.guard';\nimport { MicroserviceListComponent } from './microservice-list.component';\n\nconst ecosystemRoutes: Route[] = [\n  {\n    path: 'application-list',\n    component: ApplicationListComponent,\n    canActivate: [EcosystemGuard]\n  },\n  {\n    path: 'microservices',\n    component: MicroserviceListComponent,\n    canActivate: [EcosystemGuard]\n  }\n];\n\n@NgModule({\n  declarations: [ApplicationListComponent, MicroserviceListComponent],\n  imports: [CoreModule, RouterModule.forRoot(ecosystemRoutes, { useHash: true })],\n  providers: [\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: EcosystemNavigationFactory,\n      multi: true\n    },\n    EcosystemGuard\n  ]\n})\nexport class EcosystemModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ApplicationListComponent as ɵa} from './application-list.component';\nexport {EcosystemNavigationFactory as ɵd} from './ecosystem-navigation-factory';\nexport {EcosystemGuard as ɵc} from './ecosystem.guard';\nexport {MicroserviceListComponent as ɵb} from './microservice-list.component';"],"names":[],"mappings":";;;;;;IAME,wBAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;KAAI;IACtD,oCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAChC;IAED,yCAAgB,GAAhB;QACE,OAAO,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;KACxD;;gBAPmC,cAAc;;IADvC,cAAc;QAD1B,UAAU,EAAE;OACA,cAAc,CAS1B;IAAD,qBAAC;CATD;;;ICEE,oCAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAD1C,SAAI,GAAoB,EAAE,CAAC;KACmB;IAEhD,wCAAG,GAAT;;;;;gBAEE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,EAAE;oBAC3C,sBAAO,EAAE,EAAC;iBACX;gBAED,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;oBACpB,gBAAgB,GAAkB,IAAI,aAAa,CAAC;wBACxD,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC;wBAC9B,IAAI,EAAE,aAAa;wBACnB,IAAI,EAAE,mBAAmB;qBAC1B,CAAC,CAAC;oBAEG,iBAAiB,GAAG,IAAI,aAAa,CAAC;wBAC1C,KAAK,EAAE,OAAO,CAAC,eAAe,CAAC;wBAC/B,IAAI,EAAE,WAAW;wBACjB,IAAI,EAAE,gBAAgB;qBACvB,CAAC,CAAC;oBAEH,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,IAAI,aAAa,CAAC;wBAChB,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC;wBAC3B,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,IAAI;wBACd,QAAQ,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;qBAChD,CAAC,CACH,CAAC;iBACH;gBACD,sBAAO,IAAI,CAAC,IAAI,EAAC;;;KAClB;;gBA/BmC,cAAc;;IAFvC,0BAA0B;QADtC,UAAU,EAAE;OACA,0BAA0B,CAkCtC;IAAD,iCAAC;CAlCD;;;ICCA;KAAwC;IAA3B,wBAAwB;QAJpC,SAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,iFAAgD;SACjD,CAAC;OACW,wBAAwB,CAAG;IAAD,+BAAC;CAAxC;;;ICAA;KAAyC;IAA5B,yBAAyB;QAJrC,SAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;YACjC,oFAAiD;SAClD,CAAC;OACW,yBAAyB,CAAG;IAAD,gCAAC;CAAzC;;ACEA,IAAM,eAAe,GAAY;IAC/B;QACE,IAAI,EAAE,kBAAkB;QACxB,SAAS,EAAE,wBAAwB;QACnC,WAAW,EAAE,CAAC,cAAc,CAAC;KAC9B;IACD;QACE,IAAI,EAAE,eAAe;QACrB,SAAS,EAAE,yBAAyB;QACpC,WAAW,EAAE,CAAC,cAAc,CAAC;KAC9B;CACF,CAAC;AAcF;IAAA;KAA+B;IAAlB,eAAe;QAZ3B,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,wBAAwB,EAAE,yBAAyB,CAAC;YACnE,OAAO,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/E,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,oBAAoB;oBAC7B,QAAQ,EAAE,0BAA0B;oBACpC,KAAK,EAAE,IAAI;iBACZ;gBACD,cAAc;aACf;SACF,CAAC;OACW,eAAe,CAAG;IAAD,sBAAC;CAA/B;;ACjCA;;GAEG;;;;"}