import { __decorate } from 'tslib';
import { EventEmitter, Input, HostBinding, Output, Component, NgModule } from '@angular/core';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { CoreModule } from '@c8y/ngx-components';
import { coerceBooleanProperty } from '@angular/cdk/coercion';

var StatusFilterComponent = /** @class */ (function () {
    function StatusFilterComponent() {
        this.statusOptions = [];
        this.onFilterChanged = new EventEmitter();
        this.isAllButtonSelected = true;
    }
    Object.defineProperty(StatusFilterComponent.prototype, "options", {
        /** List of filter options to be displayed */
        set: function (options) {
            this.statusOptions = (options || []).map(function (option) { return ({ selected: false, option: option }); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "_multiple", {
        /**
         * Allows multiple options to be active simultaneosly.
         */
        set: function (multiple) {
            this.multiple = coerceBooleanProperty(multiple);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "_small", {
        /** Display the filter as a small button group */
        set: function (small) {
            this.small = coerceBooleanProperty(small);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusFilterComponent.prototype, "displaySmall", {
        get: function () {
            return this.small;
        },
        enumerable: true,
        configurable: true
    });
    StatusFilterComponent.prototype.changeFilter = function (option) {
        this.isAllButtonSelected = false;
        var emitNeeded = false;
        if (this.multiple) {
            option.selected = !option.selected;
            emitNeeded = true;
        }
        else if (!option.selected) {
            option.selected = true;
            this.statusOptions.filter(function (op) { return op !== option; }).forEach(function (op) { return (op.selected = false); });
            emitNeeded = true;
        }
        if (emitNeeded) {
            this.emitSelectedOptions();
        }
    };
    StatusFilterComponent.prototype.removeFilter = function () {
        this.isAllButtonSelected = true;
        this.statusOptions.forEach(function (op) { return (op.selected = false); });
        this.emitSelectedOptions();
    };
    /**
     * Allows the filter to be initalliy displayed with some preset filters.
     *
     * @param filters An `IStatusOption` array defining filter options to be preset.
     * @param emit  (optional) If `true` component will emit `onFilterChanged` event.
     */
    StatusFilterComponent.prototype.preset = function (filters, emit) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        var firstSelected = false;
        this.statusOptions.forEach(function (option) { return (option.selected = false); });
        this.statusOptions
            .filter(function (option) { return (filters || []).map(function (o) { return o.label; }).includes(option.option.label); })
            .filter(function () {
            // only first option passed will be set in single selection mode
            var include = _this.multiple || !firstSelected;
            if (include) {
                firstSelected = true;
            }
            return include;
        })
            .forEach(function (option) { return (option.selected = true); });
        this.isAllButtonSelected = !(filters && filters.length);
        if (emit) {
            this.emitSelectedOptions();
        }
    };
    StatusFilterComponent.prototype.reset = function () {
        this.removeFilter();
    };
    StatusFilterComponent.prototype.activeFilters = function () {
        return this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; });
    };
    StatusFilterComponent.prototype.isFilterApplied = function () {
        return this.statusOptions.some(function (option) { return option.selected; });
    };
    StatusFilterComponent.prototype.emitSelectedOptions = function () {
        this.onFilterChanged.emit(this.statusOptions.filter(function (option) { return option.selected; }).map(function (option) { return option.option; }));
    };
    __decorate([
        Input()
    ], StatusFilterComponent.prototype, "options", null);
    __decorate([
        Input('multiple')
    ], StatusFilterComponent.prototype, "_multiple", null);
    __decorate([
        Input('small')
    ], StatusFilterComponent.prototype, "_small", null);
    __decorate([
        HostBinding('class.btn-group-sm')
    ], StatusFilterComponent.prototype, "displaySmall", null);
    __decorate([
        Output()
    ], StatusFilterComponent.prototype, "onFilterChanged", void 0);
    StatusFilterComponent = __decorate([
        Component({
            selector: 'c8y-status-filter',
            template: "<div dropdown \n  placement=\"bottom left\" \n  class=\"dropdown c8y-child-assets-selector\"\n>\n  <button id=\"status-filter\" \n    dropdownToggle \n    type=\"button\" \n    class=\"btn dropdown-toggle d-flex a-i-center c8y-dropdown\"\n    title=\"{{ 'Status filter' | translate}}\"\n    aria-controls=\"dropdown-status-filter\">\n    <span *ngFor=\"let option of statusOptions\" class=\"d-contents\">\n      <span class=\"text-truncate\" *ngIf=\"option.selected\">\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </span>\n    </span>\n    <span class=\"text-truncate\" *ngIf=\"isAllButtonSelected\">\n      <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n      {{ 'All statuses' | translate }}\n    </span>\n  </button>\n  <ul id=\"dropdown-status-filter\" \n    *dropdownMenu \n    class=\"dropdown-menu\"\n    role=\"menu\" \n    aria-labelledby=\"status-filter\"\n  >\n    <li *ngFor=\"let option of statusOptions\" [ngClass]=\"{ active: option.selected }\" >\n      <button\n        (click)=\"changeFilter(option)\"\n      >\n        <i [class]=\"option.option?.iconClass\"></i>\n        <span class=\"m-l-4\">{{ option.option?.label | translate }}</span>\n      </button>\n    </li>\n    <li [ngClass]=\"{ active: isAllButtonSelected }\">\n      <button\n        title=\"{{ 'All' | translate }}\"\n        (click)=\"removeFilter()\"\n      >\n        <i c8yIcon=\"c8y-energy\" class=\"m-r-4 text-info\"></i>\n        {{ 'All statuses' | translate }}\n      </button>\n    </li>\n  </ul>\n</div>"
        })
    ], StatusFilterComponent);
    return StatusFilterComponent;
}());

/**
 * This module provides a component for selecting status filter.
 */
var StatusFilterModule = /** @class */ (function () {
    function StatusFilterModule() {
    }
    StatusFilterModule = __decorate([
        NgModule({
            imports: [CoreModule, TooltipModule, BsDropdownModule],
            declarations: [StatusFilterComponent],
            entryComponents: [StatusFilterComponent],
            exports: [StatusFilterComponent]
        })
    ], StatusFilterModule);
    return StatusFilterModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { StatusFilterComponent, StatusFilterModule };
//# sourceMappingURL=c8y-ngx-components-operations-status-filter.js.map
