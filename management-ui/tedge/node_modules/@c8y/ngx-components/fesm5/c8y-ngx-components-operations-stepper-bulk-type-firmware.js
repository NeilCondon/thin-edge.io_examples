import { __extends, __decorate } from 'tslib';
import { Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { gettext, memoize, CoreModule, FormsModule } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { get, property } from 'lodash-es';
import { BehaviorSubject, of } from 'rxjs';
import { BaseStepperComponent, BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';
import { BulkOperationsService, BulkOperationType, baseUrl, HOOK_LIST_BULK_TYPE } from '@c8y/ngx-components/operations/bulk-operations-service';
import { distinctUntilChanged, switchMap, catchError, shareReplay, distinctUntilKeyChanged, tap, map, debounceTime } from 'rxjs/operators';
import { InventoryService } from '@c8y/client';
import { RepositoryService, RepositoryType, RepositoryModule } from '@c8y/ngx-components/repository';
import { ReactiveFormsModule } from '@angular/forms';

var StepperBulkTypeFirmwareComponent = /** @class */ (function (_super) {
    __extends(StepperBulkTypeFirmwareComponent, _super);
    function StepperBulkTypeFirmwareComponent(bulkOperationService, translate) {
        var _this = _super.call(this) || this;
        _this.bulkOperationService = bulkOperationService;
        _this.translate = translate;
        _this.descriptionTemplate = gettext('{{ name }} (version {{ version }})');
        _this.textFilter$ = new BehaviorSubject('');
        _this.stepData = {
            firmware: undefined,
            versionOrPatch: undefined
        };
        return _this;
    }
    StepperBulkTypeFirmwareComponent.prototype.goToVersionOrPatchStep = function (_a) {
        var stepper = _a.stepper;
        var selectedFirmware = this.stepData.firmware;
        this.bulkOperationService.setFirmwareId(selectedFirmware.id);
        this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;
        stepper.next();
    };
    StepperBulkTypeFirmwareComponent.prototype.onVersionOrPatchSelected = function (versionOrPatch) {
        this.stepData.versionOrPatch = versionOrPatch;
    };
    StepperBulkTypeFirmwareComponent.prototype.onFirmwareSelected = function (fw) {
        this.stepData.firmware = fw;
    };
    StepperBulkTypeFirmwareComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    StepperBulkTypeFirmwareComponent.prototype.retrieveOperationPrototype = function () {
        var selectedFirmware = this.stepData.firmware;
        var selectedVersionOrPatch = this.stepData.versionOrPatch;
        if (!selectedFirmware || !selectedVersionOrPatch) {
            return;
        }
        var firmware = {
            name: selectedFirmware.name,
            version: selectedVersionOrPatch.c8y_Firmware.version,
            url: selectedVersionOrPatch.c8y_Firmware.url
        };
        if (selectedVersionOrPatch.c8y_Patch) {
            firmware.isPatch = true;
            firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;
        }
        var name = selectedFirmware.name;
        var version = selectedVersionOrPatch.c8y_Firmware.version;
        var description = "Update firmware to: " + name + " (version: " + version + ").";
        return {
            name: gettext('Firmware update'),
            description: this.translate.instant(this.descriptionTemplate, {
                name: get(this.stepData, 'firmware.name'),
                version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')
            }),
            prototype: {
                description: description,
                c8y_Firmware: firmware
            }
        };
    };
    StepperBulkTypeFirmwareComponent.prototype.onSelectionChange = function (event) {
        this.textFilter$.next('');
        _super.prototype.onSelectionChange.call(this, event);
    };
    StepperBulkTypeFirmwareComponent.ctorParameters = function () { return [
        { type: BulkOperationsService },
        { type: TranslateService }
    ]; };
    StepperBulkTypeFirmwareComponent = __decorate([
        Component({
            selector: 'c8y-stepper-firmware',
            template: "<c8y-bulk-operation-stepper>\n  <ng-container\n    *customStep=\"\n      'Select firmware' | translate;\n      completed: !!stepData?.firmware;\n      buttonsDisabled: !stepData?.firmware;\n      onNext: goToVersionOrPatchStep.bind(this)\n    \"\n  >\n    <c8y-select-firmware-step\n      [selected]=\"stepData?.firmware\"\n      (firmware)=\"onFirmwareSelected($event)\"\n      class=\"d-contents\"\n    ></c8y-select-firmware-step\n  ></ng-container>\n  <ng-container\n    *customStep=\"\n      'Select version or patch' | translate;\n      completed: !!stepData?.versionOrPatch;\n      buttonsDisabled: !stepData?.versionOrPatch\n    \"\n  >\n    <div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n      <div class=\"row\">\n        <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n          <h4 class=\"text-center m-b-16 text-gray\" translate>\n            Select version or patch\n          </h4>\n          <p class=\"text-center p-b-8 text-truncate\">\n            <strong [title]=\"stepData?.firmware?.name\">{{ stepData?.firmware?.name }}</strong\n            ><br />\n            <small [title]=\"stepData?.firmware?.description\">{{\n              stepData?.firmware?.description\n            }}</small>\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xs-12 flex-grow no-gutter\">\n      <div class=\"card-inner-scroll fit-h\">\n        <div class=\"card-block p-t-0 p-b-0\">\n          <c8y-version-or-patch-step\n            [selected]=\"stepData?.versionOrPatch\"\n            (versionOrPatch)=\"onVersionOrPatchSelected($event)\">\n          </c8y-version-or-patch-step>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</c8y-bulk-operation-stepper>\n"
        })
    ], StepperBulkTypeFirmwareComponent);
    return StepperBulkTypeFirmwareComponent;
}(BaseStepperComponent));

var VersionOrPatchComponent = /** @class */ (function () {
    function VersionOrPatchComponent(repositoryService, inventoryService, bulkOpsService) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.inventoryService = inventoryService;
        this.bulkOpsService = bulkOpsService;
        this.versionOrPatch = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.firmware$ = this.bulkOpsService.firmwareId.pipe(distinctUntilChanged(), switchMap(function (id) { return _this.inventoryService.detail$(id).pipe(catchError(function (error) { return of(error); })); }), shareReplay(1));
        this.baseVersions$ = this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) { return _this.repositoryService.listBaseVersions(firmware); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy$ = this.firmware$.pipe(map(function (firmware) { return _this.repositoryService.isLegacyEntry(firmware); }), shareReplay(1));
        this.expanded = {};
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    }
    VersionOrPatchComponent.prototype.getBinaryName$ = function (binaryUrl) {
        return this.repositoryService.getBinaryName$(binaryUrl);
    };
    VersionOrPatchComponent.prototype.getBaseVersionAndPatches$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function (firmware) {
            return _this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion);
        }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.getPatchVersionsCount$ = function (baseVersion) {
        var _this = this;
        return this.firmware$.pipe(distinctUntilKeyChanged('id'), switchMap(function () { return _this.firmware$; }), switchMap(function (firmware) { return _this.repositoryService.getPatchVersionsCount$(firmware, baseVersion); }), shareReplay(1));
    };
    VersionOrPatchComponent.prototype.selectVersionOrPatch = function (selected, versionOrPatch) {
        if (selected) {
            this.versionOrPatch.emit(versionOrPatch);
        }
    };
    VersionOrPatchComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: InventoryService },
        { type: BulkOperationsService }
    ]; };
    __decorate([
        Input()
    ], VersionOrPatchComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], VersionOrPatchComponent.prototype, "versionOrPatch", void 0);
    __decorate([
        memoize()
    ], VersionOrPatchComponent.prototype, "getBinaryName$", null);
    __decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getBaseVersionAndPatches$", null);
    __decorate([
        memoize(property('id'))
    ], VersionOrPatchComponent.prototype, "getPatchVersionsCount$", null);
    VersionOrPatchComponent = __decorate([
        Component({
            selector: 'c8y-version-or-patch-step',
            template: "<c8y-list-group\n  class=\"m-b-16\"\n  [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\"\n  *ngIf=\"(baseVersions$ | async)?.data.length > 0\"\n>\n  <c8y-li *c8yFor=\"let baseVersion of baseVersions$ | async; let i = index; loadMore: 'auto'\">\n    <c8y-li-icon>\n      <i c8yIcon=\"c8y-firmware\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-10\">\n        <p>{{ baseVersion.c8y_Firmware.version }}</p>\n      </div>\n      <div class=\"col-2\">\n        <span *ngIf=\"isLegacy$ | async\" class=\"label label-warning\">\n          {{ 'Legacy' | translate }}\n        </span>\n\n        <span *ngIf=\"!(isLegacy$ | async)\">\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) === null\">\n            <span class=\"label label-info\">\n              <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n            </span>\n          </span>\n\n          <span *ngIf=\"(getPatchVersionsCount$(baseVersion) | async) !== null\">\n            <span [ngPlural]=\"getPatchVersionsCount$(baseVersion) | async\">\n              <ng-template ngPluralCase=\"=0\">\n                <span class=\"label label-default\"> <span translate>No patches</span></span>\n              </ng-template>\n              <ng-template ngPluralCase=\"=1\">\n                <span class=\"label label-info\">\n                  <span translate>1 patch</span>\n                </span>\n              </ng-template>\n              <ng-template ngPluralCase=\"other\">\n                <span class=\"label label-info\">\n                  <span\n                    ngNonBindable\n                    translate\n                    [translateParams]=\"{ count: getPatchVersionsCount$(baseVersion) | async }\"\n                    >{{ count }} patches</span\n                  ></span\n                >\n              </ng-template>\n            </span>\n          </span>\n        </span>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-collapse>\n      <c8y-list-group>\n        <c8y-li\n          *c8yFor=\"\n            let patchVersion of getBaseVersionAndPatches$(baseVersion) | async;\n            let i = index;\n            loadMore: 'auto'\n          \"\n        >\n          <c8y-li-radio\n            (onSelect)=\"selectVersionOrPatch($event, patchVersion)\"\n            [selected]=\"patchVersion === selected\"\n          ></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n          <c8y-li-body class=\"content-flex-50\">\n            <div class=\"col-3\">\n              {{ patchVersion.c8y_Firmware.version }}\n            </div>\n            <div class=\"col-3\">\n              <span *ngIf=\"patchVersion.c8y_Patch; else version\" translate class=\"label label-info\"\n                >patch</span\n              >\n              <ng-template #version\n                ><span translate class=\"label label-primary\">version</span></ng-template\n              >\n            </div>\n            <div class=\"col-6 text-truncate\">\n              <span class=\"text-label-small m-r-4\" translate>\n                File\n              </span>\n              <span title=\"{{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\">\n                {{ getBinaryName$(patchVersion.c8y_Firmware.url) | async }}\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
        })
    ], VersionOrPatchComponent);
    return VersionOrPatchComponent;
}());

var SelectFirmwareComponent = /** @class */ (function () {
    function SelectFirmwareComponent(repositoryService, bulkOpsService, translate) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.bulkOpsService = bulkOpsService;
        this.translate = translate;
        this.firmware = new EventEmitter();
        this.elementCount = 0;
        this.DD_LOW_COUNT = 10;
        this.textFilter$ = new BehaviorSubject('');
        this.firmwares$ = this.textFilter$
            .pipe(debounceTime(400), distinctUntilChanged())
            .pipe(switchMap(function (text) { return _this.getFirmwares(text); }), tap(function (resp) {
            _this.elementCount = resp.data ? resp.data.length : 0;
        }), shareReplay(1));
        this.isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);
        this.DEVICE_TYPE_NOT_AVAILABLE = gettext('No device type available');
        this.DESCRIPTION_NOT_AVAILABLE = gettext('No description available');
    }
    SelectFirmwareComponent.prototype.ngOnInit = function () {
        this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;
    };
    SelectFirmwareComponent.prototype.selectFirmware = function (selected, fw) {
        if (selected) {
            this.firmware.emit(fw);
        }
    };
    SelectFirmwareComponent.prototype.getBaseVersionsCount$ = function (firmware) {
        var _this = this;
        return this.firmwares$.pipe(switchMap(function () { return _this.repositoryService.getBaseVersionsCount$(firmware); }), shareReplay(1));
    };
    SelectFirmwareComponent.prototype.getDescriptionTitle = function (firmware) {
        return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getDeviceTypeTitle = function (firmware) {
        return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));
    };
    SelectFirmwareComponent.prototype.getFirmwares = function (partialName) {
        return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName: partialName });
    };
    SelectFirmwareComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: BulkOperationsService },
        { type: TranslateService }
    ]; };
    __decorate([
        Input()
    ], SelectFirmwareComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], SelectFirmwareComponent.prototype, "firmware", void 0);
    __decorate([
        memoize(property('id'))
    ], SelectFirmwareComponent.prototype, "getBaseVersionsCount$", null);
    SelectFirmwareComponent = __decorate([
        Component({
            selector: 'c8y-select-firmware-step',
            template: "<div class=\"card-block p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n  <div class=\"row p-b-16\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center m-b-16\">{{ 'Select firmware' | translate }}</h4>\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          title=\"{{ 'Filter firmware\u2026' | translate }}\"\n          placeholder=\"{{ 'Filter firmware\u2026' | translate }}\"\n          [ngModel]=\"textFilter$ | async\"\n          (ngModelChange)=\"textFilter$.next($event)\"\n        />\n        <span class=\"input-group-addon\">\n          <i c8yIcon=\"filter\" *ngIf=\"(textFilter$ | async).length === 0\"></i>\n          <i\n            c8yIcon=\"times\"\n            class=\"text-muted\"\n            *ngIf=\"(textFilter$ | async).length > 0\"\n            (click)=\"textFilter$.next('')\"\n          ></i>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<c8y-search-result-empty *ngIf=\"(textFilter$ | async).length > 0 && elementCount===0\">\n</c8y-search-result-empty>\n<div class=\"col-xs-12 flex-grow no-gutter\">\n  <div class=\"card-inner-scroll fit-h\">\n    <div class=\"card-block p-t-0 p-b-0\">\n      <c8y-list-group [ngClass]=\"{ 'dd-low': elementCount <= DD_LOW_COUNT }\">\n        <c8y-li *c8yFor=\"let firmware of firmwares$ | async; let i = index; loadMore: 'auto'\">\n          <c8y-li-radio (onSelect)=\"selectFirmware($event, firmware)\" [selected]=\"firmware === selected\"></c8y-li-radio>\n          <c8y-li-icon>\n            <i c8yIcon=\"c8y-firmware\"></i>\n          </c8y-li-icon>\n\n          <c8y-li-body class=\"content-flex-60\">\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ firmware.name }}\">\n                {{ firmware.name }}\n              </div>\n            </div>\n            <div class=\"col-4\">\n              <div class=\"text-truncate\" title=\"{{ getDescriptionTitle(firmware) }}\">\n                <small *ngIf=\"firmware.description; else noDesc\">\n                  {{ firmware.description }}\n                </small>\n                <ng-template #noDesc>\n                  <small>\n                    <em class=\"text-muted\" translate>No description available</em>\n                  </small>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-3\">\n              <div class=\"text-truncate\" title=\"{{ 'Device type' | translate }}: {{ getDeviceTypeTitle(firmware) }}\">\n                <span class=\"text-label-small m-r-8\" translate>\n                  Device type\n                </span>\n                <span *ngIf=\"firmware.c8y_Filter?.type; else noType\">\n                  {{ firmware.c8y_Filter?.type }}\n                </span>\n                <ng-template #noType>\n                  <em class=\"text-muted\" translate>Undefined`device type`</em>\n                </ng-template>\n              </div>\n            </div>\n            <div class=\"col-2\">\n              <span *ngIf=\"isLegacy(firmware)\" class=\"label label-warning\">\n                <span translate>Legacy</span>\n              </span>\n\n              <span *ngIf=\"!isLegacy(firmware)\">\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) === null\">\n                  <span class=\"label label-info\">\n                    <i c8yIcon=\"circle-o-notch\" class=\"icon-spin\"></i>\n                  </span>\n                </span>\n                <span *ngIf=\"(getBaseVersionsCount$(firmware) | async) !== null\">\n                  <span [ngPlural]=\"getBaseVersionsCount$(firmware) | async\">\n                    <ng-template ngPluralCase=\"=0\">\n                      <span class=\"label label-default\">\n                        <span translate>No versions</span>\n                      </span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"=1\">\n                      <span class=\"label label-info\"><span translate>1 version</span></span>\n                    </ng-template>\n                    <ng-template ngPluralCase=\"other\">\n                      <span class=\"label label-info\">\n                        <span\n                          ngNonBindable\n                          translate\n                          [translateParams]=\"{\n                            count: getBaseVersionsCount$(firmware) | async\n                          }\"\n                          >{{ count }} versions</span\n                        >\n                      </span>\n                    </ng-template>\n                  </span>\n                </span>\n              </span>\n            </div>\n          </c8y-li-body>\n        </c8y-li>\n      </c8y-list-group>\n    </div>\n  </div>\n</div>\n"
        })
    ], SelectFirmwareComponent);
    return SelectFirmwareComponent;
}());

var ɵ0 = {
    type: BulkOperationType.FIRMWARE,
    c8yIcon: 'c8y-firmware',
    name: gettext('Firmware update'),
    path: baseUrl + "firmware",
    component: StepperBulkTypeFirmwareComponent,
    fragments: ['c8y_Firmware'],
    selected: false
};
/** Module for the 'Firmware update' operation type stepper */
var StepperBulkTypeFirmwareModule = /** @class */ (function () {
    function StepperBulkTypeFirmwareModule() {
    }
    StepperBulkTypeFirmwareModule = __decorate([
        NgModule({
            declarations: [
                StepperBulkTypeFirmwareComponent,
                VersionOrPatchComponent,
                SelectFirmwareComponent
            ],
            imports: [
                CoreModule,
                FormsModule,
                ReactiveFormsModule,
                BulkOperationStepperModule,
                RepositoryModule
            ],
            providers: [
                {
                    provide: HOOK_LIST_BULK_TYPE,
                    useValue: ɵ0,
                    multi: true
                }
            ],
            entryComponents: [StepperBulkTypeFirmwareComponent],
            exports: [StepperBulkTypeFirmwareComponent]
        })
    ], StepperBulkTypeFirmwareModule);
    return StepperBulkTypeFirmwareModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { SelectFirmwareComponent, StepperBulkTypeFirmwareComponent, StepperBulkTypeFirmwareModule, VersionOrPatchComponent, ɵ0 };
//# sourceMappingURL=c8y-ngx-components-operations-stepper-bulk-type-firmware.js.map
