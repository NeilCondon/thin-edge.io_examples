{"version":3,"file":"c8y-ngx-components-operations-stepper-bulk-type-firmware.js","sources":["ng://@c8y/ngx-components/operations/stepper-bulk-type-firmware/stepper-bulk-type-firmware.component.ts","ng://@c8y/ngx-components/operations/stepper-bulk-type-firmware/version-or-patch.component.ts","ng://@c8y/ngx-components/operations/stepper-bulk-type-firmware/select-firmware.component.ts","ng://@c8y/ngx-components/operations/stepper-bulk-type-firmware/stepper-bulk-type-firmware.module.ts","ng://@c8y/ngx-components/operations/stepper-bulk-type-firmware/c8y-ngx-components-operations-stepper-bulk-type-firmware.ts"],"sourcesContent":["import { StepperSelectionEvent } from '@angular/cdk/stepper';\nimport { Component, OnDestroy } from '@angular/core';\nimport { IManagedObject, IOperation } from '@c8y/client';\nimport { gettext } from '@c8y/ngx-components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash-es';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { BaseStepperComponent } from '@c8y/ngx-components/operations/bulk-operation-stepper';\nimport {\n  BulkOperationsService,\n  OperationDetails\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-stepper-firmware',\n  templateUrl: 'stepper-bulk-type-firmware.component.html'\n})\nexport class StepperBulkTypeFirmwareComponent extends BaseStepperComponent implements OnDestroy {\n  readonly descriptionTemplate: string = gettext('{{ name }} (version {{ version }})');\n\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  stepData: { firmware: IManagedObject; versionOrPatch: IManagedObject } = {\n    firmware: undefined,\n    versionOrPatch: undefined\n  };\n\n  selectedFirmware: IManagedObject;\n  selectedVersionOrPatch: IManagedObject;\n\n  private subscription: Subscription;\n\n  constructor(\n    private bulkOperationService: BulkOperationsService,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  goToVersionOrPatchStep({ stepper }) {\n    const selectedFirmware = this.stepData.firmware;\n    this.bulkOperationService.setFirmwareId(selectedFirmware.id);\n    this.deviceTypes = (selectedFirmware.c8y_Filter || {}).type;\n    stepper.next();\n  }\n\n  onVersionOrPatchSelected(versionOrPatch: IManagedObject) {\n    this.stepData.versionOrPatch = versionOrPatch;\n  }\n\n  onFirmwareSelected(fw: IManagedObject) {\n    this.stepData.firmware = fw;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  protected retrieveOperationPrototype(): OperationDetails {\n    const selectedFirmware = this.stepData.firmware;\n    const selectedVersionOrPatch = this.stepData.versionOrPatch;\n\n    if (!selectedFirmware || !selectedVersionOrPatch) {\n      return;\n    }\n\n    const firmware: IManagedObject = ({\n      name: selectedFirmware.name,\n      version: selectedVersionOrPatch.c8y_Firmware.version,\n      url: selectedVersionOrPatch.c8y_Firmware.url\n    } as unknown) as IManagedObject;\n\n    if (selectedVersionOrPatch.c8y_Patch) {\n      firmware.isPatch = true;\n      firmware.dependency = selectedVersionOrPatch.c8y_Patch.dependency;\n    }\n\n    const name = selectedFirmware.name;\n    const version = selectedVersionOrPatch.c8y_Firmware.version;\n    const description: string = `Update firmware to: ${name} (version: ${version}).`;\n\n    return {\n      name: gettext('Firmware update'),\n      description: this.translate.instant(this.descriptionTemplate, {\n        name: get(this.stepData, 'firmware.name'),\n        version: get(this.stepData, 'versionOrPatch.c8y_Firmware.version')\n      }),\n      prototype: ({\n        description,\n        c8y_Firmware: firmware\n      } as unknown) as IOperation\n    };\n  }\n\n  protected onSelectionChange(event: StepperSelectionEvent) {\n    this.textFilter$.next('');\n    super.onSelectionChange(event);\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  shareReplay,\n  map,\n  switchMap,\n  distinctUntilKeyChanged,\n  distinctUntilChanged,\n  catchError,\n  tap\n} from 'rxjs/operators';\nimport { IManagedObject, IResultList, InventoryService } from '@c8y/client';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, FirmwareBinary } from '@c8y/ngx-components/repository';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\nimport { property } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-version-or-patch-step',\n  templateUrl: 'version-or-patch.component.html'\n})\nexport class VersionOrPatchComponent {\n  @Input() selected: IManagedObject;\n  @Output() versionOrPatch: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n\n  firmware$: Observable<IManagedObject> = this.bulkOpsService.firmwareId.pipe(\n    distinctUntilChanged(),\n    switchMap(id => this.inventoryService.detail$(id).pipe(catchError(error => of(error)))),\n    shareReplay(1)\n  );\n\n  baseVersions$: Observable<IResultList<IManagedObject>> = this.firmware$.pipe(\n    distinctUntilKeyChanged('id'),\n    switchMap(firmware => this.repositoryService.listBaseVersions(firmware)),\n    tap(resp => {\n      this.elementCount = resp.data ? resp.data.length : 0;\n    }),\n    shareReplay(1)\n  );\n\n  isLegacy$: Observable<boolean> = this.firmware$.pipe(\n    map(firmware => this.repositoryService.isLegacyEntry(firmware)),\n    shareReplay(1)\n  );\n\n  expanded: { [id: string]: boolean } = {};\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private inventoryService: InventoryService,\n    private bulkOpsService: BulkOperationsService\n  ) {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  @memoize()\n  getBinaryName$(binaryUrl) {\n    return this.repositoryService.getBinaryName$(binaryUrl);\n  }\n\n  @memoize(property('id'))\n  getBaseVersionAndPatches$(baseVersion) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(firmware =>\n        this.repositoryService.listBaseVersionAndPatches(firmware, baseVersion)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  @memoize(property('id'))\n  getPatchVersionsCount$(baseVersion: FirmwareBinary) {\n    return this.firmware$.pipe(\n      distinctUntilKeyChanged('id'),\n      switchMap(() => this.firmware$),\n      switchMap(firmware => this.repositoryService.getPatchVersionsCount$(firmware, baseVersion)),\n      shareReplay(1)\n    );\n  }\n\n  selectVersionOrPatch(selected: boolean, versionOrPatch: IManagedObject) {\n    if (selected) {\n      this.versionOrPatch.emit(versionOrPatch);\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, shareReplay } from 'rxjs/operators';\nimport { memoize } from '@c8y/ngx-components';\nimport { RepositoryService, RepositoryType } from '@c8y/ngx-components/repository';\nimport { gettext } from '@c8y/ngx-components';\nimport { IResultList, IManagedObject } from '@c8y/client';\nimport { TranslateService } from '@ngx-translate/core';\nimport { property, get } from 'lodash-es';\nimport { BulkOperationsService } from '@c8y/ngx-components/operations/bulk-operations-service';\n\n@Component({\n  selector: 'c8y-select-firmware-step',\n  templateUrl: 'select-firmware.component.html'\n})\nexport class SelectFirmwareComponent {\n  @Input() selected: IManagedObject;\n  @Output() firmware: EventEmitter<IManagedObject> = new EventEmitter<IManagedObject>();\n  elementCount: number = 0;\n  DD_LOW_COUNT: number = 10;\n  textFilter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  firmwares$: Observable<IResultList<IManagedObject>> = this.textFilter$\n    .pipe(\n      debounceTime(400),\n      distinctUntilChanged()\n    )\n    .pipe(\n      switchMap(text => this.getFirmwares(text)),\n      tap(resp => {\n        this.elementCount = resp.data ? resp.data.length : 0;\n      }),\n      shareReplay(1)\n    );\n  isLegacy = this.repositoryService.isLegacyEntry.bind(this.repositoryService);\n  readonly DEVICE_TYPE_NOT_AVAILABLE: string = gettext('No device type available');\n  readonly DESCRIPTION_NOT_AVAILABLE: string = gettext('No description available');\n\n  constructor(\n    private repositoryService: RepositoryService,\n    private bulkOpsService: BulkOperationsService,\n    private translate: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.DD_LOW_COUNT = this.bulkOpsService.DD_LOW_COUNT;\n  }\n\n  selectFirmware(selected: boolean, fw: IManagedObject) {\n    if (selected) {\n      this.firmware.emit(fw);\n    }\n  }\n\n  @memoize(property('id'))\n  getBaseVersionsCount$(firmware: IManagedObject): Observable<number | string> {\n    return this.firmwares$.pipe(\n      switchMap(() => this.repositoryService.getBaseVersionsCount$(firmware)),\n      shareReplay(1)\n    );\n  }\n\n  getDescriptionTitle(firmware: IManagedObject): string {\n    return get(firmware, 'description', this.translate.instant(this.DESCRIPTION_NOT_AVAILABLE));\n  }\n\n  getDeviceTypeTitle(firmware: IManagedObject): string {\n    return get(firmware, 'c8y_Filter.type', this.translate.instant(this.DEVICE_TYPE_NOT_AVAILABLE));\n  }\n\n  private getFirmwares(partialName?: string) {\n    return this.repositoryService.listRepositoryEntries(RepositoryType.FIRMWARE, { partialName });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { CoreModule, FormsModule, gettext } from '@c8y/ngx-components';\nimport { RepositoryModule } from '@c8y/ngx-components/repository';\nimport { BulkOperationStepperModule } from '@c8y/ngx-components/operations/bulk-operation-stepper';\nimport {\n  HOOK_LIST_BULK_TYPE,\n  baseUrl,\n  BulkOperationType\n} from '@c8y/ngx-components/operations/bulk-operations-service';\n\nimport { SelectFirmwareComponent } from './select-firmware.component';\nimport { VersionOrPatchComponent } from './version-or-patch.component';\nimport { StepperBulkTypeFirmwareComponent } from './stepper-bulk-type-firmware.component';\n\n/** Module for the 'Firmware update' operation type stepper */\n@NgModule({\n  declarations: [\n    StepperBulkTypeFirmwareComponent,\n    VersionOrPatchComponent,\n    SelectFirmwareComponent\n  ],\n  imports: [\n    CoreModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BulkOperationStepperModule,\n    RepositoryModule\n  ],\n  providers: [\n    {\n      provide: HOOK_LIST_BULK_TYPE,\n      useValue: {\n        type: BulkOperationType.FIRMWARE,\n        c8yIcon: 'c8y-firmware',\n        name: gettext('Firmware update'),\n        path: `${baseUrl}firmware`,\n        component: StepperBulkTypeFirmwareComponent,\n        fragments: ['c8y_Firmware'],\n        selected: false\n      },\n      multi: true\n    }\n  ],\n  entryComponents: [StepperBulkTypeFirmwareComponent],\n  exports: [StepperBulkTypeFirmwareComponent]\n})\nexport class StepperBulkTypeFirmwareModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__extends","tslib_1.__decorate"],"mappings":"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"}