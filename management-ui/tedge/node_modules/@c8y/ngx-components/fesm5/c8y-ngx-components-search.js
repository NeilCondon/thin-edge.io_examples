import { __extends, __decorate, __awaiter, __generator, __assign } from 'tslib';
import { Injectable, ViewChild, Component, EventEmitter, Input, Output, NgModule } from '@angular/core';
import { SubAssetsService, AssetTypeGridColumn, DeleteAssetsModalComponent } from '@c8y/ngx-components/sub-assets';
import { get, some, find, isUndefined } from 'lodash-es';
import { Router, ActivatedRoute } from '@angular/router';
import { InventoryService, SmartGroupsService } from '@c8y/client';
import { TypeaheadComponent, gettext, FilteringActionType, DataGridComponent, Status, AlertService, CoreModule, HOOK_ONCE_ROUTE, HOOK_SEARCH } from '@c8y/ngx-components';
import { DeviceGridService, NameDeviceGridColumn, ModelDeviceGridColumn, SerialNumberDeviceGridColumn, RegistrationDateDeviceGridColumn, SystemIdDeviceGridColumn, ImeiDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { pipe, defer, merge, of, empty, Subject } from 'rxjs';
import { map, tap, switchMap, takeUntil } from 'rxjs/operators';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { BsModalService } from 'ngx-bootstrap/modal';

var SearchService = /** @class */ (function (_super) {
    __extends(SearchService, _super);
    function SearchService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        _this.DEFAULT_PAGE_SIZE = 50;
        _this.FRAGMENTS_FOR_NO_DEVICE = [
            'c8y_Dashboard',
            'c8y_Report',
            'c8y_Kpi',
            'c8y_ExportConfiguration',
            'c8y_IsBinary',
            'c8y_NoDevice',
            'c8y_IsDeviceGroup',
            'c8y_Group',
            'com_cumulocity_model_smartrest_SmartRestTemplate',
            'com_cumulocity_model_devicesimulator_SensorTemplate',
            '_attachments',
            'c8y_IsDeviceType',
            'c8y_objectmapping_ObjectMapping'
        ];
        _this.TYPES_FOR_NO_DEVICE = [
            'c8y_ConfigurationDump',
            'c8y_Firmware',
            'c8y_SmartRule',
            'c8y_Software',
            'impact_object_mapping',
            'c8y_UserPreference',
            'c8y_TenantPolicy',
            'c8y_PrivateSmartRule',
            'c8y_SmartRest2Template',
            'c8y_JsonSchema',
            'c8y_DeviceShellTemplate',
            'c8y_DemoStatus',
            'c8y_DataBroker',
            'c8y_Application_',
            'brandingVariables',
            'c8y_DeviceSimulator',
            'c8y_CertificateMetadata',
            'lwm2m_post_registration',
            'c8y_microservice_manifest_',
            'c8y_CepAgent'
        ];
        _this.DEVICE_FRAGMENT_TYPE = 'c8y_IsDevice';
        return _this;
    }
    /**
     * Will return only valid assets (groups and devices) and filter out
     * none useful inventories (e.g. c8y_JsonSchema).
     * @param data All managed objects that should be filtered.
     */
    SearchService.prototype.filterOnlyAssets = function (data) {
        var _this = this;
        return data.filter(function (mo) { return mo.c8y_IsDeviceGroup || _this.isAnyDevice(mo); });
    };
    SearchService.prototype.buildCombinedRootQueryFilter = function (columns, pagination) {
        var rootQuery = {
            __filter: {
                __and: { __not: { __has: "c8y_IsBinary" } }
            }
        };
        var userQuery = this.getQueryObj(columns, pagination);
        var queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        var fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    };
    /**
     * Returns the full-text search results.
     *
     * @param term The search term.
     */
    SearchService.prototype.search = function (term) {
        return this.inventoryService.list({
            text: term,
            withTotalPages: true,
            pageSize: this.DEFAULT_PAGE_SIZE,
            withChildren: false
        });
    };
    SearchService.prototype.isRootDevice = function (mo) {
        return !!mo[this.DEVICE_FRAGMENT_TYPE];
    };
    SearchService.prototype.isAnyDevice = function (mo) {
        var isDevice = this.isRootDevice(mo) || !this.hasFragmentOrTypeFromBlacklist(mo);
        return isDevice;
    };
    SearchService.prototype.hasFragmentOrTypeFromBlacklist = function (mo) {
        return this.hasTypeFromBlacklist(mo) || this.hasFragmentFromBlacklist(mo);
    };
    SearchService.prototype.hasTypeFromBlacklist = function (mo) {
        var moType = get(mo, 'type', '');
        return some(this.TYPES_FOR_NO_DEVICE, function (type) { return moType.includes(type); });
    };
    SearchService.prototype.hasFragmentFromBlacklist = function (mo) {
        return find(this.FRAGMENTS_FOR_NO_DEVICE, function (f) { return !isUndefined(mo[f]); });
    };
    SearchService = __decorate([
        Injectable()
    ], SearchService);
    return SearchService;
}(SubAssetsService));

var SearchBoxComponent = /** @class */ (function () {
    function SearchBoxComponent(router, inventory, deviceGridService, searchService) {
        var _this = this;
        this.router = router;
        this.inventory = inventory;
        this.deviceGridService = deviceGridService;
        this.searchService = searchService;
        this.term = '';
        this.filterPipe = pipe(map(function (data) {
            return _this.searchService.filterOnlyAssets(data);
        }));
        this.recentSearchResults = [];
        this.isLoading = false;
        this.noMatch = false;
        this.RECENT_SEARCH_STORAGE_KEY = 'recent_search_view';
        this.MAX_RECENT_SEARCH_RESULTS = 5;
        this.DEFAULT_FILTER = {
            withTotalPages: true,
            pageSize: 5,
            withChildren: false
        };
        this.KEYCODE_ENTER = 13;
        this.KEYCODE_ESC = 27;
    }
    SearchBoxComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var recentSearchIds, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recentSearchIds = JSON.parse(localStorage.getItem(this.RECENT_SEARCH_STORAGE_KEY));
                        if (!(recentSearchIds && recentSearchIds.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.inventory.list({ ids: recentSearchIds.join(',') })];
                    case 1:
                        data = (_a.sent()).data;
                        this.recentSearchResults = data;
                        this.recentlyRegisteredResults$ = defer(function () {
                            return _this.inventory.list(__assign({ q: '$orderby=creationTime desc' }, _this.DEFAULT_FILTER));
                        });
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    SearchBoxComponent.prototype.onOpenChange = function (isOpen) {
        var _this = this;
        if (isOpen) {
            // needs to request an animation frame as
            // otherwise the typeahead is undefined
            requestAnimationFrame(function () {
                _this.subscribeOnSearch();
                _this.typeahead.dropdown.show();
                _this.typeahead.searchControl.nativeElement.focus();
            });
        }
    };
    SearchBoxComponent.prototype.open = function (event, mo) {
        event.stopPropagation();
        var isAlreadyRecent = this.recentSearchResults.find(function (_a) {
            var id = _a.id;
            return id === mo.id;
        });
        if (!isAlreadyRecent) {
            this.recentSearchResults.unshift(mo);
            this.recentSearchResults = this.recentSearchResults.slice(0, this.MAX_RECENT_SEARCH_RESULTS);
        }
        var recentSearchIds = this.recentSearchResults.map(function (_a) {
            var id = _a.id;
            return id;
        });
        localStorage.setItem(this.RECENT_SEARCH_STORAGE_KEY, JSON.stringify(recentSearchIds));
        this.router.navigateByUrl(this.deviceGridService.getHref(mo, '/'));
        this.dropdown.hide();
    };
    SearchBoxComponent.prototype.reset = function () {
        this.typeahead.onSearch.emit('');
        this.selected = undefined;
        this.typeahead.searchControl.nativeElement.focus();
    };
    SearchBoxComponent.prototype.keyDown = function (event) {
        var keyCode = event.keyCode;
        if (keyCode === this.KEYCODE_ENTER) {
            // enter hit can be faster then typeahead debounce,
            // therefore we take the term from the DOM element
            // itself:
            var searchTerm = event.target.value;
            this.navigate(['/assetsearch'], { queryParams: { search: searchTerm } });
            this.dropdown.hide();
        }
        else if (keyCode === this.KEYCODE_ESC) {
            if (this.term === '') {
                this.dropdown.hide();
            }
            this.reset();
        }
    };
    SearchBoxComponent.prototype.filter = function (on) {
        this.navigate(['/assetsearch'], { queryParams: { filter: on } });
        this.dropdown.hide();
    };
    SearchBoxComponent.prototype.openSearch = function () {
        this.router.navigateByUrl('/assetsearch');
        this.dropdown.hide();
    };
    SearchBoxComponent.prototype.subscribeOnSearch = function () {
        var _this = this;
        if (!this.results$) {
            this.results$ = this.typeahead.onSearch.pipe(tap(function (term) { return _this.onTypingStarted(term); }), switchMap(function (term) { return _this.mergeRequest(term); }));
        }
    };
    SearchBoxComponent.prototype.navigate = function (commands, extras) {
        var _this = this;
        this.router
            .navigateByUrl('/', { skipLocationChange: true })
            .then(function () { return _this.router.navigate(commands, extras); });
    };
    SearchBoxComponent.prototype.mergeRequest = function (term) {
        var _this = this;
        return merge(of({ data: [] }), this.queryInventoryService(term).pipe(tap(function (_a) {
            var data = _a.data, paging = _a.paging;
            return _this.onLoadingDone(data, paging);
        })));
    };
    SearchBoxComponent.prototype.queryInventoryService = function (term) {
        var _this = this;
        if (term) {
            return defer(function () { return _this.searchService.search(term); });
        }
        return empty();
    };
    SearchBoxComponent.prototype.onLoadingDone = function (data, paging) {
        this.isLoading = false;
        this.noMatch =
            paging && paging.nextPage === null && this.searchService.filterOnlyAssets(data).length === 0;
    };
    SearchBoxComponent.prototype.onTypingStarted = function (term) {
        this.noMatch = false;
        this.term = term;
        this.isLoading = term.length > 0;
    };
    SearchBoxComponent.ctorParameters = function () { return [
        { type: Router },
        { type: InventoryService },
        { type: DeviceGridService },
        { type: SearchService }
    ]; };
    __decorate([
        ViewChild(TypeaheadComponent, { static: false })
    ], SearchBoxComponent.prototype, "typeahead", void 0);
    __decorate([
        ViewChild('dropdown', { static: false })
    ], SearchBoxComponent.prototype, "dropdown", void 0);
    SearchBoxComponent = __decorate([
        Component({
            selector: 'c8y-search-box',
            template: "<div\n  class=\"dropdown\"\n  dropdown\n  #dropdown=\"bs-dropdown\"\n  [insideClick]=\"true\"\n  (isOpenChange)=\"onOpenChange($event)\"\n>\n  <button\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    type=\"button\"\n    title=\"Search\"\n    aria-controls=\"searchDropdown\"\n  >\n    <i c8yIcon=\"search\" class=\"icon-2x\"></i>\n  </button>\n\n  <div\n    id=\"searchDropdown\"\n    *dropdownMenu\n    class=\"search-header-menu dropdown-menu dropdown-menu-center\"\n  >\n    <form novalidate #searchForm=\"ngForm\" class=\"c8y-search-form\">\n      <c8y-typeahead\n        [(ngModel)]=\"selected\"\n        placeholder=\"{{ 'Search for groups or assets\u2026' | translate }}\"\n        (keydown)=\"keyDown($event)\"\n        (onIconClick)=\"reset()\"\n        [icon]=\"term ? 'times' : 'search'\"\n        [allowFreeEntries]=\"false\"\n        name=\"selected\"\n      >\n        <!-- filter buttons -->\n        <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-16 p-r-16\">\n          <div class=\"flex-row\">\n            <p class=\"m-r-4 text-muted\">\n              <em translate>Searching by exact match. Click for other search options:</em>\n            </p>\n            <div class=\"btn-group btn-group-sm\">\n              <button\n                class=\"btn btn-default\"\n                title=\"{{ 'Starts with' | translate }}\"\n                (click)=\"filter(term + '*')\"\n              >\n                {{ 'Starts with' | translate }}\n              </button>\n              <button\n                class=\"btn btn-default\"\n                title=\"{{ 'Contains' | translate }}\"\n                (click)=\"filter('*' + term + '*')\"\n              >\n                {{ 'Contains' | translate }}\n              </button>\n              <button\n                class=\"btn btn-default\"\n                title=\"{{ 'Ends with' | translate }}\"\n                (click)=\"filter('*' + term)\"\n              >\n                {{ 'Ends with' | translate }}\n              </button>\n            </div>\n          </div>\n        </c8y-li>\n\n        <!-- Recent search -->\n        <c8y-li\n          *ngIf=\"term.length === 0 && recentSearchResults.length > 0\"\n          [selectable]=\"false\"\n          class=\"p-l-24 p-r-24\"\n        >\n          <div class=\"legend form-block\">\n            <span translate>Recent search results</span>\n          </div>\n        </c8y-li>\n        <c8y-li\n          *ngFor=\"let result of term.length === 0 ? recentSearchResults : []\"\n          class=\"c8y-list__item--link m-l-16 m-r-16\"\n          (click)=\"open($event, result)\"\n        >\n          <c8y-li-icon>\n            <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n            <i\n              [c8yIcon]=\"'c8y-group-open'\"\n              class=\"c8y-icon-duocolor\"\n              *ngIf=\"result.c8y_IsDeviceGroup\"\n            ></i>\n          </c8y-li-icon>\n          {{ result.name || '--' }}\n        </c8y-li>\n\n        <!-- Recently registered devices -->\n        <c8y-li\n          *ngIf=\"term.length === 0 && (recentlyRegisteredResults$ | async)?.data?.length > 0\"\n          class=\"p-l-24 p-r-24\"\n          [selectable]=\"false\"\n        >\n          <div class=\"legend form-block\">\n            <span translate>Recently registered devices</span>\n          </div>\n        </c8y-li>\n        <c8y-li\n          *c8yFor=\"\n            let result of term.length === 0 ? recentlyRegisteredResults$ : { data: [] };\n            loadMore: 'none';\n            pipe: filterPipe\n          \"\n          class=\"c8y-list__item--link m-l-16 m-r-16\"\n          (click)=\"open($event, result)\"\n        >\n          <c8y-li-icon>\n            <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n            <i\n              [c8yIcon]=\"'c8y-group-open'\"\n              class=\"c8y-icon-duocolor\"\n              *ngIf=\"result.c8y_IsDeviceGroup\"\n            ></i>\n          </c8y-li-icon>\n          {{ result.name || '--' }}\n        </c8y-li>\n\n        <!-- Search results -->\n        <c8y-li *ngIf=\"term.length !== 0\" class=\"p-l-24 p-r-24\" [selectable]=\"false\">\n          <div class=\"legend form-block\">\n            <span translate>Search results</span>\n          </div>\n        </c8y-li>\n        <c8y-li\n          *c8yFor=\"\n            let result of results$;\n            loadMore: 'auto';\n            pipe: filterPipe;\n            notFound: notFoundTemplate;\n            loadingTemplate: loading;\n            loadNextLabel: 'Find more\u2026'\n          \"\n          class=\"c8y-list__item--link  m-l-16 m-r-16\"\n          (click)=\"open($event, result)\"\n        >\n          <c8y-li-icon>\n            <device-status [mo]=\"result\" *ngIf=\"!result.c8y_IsDeviceGroup\"></device-status>\n            <i\n              [c8yIcon]=\"'c8y-group-open'\"\n              class=\"c8y-icon-duocolor\"\n              *ngIf=\"result.c8y_IsDeviceGroup\"\n            ></i>\n          </c8y-li-icon>\n          {{ result.name || '--' }}\n        </c8y-li>\n\n        <!-- No search results found entry -->\n        <ng-template #notFoundTemplate>\n          <c8y-li *ngIf=\"noMatch\" class=\"p-16 c8y-empty-state\" [selectable]=\"false\">\n            <c8y-li-icon [icon]=\"'search'\"></c8y-li-icon>\n            <p><strong translate>No match found.</strong></p>\n            <small translate>\n              Use a filter or go to the asset data table to show all devices and groups.\n            </small>\n          </c8y-li>\n        </ng-template>\n\n        <!-- loading bar first entries -->\n        <c8y-li *ngIf=\"isLoading\" class=\"p-t-32 p-b-0 p-relative\">\n          <div class=\"spinner\" style=\"right:0;\">\n            <div class=\"rect1\"></div>\n            <div class=\"rect2\"></div>\n            <div class=\"rect3\"></div>\n            <div class=\"rect4\"></div>\n            <div class=\"rect5\"></div>\n          </div>\n        </c8y-li>\n\n        <!-- loading bar for loading more entries (inventory roles) -->\n        <ng-template #loading>\n          <c8y-li class=\"text-center p-t-32 p-b-0 p-relative\">\n            <div class=\"spinner\" style=\"right:0;\">\n              <div class=\"rect1\"></div>\n              <div class=\"rect2\"></div>\n              <div class=\"rect3\"></div>\n              <div class=\"rect4\"></div>\n              <div class=\"rect5\"></div>\n            </div>\n          </c8y-li>\n        </ng-template>\n\n        <!-- more filter possibilities -->\n        <c8y-li class=\"m-t-24 bg-gray-lighter p-t-16 p-b-16 p-l-24 p-r-24\" [selectable]=\"false\">\n          <div class=\"flex-row\">\n            <i c8yIcon=\"info-circle\" class=\"text-info m-r-4\"></i>\n            <p translate class=\"m-r-8\">Need more filter possibilities?</p>\n            <button\n              type=\"button\"\n              class=\"m-l-auto btn btn-default btn-sm\"\n              translate\n              (mousedown)=\"openSearch()\"\n            >\n              Go to the asset data table\n            </button>\n          </div>\n        </c8y-li>\n      </c8y-typeahead>\n    </form>\n  </div>\n</div>\n"
        })
    ], SearchBoxComponent);
    return SearchBoxComponent;
}());

var SearchGridComponent = /** @class */ (function () {
    function SearchGridComponent(searchService, bsModalService, smartGroupsService, subAssetsGridService) {
        this.searchService = searchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading results…');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.searchService.getDefaultPagination();
        this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
    }
    Object.defineProperty(SearchGridComponent.prototype, "_columns", {
        set: function (value) {
            if (value) {
                this.columns = value;
            }
            else {
                this.columns = this.searchService.getDefaultColumns();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchGridComponent.prototype, "_pagination", {
        set: function (value) {
            if (value) {
                this.pagination = value;
            }
            else {
                this.pagination = this.searchService.getDefaultPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchGridComponent.prototype, "_actionControls", {
        set: function (value) {
            if (value) {
                this.actionControls = value;
            }
            else {
                this.actionControls = this.searchService.getDefaultActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchGridComponent.prototype, "_bulkActionControls", {
        set: function (value) {
            if (value) {
                this.bulkActionControls = value;
            }
            else {
                this.bulkActionControls = this.searchService.getDefaultBulkActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    SearchGridComponent.prototype.ngOnInit = function () {
        if (!this.filteringName) {
            this.columns = this.searchService.getDefaultColumns();
        }
        else {
            this.columns = [
                new AssetTypeGridColumn({ sortOrder: 'desc' }),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    };
    SearchGridComponent.prototype.trackByName = function (_index, column) {
        return column.name;
    };
    SearchGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function () {
            var response, res, data, paging, filteredData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!dataSourceModifier.searchText) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.searchService.search(dataSourceModifier.searchText)];
                    case 1:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.searchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, undefined)];
                    case 3:
                        response = _a.sent();
                        _a.label = 4;
                    case 4:
                        res = response.res, data = response.data, paging = response.paging;
                        filteredData = this.searchService.filterOnlyAssets(data);
                        if (paging.currentPage === 1) {
                            this.sizeCount = 0;
                        }
                        this.sizeCount += filteredData.length;
                        this.onColumnsChange.emit(dataSourceModifier.columns);
                        return [2 /*return*/, {
                                res: res,
                                data: filteredData,
                                paging: paging,
                                filteredSize: this.sizeCount,
                                size: undefined
                            }];
                }
            });
        });
    };
    SearchGridComponent.prototype.setActionControls = function () {
        var _this = this;
        var actionControls = [];
        var deleteAction = {
            type: "DELETE" /* Delete */,
            callback: function (asset) { return _this.onDeleteAsset(asset, _this.parentGroup); }
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    };
    SearchGridComponent.prototype.updateFiltering = function (columnNames, action) {
        var type = action.type;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            this.dataGrid.updateFiltering(columnNames, action);
        }
    };
    SearchGridComponent.prototype.configChange = function (config) {
        this.searchService.saveConfig(config);
    };
    SearchGridComponent.prototype.onDeleteAsset = function (asset, parentRef) {
        var _this = this;
        var initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset: asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        var modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState: initialState });
        modalRef.content.closeSubject.subscribe(function (result) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!result) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.subAssetsGridService.deleteAsset(asset, parentRef, result)];
                    case 1:
                        _a.sent();
                        this.refresh.emit();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
    };
    SearchGridComponent.ctorParameters = function () { return [
        { type: SearchService },
        { type: BsModalService },
        { type: SmartGroupsService },
        { type: SubAssetsService }
    ]; };
    __decorate([
        Input('parent-group')
    ], SearchGridComponent.prototype, "parentGroup", void 0);
    __decorate([
        Input()
    ], SearchGridComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], SearchGridComponent.prototype, "loadingItemsLabel", void 0);
    __decorate([
        Input('columns')
    ], SearchGridComponent.prototype, "_columns", null);
    __decorate([
        Input('pagination')
    ], SearchGridComponent.prototype, "_pagination", null);
    __decorate([
        Input('actionControls')
    ], SearchGridComponent.prototype, "_actionControls", null);
    __decorate([
        Input()
    ], SearchGridComponent.prototype, "selectable", void 0);
    __decorate([
        Input('bulkActionControls')
    ], SearchGridComponent.prototype, "_bulkActionControls", null);
    __decorate([
        Output()
    ], SearchGridComponent.prototype, "onColumnsChange", void 0);
    __decorate([
        Input()
    ], SearchGridComponent.prototype, "searchText", void 0);
    __decorate([
        Input()
    ], SearchGridComponent.prototype, "filteringName", void 0);
    __decorate([
        ViewChild(DataGridComponent, { static: true })
    ], SearchGridComponent.prototype, "dataGrid", void 0);
    SearchGridComponent = __decorate([
        Component({
            selector: 'c8y-search-grid',
            template: "<div class=\"card--grid--fullpage\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onConfigChange)=\"configChange($event)\"\n    class=\"d-contents\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n    <div class=\"c8y-empty-state\">\n      <h1 c8yIcon=\"search\"></h1>\n      <div>\n        <p>\n          <strong>{{ 'No items found.' | translate }}</strong>\n        </p>\n        <small>{{ 'Change your search or filter criteria.' | translate }}</small>\n      </div>\n    </div>\n  </c8y-data-grid>\n</div>\n"
        })
    ], SearchGridComponent);
    return SearchGridComponent;
}());

var SearchResultsComponent = /** @class */ (function () {
    function SearchResultsComponent(route, alert) {
        this.route = route;
        this.alert = alert;
        this.filter = '';
        this.searchTerm = '';
        this.unsubscribe$ = new Subject();
    }
    SearchResultsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.queryParams.subscribe(function (params) {
            if (params.filter) {
                _this.filteringName = params.filter;
            }
        });
    };
    SearchResultsComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.route.queryParams
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function (_a) {
            var filter = _a.filter, search = _a.search;
            return _this.onQueryParamsChange(filter, search);
        });
        this.searchGrid.dataGrid.searchText$.pipe(takeUntil(this.unsubscribe$)).subscribe(function (text) {
            if (text) {
                _this.resetFilter();
            }
            _this.searchTerm = text;
        });
        this.searchGrid.dataGrid.onFilter
            .pipe(takeUntil(this.unsubscribe$))
            .subscribe(function () { return _this.resetSearch(); });
        // to prevent race condition (search empty):
        this.searchTerm = this.route.snapshot.queryParams.search || '';
    };
    SearchResultsComponent.prototype.resetSearch = function () {
        this.searchTerm = '';
        if (this.searchTerm) {
            this.alert.add({
                text: gettext('Search reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
        }
    };
    SearchResultsComponent.prototype.resetFilter = function () {
        this.filter = '';
        if (this.searchGrid.dataGrid.filteringApplied) {
            this.alert.add({
                text: gettext('Filter reset. Full text search does not support filtering.'),
                type: Status.WARNING,
                timeout: 5000
            });
            this.searchGrid.dataGrid.clearFilters();
        }
    };
    SearchResultsComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    };
    SearchResultsComponent.prototype.onQueryParamsChange = function (filter, searchTerm) {
        if (!this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
        else if (this.shouldFilter(filter) && searchTerm) {
            this.search(searchTerm);
        }
    };
    SearchResultsComponent.prototype.shouldFilter = function (filter) {
        if (!filter) {
            return false;
        }
        this.resetSearch();
        this.filter = filter || '';
        this.searchGrid.updateFiltering(['name'], {
            type: FilteringActionType.ApplyFilter,
            payload: {
                filteringModifier: {
                    externalFilterQuery: {
                        names: [this.filter]
                    }
                }
            }
        });
        return true;
    };
    SearchResultsComponent.prototype.search = function (searchTerm) {
        this.searchTerm = searchTerm || '';
        this.searchGrid.dataGrid.searchText$.next(this.searchTerm);
    };
    SearchResultsComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: AlertService }
    ]; };
    __decorate([
        ViewChild(SearchGridComponent, { static: true })
    ], SearchResultsComponent.prototype, "searchGrid", void 0);
    SearchResultsComponent = __decorate([
        Component({
            selector: 'c8y-search-results',
            template: "<c8y-title>\n  <span translate class=\"p-r-4\">Search</span>\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"searchTerm\"\n    [translateParams]=\"{\n      searchHint: searchTerm\n    }\"\n    >searching \"{{ searchHint }}\"</small\n  >\n  <small\n    ngNonBindable\n    translate\n    *ngIf=\"filter\"\n    [translateParams]=\"{\n      filterHint: filter\n    }\"\n    >filtered by \"{{ filterHint }}\"</small\n  >\n</c8y-title>\n\n<c8y-search-grid [searchText]=\"searchTerm\" [filteringName]=\"filteringName\"></c8y-search-grid>\n"
        })
    ], SearchResultsComponent);
    return SearchResultsComponent;
}());

var ɵ0 = [
    {
        path: 'assetsearch',
        component: SearchResultsComponent
    }
], ɵ1 = [
    {
        template: SearchBoxComponent
    }
];
var SearchModule = /** @class */ (function () {
    function SearchModule() {
    }
    SearchModule = __decorate([
        NgModule({
            declarations: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
            imports: [CoreModule, DeviceGridModule, BsDropdownModule],
            entryComponents: [SearchResultsComponent, SearchBoxComponent],
            exports: [SearchResultsComponent, SearchBoxComponent, SearchGridComponent],
            providers: [
                SearchService,
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                },
                {
                    provide: HOOK_SEARCH,
                    useValue: ɵ1,
                    multi: true
                }
            ]
        })
    ], SearchModule);
    return SearchModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { SearchBoxComponent, SearchGridComponent, SearchModule, SearchResultsComponent, SearchService, ɵ0, ɵ1 };
//# sourceMappingURL=c8y-ngx-components-search.js.map
