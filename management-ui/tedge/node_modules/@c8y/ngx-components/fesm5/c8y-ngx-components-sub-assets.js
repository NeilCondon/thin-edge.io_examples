import { __decorate, __extends, __awaiter, __generator, __assign, __read } from 'tslib';
import { Component, Injectable, EventEmitter, Input, Output, ViewChild, HostListener, NgModule } from '@angular/core';
import { InventoryService, UserService, SmartGroupsService, SmartRulesService, QueriesUtil } from '@c8y/client';
import { gettext, CellRendererContext, AppStateService, AlertService, Permissions, Status, ModalService, DataGridComponent, C8yStepper, CoreModule, HOOK_ONCE_ROUTE, ViewContext } from '@c8y/ngx-components';
import { DeviceGroupService, AssetNodeService, GroupFragment } from '@c8y/ngx-components/assets-navigator';
import { TranslateService } from '@ngx-translate/core';
import { BaseDeviceGridColumn, NameDeviceGridColumn, ModelDeviceGridColumn, SerialNumberDeviceGridColumn, RegistrationDateDeviceGridColumn, SystemIdDeviceGridColumn, ImeiDeviceGridColumn, AlarmsDeviceGridColumn, DeviceGridService, DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { BehaviorSubject, Subject } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
import { BsModalService } from 'ngx-bootstrap/modal';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';

var AssetTypeCellRendererComponent = /** @class */ (function () {
    function AssetTypeCellRendererComponent(context, deviceGroupService) {
        this.context = context;
        this.deviceGroupService = deviceGroupService;
    }
    AssetTypeCellRendererComponent.prototype.ngOnInit = function () {
        this.isAnyGroup = this.deviceGroupService.isAnyGroup(this.context.item);
        this.isDevice = this.deviceGroupService.isDevice(this.context.item);
        this.groupIcon = this.deviceGroupService.icon(this.context.item);
        this.iconTitle = this.getIconTitle(this.groupIcon);
    };
    AssetTypeCellRendererComponent.prototype.getIconTitle = function (icon) {
        switch (icon) {
            case 'c8y-group':
                return gettext('Group');
            case 'c8y-group-smart':
                return gettext('Smart group');
            case 'c8y-group-remote-inactive':
                return 'Inactive remote group';
            case 'c8y-group-remote':
                return gettext('Remote group');
            default:
                return gettext('Child device');
        }
    };
    AssetTypeCellRendererComponent.ctorParameters = function () { return [
        { type: CellRendererContext },
        { type: DeviceGroupService }
    ]; };
    AssetTypeCellRendererComponent = __decorate([
        Component({
            template: "<device-status class=\"m-l-8\" [mo]=\"context.item\" *ngIf=\"isDevice\"></device-status>\n<i\n  [c8yIcon]=\"groupIcon\"\n  title=\"{{ iconTitle | translate }}\"\n  class=\"m-l-8 c8y-icon-duocolor\"\n  *ngIf=\"isAnyGroup || !isDevice\"\n></i>\n"
        })
    ], AssetTypeCellRendererComponent);
    return AssetTypeCellRendererComponent;
}());

var AssetTypeGridColumn = /** @class */ (function (_super) {
    __extends(AssetTypeGridColumn, _super);
    function AssetTypeGridColumn(initialColumnConfig) {
        var _this = _super.call(this, initialColumnConfig) || this;
        _this.name = 'type';
        _this.header = gettext('Type');
        _this.dataType = "icon" /* Icon */;
        _this.cellRendererComponent = AssetTypeCellRendererComponent;
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: "c8y_IsDeviceGroup" }]
        };
        return _this;
    }
    return AssetTypeGridColumn;
}(BaseDeviceGridColumn));

var SubAssetsService = /** @class */ (function (_super) {
    __extends(SubAssetsService, _super);
    function SubAssetsService(translateService, inventoryService, appState, user, assetNodeService, deviceGroupService, smartGroupsService, smartRulesService, alertService, permissionsService) {
        var _this = _super.call(this, inventoryService, translateService) || this;
        _this.translateService = translateService;
        _this.inventoryService = inventoryService;
        _this.appState = appState;
        _this.user = user;
        _this.assetNodeService = assetNodeService;
        _this.deviceGroupService = deviceGroupService;
        _this.smartGroupsService = smartGroupsService;
        _this.smartRulesService = smartRulesService;
        _this.alertService = alertService;
        _this.permissionsService = permissionsService;
        _this.uiOnlyCountersUpdate = new BehaviorSubject(null);
        _this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'sub-assets-grid-config';
        _this.IS_DEVICE_GROUP_FRAGMENT = 'c8y_IsDeviceGroup';
        _this.IS_DYNAMIC_GROUP_FRAGMENT = 'c8y_IsDynamicGroup';
        return _this;
    }
    SubAssetsService.prototype.getDefaultColumns = function (filterable, sortable) {
        if (filterable === void 0) { filterable = true; }
        if (sortable === void 0) { sortable = true; }
        var defaultColumns = [
            new AssetTypeGridColumn({ sortOrder: 'desc' }),
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    };
    SubAssetsService.prototype.getDefaultPagination = function () {
        var pagination = this.getConfig().pagination;
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    };
    SubAssetsService.prototype.getDefaultActionControls = function () {
        return [];
    };
    SubAssetsService.prototype.unassignAsset = function (asset, parentRef) {
        return __awaiter(this, void 0, void 0, function () {
            var assetId, parentId, alertMessage, error_1, alertMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetId = asset.id;
                        parentId = parentRef.id;
                        if (!this.isDevice(asset)) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.inventoryService.childAssetsRemove(assetId, parentId)];
                    case 2:
                        _a.sent();
                        alertMessage = this.translateService.instant(gettext('Asset unassigned.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        alertMessage = this.translateService.instant(gettext('Could not unassign devices.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 4];
                    case 4: return [4 /*yield*/, this.deactivateSmartrulesForAsset(asset, parentRef)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.isDevice = function (asset) {
        return (!asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) &&
            !asset.hasOwnProperty(this.IS_DYNAMIC_GROUP_FRAGMENT));
    };
    SubAssetsService.prototype.deleteAsset = function (asset, parentRef, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var isGroup;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isGroup = asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) ||
                            this.smartGroupsService.isSmartGroup(asset);
                        if (!isGroup) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.deleteGroup(asset, params)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.deleteDevice(asset, params)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!(parentRef &&
                            !this.smartGroupsService.isSmartGroup(asset) &&
                            !this.smartGroupsService.isSmartGroupV2(asset))) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.deactivateSmartrulesForAsset(asset, parentRef)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.shouldShowWithDeviceUserCheckbox = function (asset) {
        var owner = asset.owner, isRootDevice = asset.c8y_IsDevice;
        var hasDeviceUserAsOwner = asset.owner && this.isDeviceUser(owner);
        return Boolean(isRootDevice && hasDeviceUserAsOwner);
    };
    SubAssetsService.prototype.getDefaultBulkActionControls = function () {
        return [];
    };
    SubAssetsService.prototype.getData = function (columns, pagination, parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var isRoot, query, filters;
            return __generator(this, function (_a) {
                isRoot = !parentReference;
                if (isRoot) {
                    query = this.buildCombinedRootQueryFilter(columns, pagination);
                    return [2 /*return*/, this.assetNodeService.getRootNodes(__assign({}, pagination, { query: query }))];
                }
                filters = __assign({}, this.getAssetsFilters(columns, pagination, baseQuery), { withParents: false });
                if (this.deviceGroupService.isGroup(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getGroupItems(parentReference.id, filters)];
                }
                if (this.deviceGroupService.isDynamicGroup(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)];
                }
                if (this.deviceGroupService.isDevice(parentReference)) {
                    return [2 /*return*/, this.assetNodeService.getDeviceChildren(parentReference.id, filters)];
                }
                return [2 /*return*/];
            });
        });
    };
    SubAssetsService.prototype.getCount = function (columns, pagination, parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var defaultFilters, filters;
            return __generator(this, function (_a) {
                defaultFilters = {
                    pageSize: 1,
                    withChildren: false
                };
                filters = !parentReference
                    ? __assign({ query: this.buildCombinedRootQueryFilter(columns, pagination) }, defaultFilters) : __assign({}, this.getAssetsFilters(columns, pagination, baseQuery), defaultFilters);
                return [2 /*return*/, this.getAssetsStatistics(parentReference, filters)];
            });
        });
    };
    SubAssetsService.prototype.getTotal = function (parentReference, baseQuery) {
        if (baseQuery === void 0) { baseQuery = {}; }
        var queryFilter = this.assetNodeService.rootQueryFilter();
        var query = !parentReference
            ? this.queriesUtil.addAndFilter(queryFilter, baseQuery)
            : baseQuery;
        var filters = {
            query: this.queriesUtil.buildQuery(query),
            withChildren: false,
            withTotalPages: true,
            pageSize: 1
        };
        return this.getAssetsStatistics(parentReference, filters);
    };
    SubAssetsService.prototype.canEditGroup = function (group) {
        var currentUser = this.appState.currentUser.value;
        var hasAdminRole = this.user.hasAnyRole(currentUser, ['ROLE_INVENTORY_ADMIN']);
        var isOwner = group.owner === currentUser.userName;
        return hasAdminRole || isOwner;
    };
    SubAssetsService.prototype.canEditSmartGroup = function () {
        var SMART_GROUPS_ROLES_EDIT = ['ROLE_SMARTGROUP_UPDATE', 'ROLE_SMARTGROUP_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_EDIT);
    };
    SubAssetsService.prototype.canDeleteSmartGroup = function () {
        var SMART_GROUPS_ROLES_DELETE = ['ROLE_SMARTGROUP_ADMIN', 'ROLE_INVENTORY_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_DELETE);
    };
    SubAssetsService.prototype.isSmartGroup = function (group) {
        return this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group);
    };
    SubAssetsService.prototype.isUsingInventoryRoles = function () {
        var currentUser = this.appState.currentUser.value;
        var hasAnyInventoryRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_READ',
            'ROLE_INVENTORY_CREATE'
        ]);
        return !hasAnyInventoryRole;
    };
    SubAssetsService.prototype.getAssetsStatistics = function (parentReference, filters) {
        return __awaiter(this, void 0, void 0, function () {
            var isRoot;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isRoot = !parentReference;
                        if (!isRoot) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.assetNodeService.getRootNodes(filters)];
                    case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    case 2:
                        if (!this.deviceGroupService.isGroup(parentReference)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.assetNodeService.getGroupItems(parentReference.id, filters)];
                    case 3: return [2 /*return*/, (_a.sent()).paging
                            .totalPages];
                    case 4:
                        if (!this.deviceGroupService.isDynamicGroup(parentReference)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)];
                    case 5: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    case 6:
                        if (!this.deviceGroupService.isDevice(parentReference)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.assetNodeService.getDeviceChildren(parentReference.id, filters)];
                    case 7: return [2 /*return*/, (_a.sent()).paging
                            .totalPages];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.buildCombinedRootQueryFilter = function (columns, pagination) {
        var queryFilter = this.assetNodeService.rootQueryFilter();
        var userQuery = this.getQueryObj(columns, pagination);
        var queryPart = this.queriesUtil.addOrderbys(queryFilter, userQuery.__orderby, 'append');
        var fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        return this.queriesUtil.buildQuery(fullQuery);
    };
    SubAssetsService.prototype.deleteGroup = function (group, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var cascade, _a, alertMessage, error_2, alertMessage;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cascade = params.cascade;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!(this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.smartGroupsService.delete(group, { cascade: cascade })];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.inventoryService.delete(group, { cascade: cascade })];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        _a;
                        alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 7];
                    case 6:
                        error_2 = _b.sent();
                        alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.deleteDevice = function (device, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var cascade, withDeviceUser, owner, shouldRemoveOwner, _a, alertMessage, error_3, alertMessage;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cascade = params.cascade, withDeviceUser = params.withDeviceUser;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        owner = device.owner;
                        shouldRemoveOwner = withDeviceUser && owner && this.isDeviceUser(owner);
                        if (!shouldRemoveOwner) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.deleteDeviceWithUser(device, cascade)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.inventoryService.delete(device, { cascade: cascade })];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        _a;
                        alertMessage = this.translateService.instant(gettext('Asset deleted.'));
                        this.alertService.success(alertMessage);
                        return [3 /*break*/, 7];
                    case 6:
                        error_3 = _b.sent();
                        alertMessage = this.translateService.instant(gettext('Could not delete asset.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.deactivateSmartrulesForAsset = function (asset, parentRef) {
        return __awaiter(this, void 0, void 0, function () {
            var assetId, parentId, rules, upateSmartrulesPromises, error_4, alertMessage;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assetId = asset.id;
                        parentId = parentRef.id;
                        return [4 /*yield*/, this.smartRulesService.listByContext(parentId)];
                    case 1:
                        rules = (_a.sent()).data;
                        upateSmartrulesPromises = rules.map(function (rule) {
                            return _this.smartRulesService.bulkDeactivateEnabledSources(rule, [assetId]);
                        });
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, Promise.all(upateSmartrulesPromises)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _a.sent();
                        alertMessage = this.translateService.instant(gettext('Could not deactivate smart rules.'));
                        this.alertService.danger(alertMessage);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.isDeviceUser = function (userId) {
        return userId.match(/^device_/);
    };
    SubAssetsService.prototype.deleteDeviceWithUser = function (device, cascade) {
        return __awaiter(this, void 0, void 0, function () {
            var params, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = { cascade: cascade, withDeviceUser: true };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 5]);
                        return [4 /*yield*/, this.inventoryService.delete(device, params)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_5 = _a.sent();
                        return [4 /*yield*/, this.inventoryService.delete(device, { cascade: cascade })];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsService.prototype.getAssetsFilters = function (columns, pagination, baseQuery) {
        var query = this.queriesUtil.addAndFilter(this.getQueryObj(columns), baseQuery);
        return {
            query: this.queriesUtil.buildQuery(query),
            pageSize: pagination.pageSize || this.DEFAULT_PAGE_SIZE,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    };
    SubAssetsService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: InventoryService },
        { type: AppStateService },
        { type: UserService },
        { type: AssetNodeService },
        { type: DeviceGroupService },
        { type: SmartGroupsService },
        { type: SmartRulesService },
        { type: AlertService },
        { type: Permissions }
    ]; };
    SubAssetsService = __decorate([
        Injectable()
    ], SubAssetsService);
    return SubAssetsService;
}(DeviceGridService));

var GroupInfoComponent = /** @class */ (function () {
    function GroupInfoComponent(inventory, subAssetsService, deviceGroupService, smartGroupsService, alertService, translate, modalService) {
        this.inventory = inventory;
        this.subAssetsService = subAssetsService;
        this.deviceGroupService = deviceGroupService;
        this.smartGroupsService = smartGroupsService;
        this.alertService = alertService;
        this.translate = translate;
        this.modalService = modalService;
        this.onGroupChange = new EventEmitter();
        this.filterMsg = gettext('Smart groups are groups dynamically constructed based on filtering criteria.');
        this.canEditMsg = gettext('You can edit the filter here.');
        this.GROUP_UPDATED_MSG = gettext('Group updated.');
    }
    GroupInfoComponent.prototype.ngOnInit = function () {
        this.canEdit = this.smartGroupsService.isSmartGroupV2(this.group)
            ? this.subAssetsService.canEditSmartGroup()
            : this.subAssetsService.canEditGroup(this.group);
        this.groupIcon = this.deviceGroupService.icon(this.group);
        this.smartGroupFilter = this.group.c8y_DeviceQueryString;
        this.setHintMsg();
    };
    GroupInfoComponent.prototype.isSmartGroup = function () {
        return this.subAssetsService.isSmartGroup(this.group);
    };
    GroupInfoComponent.prototype.update = function (partialGroup) {
        return __awaiter(this, void 0, void 0, function () {
            var isSmartGroup, _a, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        isSmartGroup = this.subAssetsService.isSmartGroup(this.group);
                        if (!isSmartGroup) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateSmartGroup(partialGroup)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.updateGroup(partialGroup)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        _a;
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _b.sent();
                        this.alertService.addServerFailure(error_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    GroupInfoComponent.prototype.setHintMsg = function () {
        var filterMsgTranslated = this.translate.instant(this.filterMsg);
        var canEditMsgTranslated = this.translate.instant(this.canEditMsg);
        this.filterHintMsg = this.canEdit
            ? filterMsgTranslated + " " + canEditMsgTranslated
            : this.filterMsg;
    };
    GroupInfoComponent.prototype.updateGroup = function (partialGroup) {
        return __awaiter(this, void 0, void 0, function () {
            var id, group, updatedGroup;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this.group.id;
                        group = __assign({ id: id }, partialGroup);
                        return [4 /*yield*/, this.inventory.update(group)];
                    case 1:
                        updatedGroup = (_a.sent()).data;
                        this.setGroup(updatedGroup);
                        return [2 /*return*/];
                }
            });
        });
    };
    GroupInfoComponent.prototype.updateSmartGroup = function (partialGroup) {
        return __awaiter(this, void 0, void 0, function () {
            var id, c8y_DeviceQueryString, group, updatedGroup, modalBody, title, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = this.group.id;
                        c8y_DeviceQueryString = partialGroup.c8y_DeviceQueryString;
                        group = __assign({ id: id }, partialGroup);
                        if (!!c8y_DeviceQueryString) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.smartGroupsService.update(group)];
                    case 1:
                        updatedGroup = (_a.sent()).data;
                        this.setGroup(updatedGroup);
                        return [2 /*return*/];
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        modalBody = gettext('You are about to change the smart group filter. Do you want to proceed?');
                        title = gettext('Smart group filter');
                        return [4 /*yield*/, this.modalService.confirm(title, modalBody, Status.WARNING, {
                                ok: gettext('Save'),
                                cancel: gettext('Cancel')
                            })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.isQueryExecutable(c8y_DeviceQueryString)];
                    case 4:
                        if (!(_a.sent())) {
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        return [2 /*return*/];
                    case 6: return [4 /*yield*/, this.smartGroupsService.update(group)];
                    case 7:
                        updatedGroup = (_a.sent()).data;
                        this.setGroup(updatedGroup);
                        return [2 /*return*/];
                }
            });
        });
    };
    GroupInfoComponent.prototype.setGroup = function (group) {
        this.onGroupChange.emit(group);
        this.alertService.success(this.GROUP_UPDATED_MSG);
    };
    GroupInfoComponent.prototype.isQueryExecutable = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        filter = { q: query };
                        return [4 /*yield*/, this.inventory.list(filter)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        error_2 = _a.sent();
                        this.alertService.addServerFailure(error_2);
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GroupInfoComponent.ctorParameters = function () { return [
        { type: InventoryService },
        { type: SubAssetsService },
        { type: DeviceGroupService },
        { type: SmartGroupsService },
        { type: AlertService },
        { type: TranslateService },
        { type: ModalService }
    ]; };
    __decorate([
        Input()
    ], GroupInfoComponent.prototype, "group", void 0);
    __decorate([
        Output()
    ], GroupInfoComponent.prototype, "onGroupChange", void 0);
    GroupInfoComponent = __decorate([
        Component({
            selector: 'c8y-group-info',
            template: "<div class=\"bg-gray-white\">\n  <div class=\"card-block p-t-24 p-b-24 large-padding\">\n    <div class=\"content-flex-70\">\n      <div class=\"text-center\">\n        <i class=\"c8y-icon-duocolor icon-48\" [c8yIcon]=\"groupIcon + '-open'\"></i>\n        <p>\n          <small class=\"label label-info\" *ngIf=\"group.c8y_IsDynamicGroup\">\n            {{ 'Smart group' | translate }}\n          </small>\n          <small\n            class=\"label label-info\"\n            *ngIf=\"!group.c8y_IsDynamicGroup && !group.com_cumulocity_model_Agent\"\n          >\n            {{ 'Group' | translate }}\n          </small>\n          <small class=\"label label-info\" *ngIf=\"group.com_cumulocity_model_Agent\">\n            {{ 'Remote group' | translate }}\n          </small>\n        </p>\n      </div>\n\n      <div class=\"flex-grow col-10\">\n        <div class=\"content-flex-80\">\n          <div class=\"col-9\">\n            <form #groupNameForm=\"ngForm\">\n              <c8y-form-group class=\"form-group-lg m-b-0\">\n                <label class=\"sr-only\" translate>\n                  Name\n                </label>\n\n                <p *ngIf=\"!canEdit\" class=\"form-control-static\">{{ group.name }}</p>\n                <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    [(ngModel)]=\"group.name\"\n                    name=\"name\"\n                    title=\"{{ 'Name' | translate }}\"\n                    size=\"{{ group.name.length + 2 }}\"\n                    placeholder=\"{{ 'e.g. My group' | translate }}\"\n                    maxlength=\"254\"\n                    required\n                  />\n                  <span></span>\n                  <div class=\"input-group-btn\">\n                    <button\n                      (click)=\"update({ name: group.name }); groupNameForm.form.markAsPristine()\"\n                      class=\"btn btn-primary\"\n                      title=\"{{ 'Save' | translate }}\"\n                      [disabled]=\"groupNameForm.form.invalid\"\n                    >\n                      {{ 'Save' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </c8y-form-group>\n            </form>\n            <form #groupDescriptionForm=\"ngForm\">\n              <label class=\"sr-only\" translate>\n                Description\n              </label>\n              <p *ngIf=\"!canEdit\" class=\"form-control-static\">{{ group.c8y_Notes }}</p>\n              <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                <textarea\n                  class=\"form-control\"\n                  [(ngModel)]=\"group.c8y_Notes\"\n                  name=\"description\"\n                  title=\"{{ 'Description' | translate }}\"\n                  cols=\"{{ group.c8y_Notes ? group.c8y_Notes.length : 25 }}\"\n                  placeholder=\"{{ 'e.g. My description' | translate }}\"\n                ></textarea>\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    (click)=\"\n                      update({ c8y_Notes: group.c8y_Notes });\n                      groupDescriptionForm.form.markAsPristine()\n                    \"\n                    class=\"btn btn-primary\"\n                    title=\"{{ 'Save' | translate }}\"\n                    [disabled]=\"groupDescriptionForm.form.invalid\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </form>\n\n            <form #smartGroupFilterForm=\"ngForm\" *ngIf=\"isSmartGroup()\">\n              <c8y-form-group class=\"m-b-0 m-t-8\">\n                <label class=\"m-b-0 text-nowrap\">\n                  {{ 'Smart group filter' | translate }}\n                  <button\n                    class=\"btn-clean text-primary m-r-4\"\n                    type=\"button\"\n                    popover=\"{{ filterHintMsg | translate }}\"\n                    triggers=\"focus\"\n                  >\n                    <i c8yIcon=\"question-circle-o\"></i>\n                  </button>\n                </label>\n\n                <p *ngIf=\"!canEdit\" class=\"form-control-static\">\n                  {{ smartGroupFilter }}\n                </p>\n                <div *ngIf=\"canEdit\" class=\"input-group input-group-editable\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    [(ngModel)]=\"smartGroupFilter\"\n                    name=\"filter\"\n                    size=\"{{ smartGroupFilter.length + 2 }}\"\n                    placeholder=\"{{ 'e.g.' | translate }} $filter=(id eq '12*')\"\n                    maxlength=\"254\"\n                    title=\"{{ 'Smart group filter' | translate }}\"\n                  />\n                  <span></span>\n                  <div class=\"input-group-btn\">\n                    <button\n                      (click)=\"\n                        update({ c8y_DeviceQueryString: smartGroupFilter });\n                        smartGroupFilterForm.form.markAsPristine()\n                      \"\n                      class=\"btn btn-primary\"\n                      title=\"{{ 'Save' | translate }}\"\n                      [disabled]=\"smartGroupFilterForm.form.invalid\"\n                    >\n                      {{ 'Save' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </c8y-form-group>\n            </form>\n          </div>\n          <div class=\"flex-grow\">\n            <p class=\"m-b-8\">\n              <i c8yIcon=\"info-circle\" class=\"text-info m-r-8\"></i>\n              <span class=\"text-label-small\">{{ 'Group info' | translate }}</span>\n            </p>\n            <ul class=\"list-unstyled small\">\n              <li class=\"p-t-4 p-b-4 flex-row separator-top-bottom text-nowrap\">\n                <label class=\"small m-b-0 m-r-8\">{{ 'Created' | translate }}</label>\n                <span class=\"flex-item-right\">{{ group.creationTime | c8yDate }}</span>\n              </li>\n              <li class=\"p-t-4 p-b-4 flex-row separator-bottom text-nowrap\">\n                <label class=\"small m-b-0 m-r-8\">{{ 'Last updated' | translate }}</label>\n                <span class=\"flex-item-right\">{{ group.lastUpdated | c8yDate }}</span>\n              </li>\n\n              <li\n                *ngIf=\"group.com_cumulocity_model_Agent\"\n                class=\"p-t-4 p-b-4 flex-row separator-bottom text-nowrap\"\n              >\n                <label class=\"small m-b-0 m-r-8\">{{ 'Status' | translate }}</label>\n                <span class=\"flex-item-right\" *ngIf=\"group.c8y_BrokerSource\">\n                  {{ group.c8y_BrokerSource.status }}\n                </span>\n                <span class=\"flex-item-right\" *ngIf=\"!group.c8y_BrokerSource\">\n                  {{ 'Offline' | translate }}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        })
    ], GroupInfoComponent);
    return GroupInfoComponent;
}());

var SubAssetsComponent = /** @class */ (function () {
    function SubAssetsComponent(route, appState, deviceGroupService, subAssetsService) {
        var _this = this;
        this.route = route;
        this.appState = appState;
        this.deviceGroupService = deviceGroupService;
        this.subAssetsService = subAssetsService;
        this.toggle = false;
        this.showAddGroup = false;
        this.showAssignDevices = false;
        this.showGroupInfo = true;
        this.showAssignChildDevices = false;
        this.refresh = new EventEmitter();
        this.filterable = true;
        this.dataSub = this.route.parent.data.subscribe(function (_a) {
            var contextData = _a.contextData;
            _this.title = contextData.name;
            _this.currentGroupId = contextData.id;
            _this.group = contextData;
            _this.filterable = !_this.deviceGroupService.isDynamicGroup(contextData);
        });
    }
    SubAssetsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.appState.state$.subscribe(function (state) {
            _this.showGroupInfo = state.app.name === 'cockpit' || state.app.name === 'devicemanagement';
        });
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: !this.isSmartGroup()
        };
    };
    SubAssetsComponent.prototype.groupChange = function (group) {
        /**
         * Group is cached in the context-route guard. To avoid loading old data (when switching tabs) we need to update
         * this object in the cache.
         */
        Object.assign(this.group, group);
        this.title = group.name;
        this.refresh.emit();
    };
    SubAssetsComponent.prototype.isSmartGroup = function () {
        return this.subAssetsService.isSmartGroup(this.group);
    };
    SubAssetsComponent.prototype.ngOnDestroy = function () {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    };
    SubAssetsComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: AppStateService },
        { type: DeviceGroupService },
        { type: SubAssetsService }
    ]; };
    SubAssetsComponent = __decorate([
        Component({
            selector: 'c8y-sub-assets',
            template: "<c8y-title>\n  {{ title }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"!isSmartGroup()\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Add group' | translate }}\"\n    (click)=\"showAddGroup = !showAddGroup\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i><span translate>Add group</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"!isSmartGroup()\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Assign devices' | translate }}\"\n    (click)=\"showAssignDevices = !showAssignDevices\"\n  >\n    <i c8yIcon=\"plus-circle\" class=\"m-r-4\"></i><span translate>Assign devices</span>\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-flex d-col\">\n  <c8y-group-info\n    *ngIf=\"showGroupInfo\"\n    [group]=\"group\"\n    (onGroupChange)=\"groupChange($event)\"\n  ></c8y-group-info>\n  <c8y-sub-assets-grid\n    [refresh]=\"refresh\"\n    [parent-group]=\"group\"\n    [filterable]=\"filterable\"\n    [displayOptions]=\"displayOptions\"\n    class=\"d-contents\"\n  ></c8y-sub-assets-grid>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAddGroup }\">\n  <div class=\"bottom-drawer\">\n    <c8y-add-group\n      [currentGroupId]=\"currentGroupId\"\n      [refresh]=\"refresh\"\n      (onCancel)=\"showAddGroup = false\"\n      *ngIf=\"showAddGroup\"\n    ></c8y-add-group>\n  </div>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAssignDevices }\">\n  <div class=\"bottom-drawer\">\n    <div class=\"d-flex d-col no-align-items fit-h\">\n      <c8y-assign-devices\n        class=\"d-contents\"\n        (onCancel)=\"showAssignDevices = false\"\n        [refresh]=\"refresh\"\n        [currentGroupId]=\"currentGroupId\"\n        (onShowChildDevices)=\"showAssignChildDevices=$event\"\n        (selectedDevice)=\"showChildrenForDevice=$event\"\n        *ngIf=\"showAssignDevices\"\n      ></c8y-assign-devices>\n    </div>\n  </div>\n</div>\n\n<div [ngClass]=\"{ drawerOpen: showAssignChildDevices }\" *ngIf=\"showAssignChildDevices\">\n  <div class=\"bottom-drawer m-t-40\">\n    <div class=\"d-flex d-col no-align-items fit-h\">\n      <c8y-assign-child-devices\n        class=\"d-contents\"\n        (onCancel)=\"showAssignChildDevices = false\"\n        [refresh]=\"refresh\"\n        [currentGroupId]=\"currentGroupId\"\n        [parentDevice]=\"showChildrenForDevice\"\n      ></c8y-assign-child-devices>\n    </div>\n  </div>\n</div>\n"
        })
    ], SubAssetsComponent);
    return SubAssetsComponent;
}());

var DeleteAssetsModalComponent = /** @class */ (function () {
    function DeleteAssetsModalComponent(translateService) {
        this.translateService = translateService;
        this.showWithCascadeCheckbox = true;
        this.showWithDeviceUserCheckbox = false;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Delete'), cancel: gettext('Cancel') };
        this.title = gettext('Delete asset');
        this.status = Status.DANGER;
        this.config = {
            cascade: false,
            withDeviceUser: false
        };
    }
    DeleteAssetsModalComponent.prototype.ngOnInit = function () {
        this.message = this.translateService.instant(gettext('You are about to delete asset: "{{name}}". This operation is irreversible. Do you want to proceed?'), { name: this.asset.name });
    };
    DeleteAssetsModalComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.modalRef.result];
                    case 1:
                        _a.sent();
                        this.onClose();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.onDismiss();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DeleteAssetsModalComponent.prototype.onClose = function () {
        this.closeSubject.next(this.config);
        this.closeSubject.complete();
    };
    DeleteAssetsModalComponent.prototype.onDismiss = function () {
        this.closeSubject.complete();
    };
    DeleteAssetsModalComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    __decorate([
        Input()
    ], DeleteAssetsModalComponent.prototype, "showWithCascadeCheckbox", void 0);
    __decorate([
        Input()
    ], DeleteAssetsModalComponent.prototype, "showWithDeviceUserCheckbox", void 0);
    __decorate([
        Input()
    ], DeleteAssetsModalComponent.prototype, "asset", void 0);
    __decorate([
        ViewChild('modalRef', { static: false })
    ], DeleteAssetsModalComponent.prototype, "modalRef", void 0);
    DeleteAssetsModalComponent = __decorate([
        Component({
            selector: 'c8y-delete-assets-modal',
            template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <form #assetsForm=\"ngForm\">\n    <p class=\"text-wrap m-b-16\">\n      {{ message | translate }}\n    </p>\n    <c8y-form-group *ngIf=\"showWithCascadeCheckbox\" class=\"m-b-0\">\n      <label title=\"{{ 'Delete devices' | translate }}\" class=\"c8y-checkbox\">\n        <input type=\"checkbox\" name=\"cascade\" [(ngModel)]=\"config.cascade\" />\n        <span></span>\n        <span>\n          {{ 'Also delete all devices inside selected asset and its subassets.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n    <c8y-form-group *ngIf=\"showWithDeviceUserCheckbox\" class=\"m-b-0\">\n      <label title=\"{{ 'Delete associated device owner' | translate }}\" class=\"c8y-checkbox\">\n        <input type=\"checkbox\" name=\"withDeviceUser\" [(ngModel)]=\"config.withDeviceUser\" />\n        <span></span>\n        <span>\n          {{ 'Also delete associated device owner.' | translate }}\n        </span>\n      </label>\n    </c8y-form-group>\n  </form>\n</c8y-confirm-modal>\n"
        })
    ], DeleteAssetsModalComponent);
    return DeleteAssetsModalComponent;
}());

var UnassignModalComponent = /** @class */ (function () {
    function UnassignModalComponent(translateService) {
        this.translateService = translateService;
        this.closeSubject = new Subject();
        this.labels = { ok: gettext('Unassign'), cancel: gettext('Cancel') };
        this.title = gettext('Unassign devices');
        this.status = Status.WARNING;
    }
    UnassignModalComponent.prototype.ngOnInit = function () {
        this.message = this.translateService.instant(gettext('You are about to unassign asset: "{{name}}" . Do you want to proceed?'), { name: this.asset.name });
    };
    UnassignModalComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.modalRef.result];
                    case 1:
                        _a.sent();
                        this.onClose();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.onDismiss();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    UnassignModalComponent.prototype.onClose = function () {
        this.closeSubject.next(true);
        this.closeSubject.complete();
    };
    UnassignModalComponent.prototype.onDismiss = function () {
        this.closeSubject.complete();
    };
    UnassignModalComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    __decorate([
        Input()
    ], UnassignModalComponent.prototype, "asset", void 0);
    __decorate([
        ViewChild('modalRef', { static: false })
    ], UnassignModalComponent.prototype, "modalRef", void 0);
    UnassignModalComponent = __decorate([
        Component({
            selector: 'c8y-unassign-modal',
            template: "<c8y-confirm-modal [title]=\"title\" [status]=\"status\" [labels]=\"labels\" #modalRef>\n  <span>{{ message | translate }}</span>\n</c8y-confirm-modal>\n"
        })
    ], UnassignModalComponent);
    return UnassignModalComponent;
}());

var SubAssetsGridComponent = /** @class */ (function () {
    function SubAssetsGridComponent(subAssetsGridService, bsModalService, smartGroupsService) {
        this.subAssetsGridService = subAssetsGridService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.title = gettext('Subassets');
        this.emptyStateText = gettext('Add your first group or assign devices using the buttons on the toolbar.');
        this.loadingItemsLabel = gettext('Loading assets…');
        this.selectable = false;
        this.baseQuery = {};
        this.filterable = true;
        this.sortable = true;
        this.onColumnsChange = new EventEmitter();
        this.itemsSelect = new EventEmitter();
        this.pagination = this.subAssetsGridService.getDefaultPagination();
        this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
        this.displayOptions = {
            striped: true,
            bordered: false,
            gridHeader: true,
            filter: true
        };
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    Object.defineProperty(SubAssetsGridComponent.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        set: function (value) {
            if (value) {
                this._columns = this.subAssetsGridService.getUserConfiguredColumns(value);
            }
            else {
                this._columns = this.subAssetsGridService.getUserConfiguredColumns(this.subAssetsGridService.getDefaultColumns());
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_pagination", {
        set: function (value) {
            if (value) {
                this.pagination = value;
            }
            else {
                this.pagination = this.subAssetsGridService.getDefaultPagination();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_actionControls", {
        set: function (value) {
            if (value) {
                this.actionControls = value;
            }
            else {
                this.actionControls = this.subAssetsGridService.getDefaultActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_bulkActionControls", {
        set: function (value) {
            if (value) {
                this.bulkActionControls = value;
            }
            else {
                this.bulkActionControls = this.subAssetsGridService.getDefaultBulkActionControls();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "isRootGroup", {
        get: function () {
            return !this.parentGroup;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "getInfiniteScrollMode", {
        get: function () {
            return this.isRootGroup && this.subAssetsGridService.isUsingInventoryRoles()
                ? 'auto'
                : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubAssetsGridComponent.prototype, "_displayOptions", {
        set: function (displayOptions) {
            this.displayOptions = __assign({}, this.displayOptions, displayOptions);
        },
        enumerable: true,
        configurable: true
    });
    SubAssetsGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.columns = this.subAssetsGridService.getDefaultColumns(this.filterable, this.sortable);
        if (!this.filterable || !this.sortable) {
            this.columns.forEach(function (column) {
                column.filterable = _this.filterable;
                column.sortable = _this.sortable;
            });
        }
        this.setActionControls();
    };
    SubAssetsGridComponent.prototype.setActionControls = function () {
        return __awaiter(this, void 0, void 0, function () {
            var actionControls, isMicroserviceInstalled, deleteAction, unassignAction;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        actionControls = [];
                        return [4 /*yield*/, this.smartGroupsService.isSmartGroupsV2MicroserviceInstalled()];
                    case 1:
                        isMicroserviceInstalled = (_a.sent()).data;
                        deleteAction = {
                            type: "DELETE" /* Delete */,
                            callback: function (asset) { return _this.onDeleteAsset(asset, _this.parentGroup); },
                            showIf: function (asset) {
                                if (_this.smartGroupsService.isSmartGroupV2(asset)) {
                                    return isMicroserviceInstalled ? _this.subAssetsGridService.canDeleteSmartGroup() : false;
                                }
                                if (_this.smartGroupsService.isSmartGroup(asset)) {
                                    return _this.subAssetsGridService.canDeleteSmartGroup();
                                }
                                return true;
                            }
                        };
                        actionControls.push(deleteAction);
                        unassignAction = {
                            type: 'UNASSIGN',
                            icon: 'unlink',
                            text: gettext('Unassign'),
                            callback: function (asset) { return _this.onUnassignAsset(asset, _this.parentGroup); },
                            showIf: function (asset) {
                                return _this.subAssetsGridService.isDevice(asset) &&
                                    !_this.subAssetsGridService.isSmartGroup(_this.parentGroup);
                            }
                        };
                        actionControls.push(unassignAction);
                        if (!this.actionControls) {
                            this.actionControls = actionControls;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SubAssetsGridComponent.prototype.onUnassignAsset = function (asset, parentRef) {
        var _this = this;
        var initialState = {
            asset: asset
        };
        var modalRef = this.bsModalService.show(UnassignModalComponent, { initialState: initialState });
        modalRef.content.closeSubject.subscribe(function (result) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!result) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.subAssetsGridService.unassignAsset(asset, parentRef)];
                    case 1:
                        _a.sent();
                        this.refresh.emit();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
    };
    SubAssetsGridComponent.prototype.onDeleteAsset = function (asset, parentRef) {
        return __awaiter(this, void 0, void 0, function () {
            var initialState, modalRef;
            var _this = this;
            return __generator(this, function (_a) {
                initialState = {
                    showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
                    asset: asset,
                    showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                        !this.smartGroupsService.isSmartGroupV2(asset)
                };
                modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState: initialState });
                modalRef.content.closeSubject.subscribe(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!result) return [3 /*break*/, 2];
                                this.subAssetsGridService.uiOnlyCountersUpdate.next('DECREASE');
                                return [4 /*yield*/, this.subAssetsGridService.deleteAsset(asset, parentRef, result)];
                            case 1:
                                _a.sent();
                                this.refresh.emit();
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        });
    };
    SubAssetsGridComponent.prototype.ngOnChanges = function (changes) {
        if (changes.parentGroup && !changes.parentGroup.firstChange) {
            this.dataGrid.reload();
        }
    };
    SubAssetsGridComponent.prototype.trackByName = function (_index, column) {
        return column.name;
    };
    SubAssetsGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
        return __awaiter(this, void 0, void 0, function () {
            var promises, counters, action, _a, dataResponse, size, filteredSize;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        promises = [];
                        promises.push(this.subAssetsGridService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
                        action = this.subAssetsGridService.uiOnlyCountersUpdate.value;
                        if (action) {
                            counters = this.uiOnlyCountersUpdate(action);
                            this.subAssetsGridService.uiOnlyCountersUpdate.next(null);
                        }
                        else {
                            promises.push(this.subAssetsGridService.getTotal(this.parentGroup, this.baseQuery));
                            promises.push(this.subAssetsGridService.getCount(dataSourceModifier.columns, dataSourceModifier.pagination, this.parentGroup, this.baseQuery));
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 3]), dataResponse = _a[0], size = _a[1], filteredSize = _a[2];
                        if (!counters) {
                            counters = {
                                size: size,
                                filteredSize: filteredSize
                            };
                        }
                        this.onColumnsChange.emit(dataSourceModifier.columns);
                        return [2 /*return*/, __assign({ res: dataResponse.res, data: dataResponse.data, paging: dataResponse.paging }, counters)];
                }
            });
        });
    };
    SubAssetsGridComponent.prototype.configChange = function (config) {
        this.subAssetsGridService.saveConfig(config);
    };
    // workaround since the totalPages value is cached on the BE
    SubAssetsGridComponent.prototype.uiOnlyCountersUpdate = function (action) {
        var currentAllItemsCount = this.dataGrid.filteringLabelsParams.allItemsCount;
        var currentFilteredItemsCount = this.dataGrid.filteringLabelsParams.filteredItemsCount;
        var counters;
        if (action === 'DECREASE') {
            counters = {
                size: currentAllItemsCount - 1,
                filteredSize: currentFilteredItemsCount - 1
            };
        }
        if (action === 'INCREASE') {
            counters = {
                size: currentAllItemsCount + 1,
                filteredSize: currentFilteredItemsCount + 1
            };
        }
        return counters;
    };
    SubAssetsGridComponent.ctorParameters = function () { return [
        { type: SubAssetsService },
        { type: BsModalService },
        { type: SmartGroupsService }
    ]; };
    __decorate([
        Input('parent-group')
    ], SubAssetsGridComponent.prototype, "parentGroup", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "refresh", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "title", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "emptyStateText", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "loadingItemsLabel", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "columns", null);
    __decorate([
        Input('pagination')
    ], SubAssetsGridComponent.prototype, "_pagination", null);
    __decorate([
        Input('actionControls')
    ], SubAssetsGridComponent.prototype, "_actionControls", null);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "selectable", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "baseQuery", void 0);
    __decorate([
        Input('bulkActionControls')
    ], SubAssetsGridComponent.prototype, "_bulkActionControls", null);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "filterable", void 0);
    __decorate([
        Input()
    ], SubAssetsGridComponent.prototype, "sortable", void 0);
    __decorate([
        Output()
    ], SubAssetsGridComponent.prototype, "onColumnsChange", void 0);
    __decorate([
        Output()
    ], SubAssetsGridComponent.prototype, "itemsSelect", void 0);
    __decorate([
        ViewChild(DataGridComponent, { static: true })
    ], SubAssetsGridComponent.prototype, "dataGrid", void 0);
    __decorate([
        Input('displayOptions')
    ], SubAssetsGridComponent.prototype, "_displayOptions", null);
    SubAssetsGridComponent = __decorate([
        Component({
            selector: 'c8y-sub-assets-grid',
            template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n  [infiniteScroll]=\"getInfiniteScrollMode\"\n  [refresh]=\"refresh\"\n  [displayOptions]=\"displayOptions\"\n  (onConfigChange)=\"configChange($event)\"\n  (itemsSelect)=\"itemsSelect.emit($event)\"\n  class=\"d-contents\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\"></c8y-column>\n  </ng-container>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"c8y-group-add\" class=\"c8y-icon-duocolor\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No items to display.' | translate }}</strong>\n      </p>\n      <small>{{ emptyStateText | translate }}</small>\n    </div>\n  </div>\n</c8y-data-grid>\n"
        })
    ], SubAssetsGridComponent);
    return SubAssetsGridComponent;
}());

var AddGroupService = /** @class */ (function () {
    function AddGroupService(inventoryService) {
        this.inventoryService = inventoryService;
        this.GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';
    }
    AddGroupService.prototype.createGroupAndAssignDevices = function (groupForm, groupContextId, selectedDevices) {
        return __awaiter(this, void 0, void 0, function () {
            var group, name, description, newGroupMO;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        name = groupForm.name, description = groupForm.description;
                        newGroupMO = this.getGroupMO(name, description, groupContextId);
                        if (!groupContextId) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.inventoryService.childAssetsCreate(newGroupMO, groupContextId)];
                    case 1:
                        group = (_a.sent()).data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.inventoryService.create(newGroupMO)];
                    case 3:
                        group = (_a.sent()).data;
                        _a.label = 4;
                    case 4:
                        if (!(selectedDevices.length > 0)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.assignDevices(group.id, selectedDevices)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, group];
                }
            });
        });
    };
    AddGroupService.prototype.getGroupMO = function (name, description, groupContextId) {
        var _a;
        if (description === void 0) { description = ''; }
        var group = (_a = {
                type: this.getGroupType(groupContextId)
            },
            _a[this.GROUP_FRAGMENT_TYPE] = {},
            _a.name = name,
            _a.description = description,
            _a);
        return group;
    };
    AddGroupService.prototype.getGroupType = function (groupContextId) {
        return groupContextId ? GroupFragment.subGroupType : GroupFragment.groupType;
    };
    AddGroupService.prototype.assignDevices = function (id, selectedDevices) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        selectedDevices.forEach(function (moId) {
                            promises.push(_this.inventoryService.childAssetsAdd(moId, id));
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AddGroupService.ctorParameters = function () { return [
        { type: InventoryService }
    ]; };
    AddGroupService = __decorate([
        Injectable()
    ], AddGroupService);
    return AddGroupService;
}());

var AddGroupComponent = /** @class */ (function () {
    function AddGroupComponent(deviceGridService, fb, addGroupService, alert, subAssetsService) {
        this.deviceGridService = deviceGridService;
        this.fb = fb;
        this.addGroupService = addGroupService;
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.refresh = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.pendingStatus = false;
        this.pagination = { pageSize: 20, currentPage: 1 };
        this.selected = [];
        this.ITEMS_SELECT_LIMIT = 15;
        this.btnLabels = {
            next: gettext('Next'),
            cancel: gettext('Cancel'),
            create: gettext('Create')
        };
    }
    AddGroupComponent.prototype.onEnterKeyDown = function (event) {
        // Order matters! Needs to be placed before this.stepper.next
        if (this.stepper.selectedIndex === 1) {
            this.createGroup();
        }
        this.stepper.next();
    };
    AddGroupComponent.prototype.onEscapeKeyDown = function (event) {
        this.onCancel.emit();
    };
    AddGroupComponent.prototype.onBackspaceKeyDown = function (event) {
        var _this = this;
        this.stepper.previous();
        setTimeout(function () {
            _this.setFocusOnNameInput();
        });
    };
    AddGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.formGroupStepOne = this.fb.group({
            name: ['', Validators.required],
            description: ['']
        });
        this.subscription = this.onCancel.subscribe(function () { return _this.resetStepper(); });
    };
    AddGroupComponent.prototype.ngAfterViewInit = function () {
        this.nameInput = this.nameInputRef.nativeElement;
        this.setFocusOnNameInput();
    };
    AddGroupComponent.prototype.createGroup = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pendingStatus = true;
                        this.subAssetsService.uiOnlyCountersUpdate.next('INCREASE');
                        return [4 /*yield*/, this.addGroupService.createGroupAndAssignDevices(this.formGroupStepOne.value, this.currentGroupId, this.selected)];
                    case 1:
                        _a.sent();
                        this.pendingStatus = false;
                        this.resetStepper();
                        this.alert.success(gettext('Group created.'));
                        this.refresh.emit();
                        this.onCancel.emit();
                        return [2 /*return*/];
                }
            });
        });
    };
    AddGroupComponent.prototype.onSelected = function (selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    };
    AddGroupComponent.prototype.resetStepper = function () {
        this.stepper.reset();
        this.stepper.selectedIndex = 1;
        this.selected = [];
    };
    AddGroupComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    AddGroupComponent.prototype.setFocusOnNameInput = function () {
        if (this.nameInput) {
            this.nameInput.focus();
            this.nameInput.select();
        }
    };
    AddGroupComponent.ctorParameters = function () { return [
        { type: DeviceGridService },
        { type: FormBuilder },
        { type: AddGroupService },
        { type: AlertService },
        { type: SubAssetsService }
    ]; };
    __decorate([
        Input()
    ], AddGroupComponent.prototype, "currentGroupId", void 0);
    __decorate([
        Input()
    ], AddGroupComponent.prototype, "refresh", void 0);
    __decorate([
        Output()
    ], AddGroupComponent.prototype, "onDeviceQueryStringChange", void 0);
    __decorate([
        Output()
    ], AddGroupComponent.prototype, "onCancel", void 0);
    __decorate([
        ViewChild(C8yStepper, { static: false })
    ], AddGroupComponent.prototype, "stepper", void 0);
    __decorate([
        ViewChild('nameRef', { static: false })
    ], AddGroupComponent.prototype, "nameInputRef", void 0);
    __decorate([
        HostListener('document:keydown.enter', ['$event'])
    ], AddGroupComponent.prototype, "onEnterKeyDown", null);
    __decorate([
        HostListener('document:keydown.escape', ['$event'])
    ], AddGroupComponent.prototype, "onEscapeKeyDown", null);
    __decorate([
        HostListener('document:keydown.backspace', ['$event'])
    ], AddGroupComponent.prototype, "onBackspaceKeyDown", null);
    AddGroupComponent = __decorate([
        Component({
            selector: 'c8y-add-group',
            template: "<c8y-title *ngIf=\"!currentGroupId\">\n  {{ 'Add group' | translate }}\n</c8y-title>\n\n<div class=\"d-contents\" *ngIf=\"!currentGroupId; else stepper\">\n  <ng-container [ngTemplateOutlet]=\"stepper\"></ng-container>\n</div>\n\n<ng-template #stepper>\n  <c8y-stepper\n    class=\"flex-col flex-nowrap no-align-items fit-h c8y-stepper--no-btns\"\n    [disableDefaultIcons]=\"{ edit: true, done: false }\"\n    [customClasses]=\"['col-md-6', 'col-md-offset-3', 'p-t-16', 'p-b-32', 'flex-no-shrink']\"\n    linear\n  >\n    <cdk-step [stepControl]=\"formGroupStepOne\" [label]=\"'New group' | translate\">\n      <div class=\"p-16 p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center text-medium\">\n              {{ 'New group' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-xs-12 flex-grow no-gutter\">\n        <div class=\"card-inner-scroll fit-h\">\n          <div class=\"card-block p-b-0\">\n            <div class=\"row\">\n              <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n                <c8y-form-group>\n                  <div [formGroup]=\"formGroupStepOne\">\n                    <c8y-form-group>\n                      <label translate>Name</label>\n                      <input\n                        class=\"form-control\"\n                        type=\"text\"\n                        formControlName=\"name\"\n                        placeholder=\"{{ 'e.g. First floor' | translate }} \"\n                        #nameRef\n                        required\n                      />\n                      <c8y-messages>\n                        <c8y-message *ngIf=\"!formGroupStepOne.untouched && !nameRef.value\" translate\n                          >This field is required.</c8y-message\n                        >\n                      </c8y-messages>\n                    </c8y-form-group>\n\n                    <c8y-form-group>\n                      <label translate>Description</label>\n                      <input\n                        class=\"form-control\"\n                        type=\"text\"\n                        formControlName=\"description\"\n                        placeholder=\"{{ 'e.g. first floor devices' | translate }}\"\n                      />\n                    </c8y-form-group>\n                  </div>\n                </c8y-form-group>\n                <c8y-form-group>\n                  <div [formGroup]=\"formGroupStepOne\"></div>\n                </c8y-form-group>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onCancel)=\"onCancel.emit()\"\n        [labels]=\"{ next: btnLabels.next, cancel: btnLabels.cancel }\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n    <cdk-step [label]=\"'Assign devices' | translate\">\n      <div class=\"p-16 p-t-0 flex-no-shrink separator-bottom col-xs-12\">\n        <div class=\"row\">\n          <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n            <h4 class=\"text-center text-medium\">\n              {{ 'Assign devices' | translate }}\n            </h4>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-xs-12 no-gutter flex-grow\">\n        <c8y-device-grid\n          [title]=\"'Select target devices' | translate\"\n          [actionControls]=\"[]\"\n          [infiniteScroll]=\"'auto'\"\n          [selectable]=\"'true'\"\n          [pagination]=\"pagination\"\n          (itemsSelect)=\"onSelected($event)\"\n          [itemsSelectLimit]=\"ITEMS_SELECT_LIMIT\"\n          [refresh]=\"refresh\"\n          class=\"d-contents\"\n        >\n          <div class=\"c8y-empty-state\">\n            <h1 c8yIcon=\"search\"></h1>\n            <div>\n              <p>\n                <strong>{{ 'No matching devices.' | translate }}</strong>\n              </p>\n              <small>{{ 'Refine your search terms' | translate }}</small>\n            </div>\n          </div>\n        </c8y-device-grid>\n      </div>\n      <c8y-stepper-buttons\n        class=\"d-block card-footer p-24 separator\"\n        (onCancel)=\"onCancel.emit()\"\n        (onCustom)=\"createGroup()\"\n        [labels]=\"{ custom: btnLabels.create }\"\n        [pending]=\"pendingStatus\"\n      ></c8y-stepper-buttons>\n    </cdk-step>\n  </c8y-stepper>\n</ng-template>\n"
        })
    ], AddGroupComponent);
    return AddGroupComponent;
}());

var ɵ0 = [
    {
        path: 'add-group',
        component: AddGroupComponent
    }
];
var AddGroupModule = /** @class */ (function () {
    function AddGroupModule() {
    }
    AddGroupModule = __decorate([
        NgModule({
            declarations: [AddGroupComponent],
            imports: [CoreModule, DeviceGridModule, FormsModule, ReactiveFormsModule],
            entryComponents: [AddGroupComponent],
            exports: [AddGroupComponent],
            providers: [
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                },
                AddGroupService
            ]
        })
    ], AddGroupModule);
    return AddGroupModule;
}());

var GroupsComponent = /** @class */ (function () {
    function GroupsComponent(permissions) {
        this.permissions = permissions;
        this.refresh = new EventEmitter();
        this.showAddGroup = false;
        this.filterable = false;
        this.sortable = true;
    }
    GroupsComponent.prototype.ngOnInit = function () {
        if (!this.permissions.hasRole('ROLE_INVENTORY_READ')) {
            this.sortable = false;
        }
    };
    GroupsComponent.ctorParameters = function () { return [
        { type: Permissions }
    ]; };
    GroupsComponent = __decorate([
        Component({
            selector: 'c8y-groups-name',
            template: "<c8y-title>\n  {{'Groups'|translate}}\n</c8y-title>\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    class=\"btn btn-link\"\n    title=\"{{ 'Add group' | translate }}\"\n    (click)=\"showAddGroup = !showAddGroup\"\n  >\n    <i c8yIcon=\"plus-circle\"></i>&nbsp;<span translate>Add group</span>\n  </button>\n</c8y-action-bar-item>\n\n<div [ngClass]=\"{ drawerOpen: showAddGroup }\">\n  <div class=\"bottom-drawer\">\n    <c8y-add-group\n      [refresh]=\"refresh\"\n      (onCancel)=\"showAddGroup = false\"\n      *ngIf=\"showAddGroup\"\n    ></c8y-add-group>\n  </div>\n</div>\n<c8y-sub-assets-grid\n  [refresh]=\"refresh\"\n  [filterable]=\"filterable\"\n  [sortable]=\"sortable\"\n  class=\"content-fullpage d-flex d-col\"\n></c8y-sub-assets-grid>\n"
        })
    ], GroupsComponent);
    return GroupsComponent;
}());

var AssignDevicesService = /** @class */ (function () {
    function AssignDevicesService(inventoryService) {
        this.inventoryService = inventoryService;
    }
    AssignDevicesService.prototype.assignDevices = function (id, selectedDevices) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        selectedDevices.forEach(function (moId) {
                            promises.push(_this.inventoryService.childAssetsAdd(moId, id));
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AssignDevicesService.ctorParameters = function () { return [
        { type: InventoryService }
    ]; };
    AssignDevicesService = __decorate([
        Injectable()
    ], AssignDevicesService);
    return AssignDevicesService;
}());

var AssignDevicesComponent = /** @class */ (function () {
    function AssignDevicesComponent(assignDevicesService, alert) {
        this.assignDevicesService = assignDevicesService;
        this.alert = alert;
        this.refresh = new EventEmitter();
        this.onCancel = new EventEmitter();
        this.onShowChildDevices = new EventEmitter();
        this.selectedDevice = new EventEmitter();
        this.pendingStatus = false;
        this.pagination = { pageSize: 20, currentPage: 1 };
        this.selected = [];
        this.canAssignDevice = false;
        this.actionControls = [];
        this.isSelectable = true;
        this.itemsSelectLimit = 15;
        this.queriesUtil = new QueriesUtil();
    }
    AssignDevicesComponent.prototype.onEnterKeyDown = function (event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    };
    AssignDevicesComponent.prototype.onEscapeKeyDown = function (event) {
        this.onCancel.emit();
    };
    AssignDevicesComponent.prototype.ngOnInit = function () {
        this.setNotIncludedInGroupQuery();
    };
    AssignDevicesComponent.prototype.setNotIncludedInGroupQuery = function () {
        var notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    };
    AssignDevicesComponent.prototype.setActionControls = function (showChildren) {
        var _this = this;
        var actionControls = [];
        var selectChildrenAction = {
            type: 'SELECT_CHILDREN',
            icon: 'enter-bottom',
            text: gettext('Select children'),
            callback: function (asset) { return _this.selectChildren(asset); },
            showIf: function (asset) {
                return asset.childDevices.references.length > 0;
            }
        };
        if (showChildren) {
            actionControls.push(selectChildrenAction);
        }
        this.actionControls = actionControls;
        this.refresh.emit();
    };
    AssignDevicesComponent.prototype.assignDevices = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pendingStatus = true;
                        return [4 /*yield*/, this.assignDevicesService.assignDevices(this.currentGroupId, this.selected)];
                    case 1:
                        _a.sent();
                        this.pendingStatus = false;
                        this.selected = [];
                        this.onCancel.emit();
                        this.refresh.emit();
                        this.alert.success(gettext('Devices assigned to the group.'));
                        return [2 /*return*/];
                }
            });
        });
    };
    AssignDevicesComponent.prototype.onSelected = function (selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    };
    AssignDevicesComponent.prototype.selectChildren = function (asset) {
        this.onShowChildDevices.emit(true);
        this.selectedDevice.emit(asset);
    };
    AssignDevicesComponent.ctorParameters = function () { return [
        { type: AssignDevicesService },
        { type: AlertService }
    ]; };
    __decorate([
        Input()
    ], AssignDevicesComponent.prototype, "currentGroupId", void 0);
    __decorate([
        Input()
    ], AssignDevicesComponent.prototype, "refresh", void 0);
    __decorate([
        Output()
    ], AssignDevicesComponent.prototype, "onCancel", void 0);
    __decorate([
        Output()
    ], AssignDevicesComponent.prototype, "onShowChildDevices", void 0);
    __decorate([
        Output()
    ], AssignDevicesComponent.prototype, "selectedDevice", void 0);
    __decorate([
        HostListener('document:keydown.enter', ['$event'])
    ], AssignDevicesComponent.prototype, "onEnterKeyDown", null);
    __decorate([
        HostListener('document:keydown.escape', ['$event'])
    ], AssignDevicesComponent.prototype, "onEscapeKeyDown", null);
    AssignDevicesComponent = __decorate([
        Component({
            selector: 'c8y-assign-devices',
            template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-medium\">\n        {{ 'Assign devices' | translate }}\n      </h4>\n    </div>\n  </div>\n</div>\n<c8y-device-grid\n  [title]=\"'Select target devices' | translate\"\n  [actionControls]=\"actionControls\"\n  [infiniteScroll]=\"'auto'\"\n  [selectable]=\"isSelectable\"\n  [pagination]=\"pagination\"\n  (itemsSelect)=\"onSelected($event)\"\n  [itemsSelectLimit]=\"itemsSelectLimit\"\n  [refresh]=\"refresh\"\n  [baseQuery]=\"baseQuery\"\n  (onChildDevices)=\"setActionControls($event)\"\n  [showChildDevices]=\"{ show: true, value: false }\"\n  class=\"flex-grow col-xs-12 no-gutter\"\n>\n  <div class=\"c8y-empty-state\">\n    <h1 c8yIcon=\"search\"></h1>\n    <div>\n      <p>\n        <strong>{{ 'No matching devices.' | translate }}</strong>\n      </p>\n      <small>{{ 'Refine your search terms' | translate }}</small>\n    </div>\n  </div>\n</c8y-device-grid>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button (click)=\"onCancel.emit()\" type=\"button\" class=\"btn btn-default\" title=\"{{'Cancel' | translate}}\">\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    (click)=\"assignDevices()\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    title=\"{{'Assign' | translate}}\"\n    [disabled]=\"selected.length === 0\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n"
        })
    ], AssignDevicesComponent);
    return AssignDevicesComponent;
}());

var AssignChildDevicesComponent = /** @class */ (function () {
    function AssignChildDevicesComponent(alert, subAssetsService, inventoryService, assignDevicesService) {
        this.alert = alert;
        this.subAssetsService = subAssetsService;
        this.inventoryService = inventoryService;
        this.assignDevicesService = assignDevicesService;
        this.onCancel = new EventEmitter();
        this.refresh = new EventEmitter();
        this.selected = [];
        this.pendingStatus = false;
    }
    AssignChildDevicesComponent.prototype.onEnterKeyDown = function (event) {
        if (this.selected.length > 0) {
            this.assignDevices();
        }
    };
    AssignChildDevicesComponent.prototype.onEscapeKeyDown = function (event) {
        this.onCancel.emit();
    };
    AssignChildDevicesComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.setNotIncludedInGroupQuery();
                return [2 /*return*/];
            });
        });
    };
    AssignChildDevicesComponent.prototype.setNotIncludedInGroupQuery = function () {
        var notIncludedInGroupQuery = { __not: { __bygroupid: this.currentGroupId } };
        this.baseQuery = notIncludedInGroupQuery;
    };
    AssignChildDevicesComponent.prototype.assignDevices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pendingStatus = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.assignDevicesService.assignDevices(this.currentGroupId, this.selected)];
                    case 2:
                        _a.sent();
                        this.refresh.emit();
                        this.alert.success(gettext('Child devices assigned to the group.'));
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.alert.danger(gettext('Could not assign child devices to the group'), error_1);
                        return [3 /*break*/, 4];
                    case 4:
                        this.pendingStatus = false;
                        this.selected = [];
                        this.onCancel.emit();
                        return [2 /*return*/];
                }
            });
        });
    };
    AssignChildDevicesComponent.prototype.onSelected = function (selectedDevicesIDs) {
        this.selected = selectedDevicesIDs;
    };
    AssignChildDevicesComponent.ctorParameters = function () { return [
        { type: AlertService },
        { type: SubAssetsService },
        { type: InventoryService },
        { type: AssignDevicesService }
    ]; };
    __decorate([
        Input()
    ], AssignChildDevicesComponent.prototype, "currentGroupId", void 0);
    __decorate([
        Input()
    ], AssignChildDevicesComponent.prototype, "parentDevice", void 0);
    __decorate([
        Output()
    ], AssignChildDevicesComponent.prototype, "onCancel", void 0);
    __decorate([
        Input()
    ], AssignChildDevicesComponent.prototype, "refresh", void 0);
    __decorate([
        HostListener('document:keydown.enter', ['$event'])
    ], AssignChildDevicesComponent.prototype, "onEnterKeyDown", null);
    __decorate([
        HostListener('document:keydown.escape', ['$event'])
    ], AssignChildDevicesComponent.prototype, "onEscapeKeyDown", null);
    AssignChildDevicesComponent = __decorate([
        Component({
            selector: 'c8y-assign-child-devices',
            template: "<div class=\"card-block flex-no-shrink separator-bottom col-xs-12 large-padding p-t-24 p-b-24\">\n  <div class=\"row\">\n    <div class=\"col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4\">\n      <h4 class=\"text-center text-medium\">\n        {{ 'Assign child devices' | translate }}\n      </h4>\n    </div>\n  </div>\n</div>\n\n<div class=\"d-flex d-col no-align-items fit-h\">\n  <c8y-sub-assets-grid\n    [title]=\"'Select target child devices' | translate\"\n    [emptyStateText]=\"'All child devices are already assigned to the group' | translate\"\n    [refresh]=\"refresh\"\n    [actionControls]=\"[]\"\n    [selectable]=\"true\"\n    [parent-group]=\"parentDevice\"\n    [baseQuery]=\"baseQuery\"\n    (itemsSelect)=\"onSelected($event)\"\n    class=\"d-contents\"\n  >\n  </c8y-sub-assets-grid>\n</div>\n\n<div class=\"text-center card-footer p-24 separator\">\n  <button\n    (click)=\"onCancel.emit()\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    title=\"{{ 'Cancel' | translate }}\"\n  >\n    <span>{{ 'Cancel' | translate }}</span>\n  </button>\n  <button\n    (click)=\"assignDevices()\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pendingStatus }\"\n    title=\"{{ 'Assign' | translate }}\"\n    [disabled]=\"selected.length === 0\"\n  >\n    <span>{{ 'Assign' | translate }}</span>\n  </button>\n</div>\n"
        })
    ], AssignChildDevicesComponent);
    return AssignChildDevicesComponent;
}());

var ɵ0$1 = [
    {
        context: ViewContext.Group,
        path: 'subassets',
        priority: 1000,
        icon: 'c8y-group-open',
        label: gettext('Subassets'),
        component: SubAssetsComponent
    },
    {
        path: 'group',
        component: GroupsComponent
    }
];
var SubAssetsModule = /** @class */ (function () {
    function SubAssetsModule() {
    }
    SubAssetsModule = __decorate([
        NgModule({
            declarations: [
                SubAssetsComponent,
                SubAssetsGridComponent,
                AssetTypeCellRendererComponent,
                GroupsComponent,
                GroupInfoComponent,
                DeleteAssetsModalComponent,
                UnassignModalComponent,
                AssignDevicesComponent,
                AssignChildDevicesComponent
            ],
            imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule],
            entryComponents: [
                SubAssetsComponent,
                AssetTypeCellRendererComponent,
                GroupsComponent,
                DeleteAssetsModalComponent,
                UnassignModalComponent
            ],
            exports: [],
            providers: [
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0$1,
                    multi: true
                },
                SubAssetsService,
                AssignDevicesService
            ]
        })
    ], SubAssetsModule);
    return SubAssetsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AddGroupComponent, AddGroupModule, AddGroupService, AssetTypeCellRendererComponent, AssetTypeGridColumn, AssignChildDevicesComponent, AssignDevicesComponent, DeleteAssetsModalComponent, GroupInfoComponent, GroupsComponent, SubAssetsComponent, SubAssetsGridComponent, SubAssetsModule, SubAssetsService, UnassignModalComponent, ɵ0$1 as ɵ0, AssetTypeCellRendererComponent as ɵa, DeleteAssetsModalComponent as ɵb, UnassignModalComponent as ɵc, AssignDevicesService as ɵd, AddGroupModule as ɵe, AddGroupComponent as ɵf, AddGroupService as ɵg };
//# sourceMappingURL=c8y-ngx-components-sub-assets.js.map
